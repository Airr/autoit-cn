<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>窗口标题与文本(高级)</title>
  <meta http-equiv="Content-Type"
 content="text/html; charset=gb2312">
  <link href="../css/default.css" rel="stylesheet" type="text/css"></head>
<body>
<h1>窗口标题与文本(高级)</h1>
<p>AutoIt 支持三种&quot;窗口匹配&quot;模式.
  若要更改此模式可通过函数 <a href="../functions/AutoItSetOption.htm#WinTitleMatchMode">AutoItSetOption</a> 
  修改 <a href="../functions/AutoItSetOption.htm#WinTitleMatchMode">WinTitleMatchMode</a>
  属性即可.</p>
<p>&nbsp;</p>
<p><strong>模式 1 (默认)</strong></p>
<p>只匹配标题的前面部分.</p>
<p>在此模式下,若一个窗口的标题是 <strong>无标题 - 记事本</strong> 
  则可使用如&quot;无标题 - 记事本&quot;,&quot;无标题&quot; 甚至是 &quot;无&quot; 等字符串作为
  窗口标题参数使用.</p>
<p>例如:</p>
<p class="codebox">&nbsp;&nbsp;&nbsp; WinWait(&quot;无标题&quot;)</p>
<p>&nbsp;</p>
<p><strong>模式 2</strong></p>
<p>标题的任意子字符串皆可.</p>
<p>在此模式下,若一个窗口的标题是<strong>无标题 - 记事本</strong> 
  则可使用如&quot;无标题 - 记事本&quot;,&quot;无标题&quot;,&quot;记事本&quot;,
  甚至是 &quot;本&quot; 等字符串作为窗口标题参数使用.</p>
<p>例子:</p>
<p class="codebox">&nbsp;&nbsp;&nbsp; WinWait(&quot;记事本&quot;)</p>
<p>&nbsp;</p>
<p><strong>模式 3</strong></p>
<p>完全匹配标题.</p>
<p>在此模式下,若一个窗口的标题是<strong>无标题 - 记事本</strong>则
  <strong>只能</strong>使用 &quot;无标题 - 记事本&quot; 作为窗口标题参数使用.</p>
<p>&nbsp;</p>
<p><strong>模式 4</strong></p> (向后兼容)
<p>高级模式</p>
<p>已经被高级窗口描述取代,不需要设置任何模式即可使用.</p>
<p>&nbsp;</p>
<p><strong>模式 -1 到 -3</strong></p>
<p>按照其它类型的匹配,但是强制小写匹配.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h2>高级窗口描述</h2>
<p>在此模式下,一些特殊的字符串可用来代替<strong>窗口标题</strong>参数,这样我们就可以使用下面的 <em>属性</em> 来识别一个窗口:</p>
<ul>
  <li><strong>TITLE - </strong>窗口标题</li>
  <li><strong>CLASS - </strong>内部窗口类名</li>
  <li><strong>REGEXPTITLE -</strong>窗口标题使用 <a href="../functions/StringRegExp.htm">正则表达式</a>
  (如果正则表达式错误,将把 @error 设置为 2)</li>
  <li><strong>REGEXPCLASS -</strong>窗口类名使用 <a href="../functions/StringRegExp.htm">正则表达式</a>
  (如果正则表达式错误,将把 @error 设置为 2)</li>
  <li><strong>LAST - </strong> 使用上一次成功匹配的窗口,这样就不必三番四次地指定窗口标题和窗口文本了.</li>
  <li><strong>ACTIVE - </strong>当前活动窗口</li>
	<li><strong>X</strong>(坐标) \ <strong>Y</strong>(坐标) \ <strong>W</strong>(宽度) \ <strong>H</strong>(高度) 
	- 窗口坐标与大小</li>
	<li><strong>INSTANCE - </strong>基于1开始的接口(instance,原翻译为枚举) 由程序自动分配的唯一标识.</li>
</ul>
<p>一个窗口中的<em>标题</em>参数包含一个或者多个属性,使用下列格式</p>
<p class="codebox"> [属性1:值1; 属性2:值2]</p>
<p><strong>注意</strong>: 如果一个值中包含了一个 &quot;;&quot; 它必须是成对的(it must be doubled).</p>
<p>&nbsp; </p>
<p>例如: 等待一个类名为 &quot;Notepad&quot; 的窗口</p>
<p class="codebox">  WinWaitActive(&quot;[CLASS:Notepad]&quot;, &quot;&quot;)</p>
<p>&nbsp;</p>
<p>例如: 关闭当前活动窗口</p>
<p class="codebox"> WinClose(&quot;[ACTIVE]&quot;, &quot;&quot;)</p>
<p>&nbsp;</p>
<p>例如: 等待接口(instance,原翻译为枚举)为2,窗口标题为&quot;我的窗口&quot; <strong>和</strong> 类名 &quot;我的类&quot;的窗口 </p>
<p class="codebox">WinWaitActive(&quot;[TITLE:我的窗口; CLASS:我的类; INSTANCE:2]&quot;, &quot;&quot;)</p>
<p>&nbsp;</p>
<p>例如: 列出类名匹配正则表达式的窗口</p>
<p class="codebox">WinList(&quot;[REGEXPCLASS:#\d+]&quot;)</p>
<p>&nbsp; </p>
<p>&nbsp;</p>
<h2>窗口句柄(Window Handles / HWNDs)</h2>
<p>AutoIt 中的变量可用来存储窗口句柄(HWND).所谓窗口句柄是指 Windows 自动分配给每个新创建的窗口的特殊值.窗口句柄可用来代替<em>窗口标题</em>参数.使用窗口句柄来代替<em>窗口标题</em>的好处是能够更加精确地识别窗口,比如说有时候我们会同时打开同一应用程序的多个副本,这些窗口具有完全相同的<em>窗口标题</em>和<em>窗口文本</em>,这时就可以利用窗口句柄的唯一性来准确识别窗口了.
另外,当使用窗口句柄代替<em>窗口标题</em>参数时，<em>窗口文本</em>参数将被完全忽略.</p>
<p>很多函数如 <a href="../functions/WinGetHandle.htm">WinGetHandle</a>, <a href="../functions/WinList.htm">WinList</a> 和 <a href="../functions/GUICreate.htm">GUICreate</a> 都会返回窗口句柄. 这里要特别提醒大家的是 <strong>不能</strong> 简单的把窗口句柄归类为数值或者字符串,它是使用特殊的数据类型的. </p>
<p>&nbsp;</p>
<p><strong>注意:不管当前的 WinTitleMatchMode 被设置为何种模式,窗口句柄始终可用.</strong></p>
<p>&nbsp;</p>
<p><strong>示例</strong></p>
<p class="codebox">
$handle = WinGetHandle(&quot;无标题 - 记事本&quot;, &quot;&quot;)<br>
WinClose($handle)</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
</html>
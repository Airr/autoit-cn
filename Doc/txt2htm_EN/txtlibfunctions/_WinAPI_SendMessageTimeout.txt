###User Defined Function###
_WinAPI_SendMessageTimeout

###Description###
Sends the specified message to one of more windows.

###Syntax###
#Include <WinAPIEx.au3>
_WinAPI_SendMessageTimeout ( $hWnd, $iMessage [, $wParam [, $lParam [, $iTimeout [, $iFlags]]]] )

###Parameters###
@@ParamTable@@
$hWnd
	Handle to the window whose window procedure will receive the message.
$iMessage
	The message to be sent.
$wParam
	[可选参数] Additional message-specific information.
$lParam
	[可选参数] Additional message-specific information.
$iTimeout
	[可选参数] The duration, in milliseconds, of the time-out period. If the message is a broadcast message, each
	window can use the full time-out period. Default is 1000.
$iFlags
	[可选参数] The flags that specifies how to send the message. This parameter can be one or more of the
	following values.
	
	$SMTO_BLOCK
	$SMTO_NORMAL
	$SMTO_ABORTIFHUNG
	$SMTO_NOTIMEOUTIFNOTHUNG
	$SMTO_ERRORONEXIT
	
@@End@@

###ReturnValue###
@@ReturnTable@@
Success	The result of the message processing, depends on the message sent.
Failure	(-1) and sets the @error flag to non-zero.
@@End@@

###Remarks###
This function does not provide information about individual windows timing out if $HWND_BROADCAST is used.

If times out, function fails. To get extended error information, call _WinAPI_GetLastError(). If _WinAPI_GetLastError()
returns ERROR_TIMEOUT (1460), then the function timed out. This function considers a thread is not responding if it has
not responds within five seconds.

The system only does marshalling for system messages (those in the range 0 to (WM_USER-1)). To send other messages
(those >= WM_USER) to another process, you must do custom marshalling.


###See Also###
@@MsdnLink@@ SendMessageTimeout


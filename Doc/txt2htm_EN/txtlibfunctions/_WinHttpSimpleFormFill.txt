###User Defined Function###
_WinHttpSimpleFormFill

###Description###
Fills form.

###Syntax###
#Include <WinHttp.au3>
_WinHttpSimpleFormFill(ByRef $hInternet [, $sActionPage = Default [, $sFormId = Default [, $sFieldId1 = Default [, $sData1 = Default [, (...)]]]]])

###Parameters###
@@ParamTable@@
$hInternet
	Handle returned by _WinHttpConnect() or string variable with form.
$sActionPage
	[可选参数] path to the page with form or session handle if $hInternet is string (default: "" - empty string; meaning 'default' page on the server in former).
$sFormId
	[可选参数] Id of the form. Can be name or zero-based index too (read Remarks section).
$sFieldId1
	[可选参数] Id of the input.
$sData1
	[可选参数] Data to set to coresponding field.
(...)
	[可选参数] Other pairs of Id/Data. Overall number of fields is 40.
@@End@@

###ReturnValue###
@@ReturnTable@@
Success	Returns HTML source of the page returned by the server on submited form.
Failure	Returns empt string and sets @error:
	1 - No forms on the page
	2 - Invalid form
	3 - No forms with specified attributes on the page
	4 - Connection problems
	5 - form's "action" is invalid
	6 - invalid session handle passed
@@End@@

###Remarks###
In case form requires redirection and $hInternet is internet handle, this handle will be closed and replaced with new and required one.
<br>When $hInternet is form string, form's "action" must specify URL and $sActionPage parameter must be session handle. On succesful call this variable will be changed to connection handle of the internally made connection.
Don't forget to close this handle after the function returns and when no longer needed.
<br>$sFormId specifies Id of the form same as .getElementById(FormId). Aditionally you can use "index:FormIndex" to
identify form by its zero-based index number (in case of e.g. three forms on some page first one will have index=0, second index=1, third index=2).
Use "name:FormName" to identify form by its name like with .getElementsByName(FormName). FormName will be taken to be what's right of colon mark.
In that case first form with that name is filled.
<br>As for fields, If "name:FieldName" option is used all the fields except last with that name are removed from the form. Last one is filled with specified $sData data.
<br>This function can be used to fill forms with up to 40 fields at once.
<br>"Submit" control you want to keep (click) set to True. If no such control is set then the first one found in the form is "clicked"
and the other removed from the submited form. "Checkbox" and "Button" input types are removed from the submitted form unless explicitly set. Same goes for "Radio" with exception that
only one such control can be set, the rest are removed. These controls are set by their values. Wrong value makes them invalid and therefore not part of the submited data.
<br>All other non-set fields are left default.
<br>
<br>If this function is used to upload multiple files then there are two available ways. Default would be to submit the form following RFC2388 specification.
In that case every file is represented as multipart/mixed part embedded within the multipart/form-data.
<br>If you want to upload using alternative way (to avoid certain PHP bug that could exist on server side) then prefix the file string with "PHP#50338:" string.
<br>For example: ..."name:files[]", "PHP#50338:" & $sFile1 & ...
<br>Muliple files are always separated with vertical line ASCII character when filling the form.
###Related###
<a href="_WinHttpConnect.htm">_WinHttpConnect</a>


###Example###
@@IncludeExample@@


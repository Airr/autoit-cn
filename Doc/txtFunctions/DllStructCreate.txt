###Function###
DllStructCreate
###Description###
创建一个 C/C++ 样式的数据结构供 DllCall 使用.

###Syntax###
DllStructCreate ( "数据结构" [,指针] )


###Parameters###
@@ParamTable@@
"数据结构"
	字符串表示的要创建的数据结构.(见 注释)..
Pointer
	If supplied the struct will not allocate memory but use the pointer supplied.
@@End@@

###ReturnValue###
@@ReturnTable@@
成功: 	返回一个供 DllStruct 调用的变量. 
失败: 	0 .
@Error:	0 = 没有错误. 
	 1 = 传递给 DllStructCreate 的变量不是字符串. 
	 2 = 传递的字符串中有一个未知的数据类型. 
	 3 = 为数据结构分配需要的内存失败, 或者指针 = 0. 
	 4 = 为传递的字串分配内存错误.
	
@@End@@

<br>
@@ParamTable@@
<b>类型</b>
	<b>详细信息</b>
byte
	8bit(1字节) 带符号字符(signed char)
ubyte
	8bit(1字节) 无符号字符(unsigned char)
char
	8bit(1字节) ASCII 字符(ASCII char)
wchar
	16bit(2字节) 宽字符(Wide char)
short
	16bit(2字节) 带符号整数(signed integer)
ushort
	16bit(2字节) 无符号整数(unsigned integer)
int
	32bit(4字节) 带符号整数(signed integer)
uint
	32bit(4字节) 无符号整数(unsigned integer)
long
	32bit(4字节) 带符号整数(signed integer)
ulong
	32bit(4字节) 无符号整数(unsigned integer)
dword
	32bit(4字节) 无符号整数(unsigned integer)
ptr
	32bit(4字节) 整数(integer)
hwnd
	32bit(4字节) 整数(integer)
float
	32bit(4字节) 浮点指针(floating point)
double
	64bit(8字节) 浮点指针(floating point)
int64
	64bit(8字节) 带符号整数(signed integer)
uint64
	64bit(8字节) 无符号整数(unsigned integer)
int_ptr
	32/64位 带符号整数(signed integer) (依据使用的 x86 或 x64 AutoIt 的版本)
uint_ptr
	32/64位 带符号整数(signed integer) (依据使用的 x86 或 x64 AutoIt 的版本)
long_ptr
	32/64位 无符号整数(unsigned integer) (依据使用的 x86 或 x64 AutoIt 的版本)
ulong_ptr
	32/64位 无符号整数(unsigned integer) (依据使用的 x86 或 x64 AutoIt 的版本)
@@End@@


###Remarks###
Each data type must be separated by a semi-colon ';'.  Create arrays by adding '[size]' after the data type.
DllStructCreate("int;char[128]"). An elementname can be added similar to a C-style declaration DllStructCreate("int n;char buffer[128]"). This dataname can be used in place of the element in other DllStruct... functions.

By default, a structure alignment of 8 is used (to be consistent with general Microsoft compilers and APIs). To use a different alignment prefix the structure with the align keyword - valid alignments are 1,2,4,8 and 16:
DllStructCreate("short;int")     ; structure is 8 bytes, the "int" is at offset 4
DllStructCreate("align 2;short;int")     ; structure is 6 bytes, the "int" is at offset 2

To release allocated memory just set the returned variable to 0.


###Related###
DllCall, DllStructGetData, DllStructSetData, DllStructGetPtr


###Example###
@@IncludeExample@@

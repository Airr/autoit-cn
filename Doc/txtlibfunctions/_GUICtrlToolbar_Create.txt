###User Defined Function###
_GUICtrlToolbar_Create

###Description###
Create a Toolbar control

###Syntax###
#Include <GuiToolBar.au3>
_GUICtrlToolbar_Create($hWnd[, $iStyle = 0x00000800[, $iExStyle = 0x00000000]])

###Parameters###
@@ParamTable@@
$hWnd
	Handle to parent or owner window
$iStyle
	Control styles:
		$BTNS_AUTOSIZE - Specifies that the toolbar control should not assign the standard width to the button.
		Instead, the button's width will be calculated based on the width of the text plus the image of the button.
		$BTNS_BUTTON - Creates a standard button
		$BTNS_CHECK - Creates a dual-state push button that toggles between the pressed and nonpressed
		states each time the user clicks it. The button has a different background color when it is in the pressed
		state.
		$BTNS_CHECKGROUP - Creates a button that stays pressed until another button in the group is pressed,
		similar to option buttons. It is equivalent to combining $BTNS_CHECK and $BTNS_GROUP.
		$BTNS_DROPDOWN - Creates a drop-down style button that can display a list when the button is clicked.
		Instead of the $WM_COMMAND message used for normal buttons, drop-down buttons send a $TBN_DROPDOWN message
		An application can then have the notification handler display a list of options. If the toolbar has the
		$TBSTYLE_EX_DRAWDDARROWS extended style, drop-down buttons will have a drop down arrow displayed in a
		separate section to their right. If the arrow is clicked, a $TBN_DROPDOWN notification will be sent. If the
		associated button is clicked, a $WM_COMMAND message will be sent.
		$BTNS_GROUP - When combined with $BTNS_CHECK, creates a button that stays pressed until another
		button in the group is pressed.
		$BTNS_NOPREFIX - Specifies that the button text will not have an accelerator prefix associated with it
		$BTNS_SEP - Creates a separator, providing a small gap between button groups. A button that has
		this style does not receive user input.
		$BTNS_SHOWTEXT - Specifies that button text should be displayed. All buttons can have text, but only
		those buttons with the $BTNS_SHOWTEXT button style will display it. This button style must be used with the
		$TBSTYLE_LIST style and the $TBSTYLE_EX_MIXEDBUTTONS extended style. If you set text for buttons that do not
		have the $BTNS_SHOWTEXT style, the toolbar control will automatically display it as a ToolTip when the cursor
		hovers over the button. This feature allows your application to avoid handling the $TBN_GETINFOTIP message
		for the toolbar.
		$BTNS_WHOLEDROPDOWN - Specifies that the button will have a drop down arrow, but not as a separate section.
		Buttons with this style behave the same, regardless of whether the $TBSTYLE_EX_DRAWDDARROWS extended style is
		set.

		$TBSTYLE_ALTDRAG - Allows users to change a toolbar button's position by dragging it while holding down
		the ALT key. If this style is not specified, the user must hold down the SHIFT key while dragging a button.
		Note that the $CCS_ADJUSTABLE style must be specified to enable toolbar buttons to be dragged.
		$TBSTYLE_CUSTOMERASE - Generates $NM_CUSTOMDRAW messages when the toolbar processes $WM_ERASEBKGND messages
		$TBSTYLE_FLAT - Creates a flat toolbar
		$TBSTYLE_LIST - Creates a flat toolbar with button text to the right of the bitmap
		$TBSTYLE_REGISTERDROP - Generates $TBN_GETOBJECT notification messages to request drop target objects when
		the cursor passes over toolbar buttons.
		$TBSTYLE_TOOLTIPS - Creates a ToolTip control that an application can use to display descriptive text for
		the buttons in the toolbar.
		$TBSTYLE_TRANSPARENT - Creates a transparent toolbar. In a transparent toolbar, the toolbar is transparent
		but the buttons are not. Button text appears under button bitmaps. To prevent repainting problems, this style
		should be set before the toolbar control becomes visible.
		$TBSTYLE_WRAPABLE - Creates a toolbar that can have multiple lines of buttons. Toolbar buttons can "wrap"
		to the next line when the toolbar becomes too narrow to include all buttons on the same line. When the
		toolbar is wrapped, the break will occur on either the rightmost separator or the rightmost button if there
		are no separators on the bar. This style must be set to display a vertical toolbar control when the toolbar
		is part of a vertical rebar control.

		Default: $TBSTYLE_FLAT
		Forced: $WS_CHILD, $WS_CLIPSIBLINGS, $WS_VISIBLE
$iExStyle
	Control extended styles:
		$TBSTYLE_EX_DRAWDDARROWS - Allows buttons to have a separate dropdown arrow. Buttons that have the
		$BTNS_DROPDOWN style will be drawn with a drop down arrow in a separate section, to the right of the button.
		If the arrow is clicked, only the arrow portion of the button will depress, and the toolbar control will send
		a $TBN_DROPDOWN notification to prompt the application to display the dropdown menu. If the main part of the
		button is clicked, the toolbar control sends a $WM_COMMAND message with the button's ID.
		$TBSTYLE_EX_HIDECLIPPEDBUTTONS - Hides partially clipped buttons
		$TBSTYLE_EX_DOUBLEBUFFER - Requires the toolbar to be double buffered
		$TBSTYLE_EX_MIXEDBUTTONS - Allows you to set text for all buttons, but only display it for the buttons
		with the $BTNS_SHOWTEXT button style. The $TBSTYLE_LIST style must also be set. Normally, when a button does
		not display text, you must handle $TBN_GETINFOTIP to display a ToolTip. With the $TBSTYLE_EX_MIXEDBUTTONS
		extended style, text that is set but not displayed on a button will automatically be used as the button's
		ToolTip text. You only need to handle $TBN_GETINFOTIP if it needs more flexibility in specifying the ToolTip
		text.
@@End@@

###ReturnValue###
Success: Handle to the Toolbar control

###Remarks###
None.

###Related###
_GUICtrlToolbar_Destroy

###Example###
@@IncludeExample@@

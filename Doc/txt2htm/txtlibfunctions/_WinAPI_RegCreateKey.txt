###用户自定义函数###
_WinAPI_RegCreateKey

###描述###
创建指定的注册表键

###语法###
#Include <WinAPIEx.au3>
_WinAPI_RegCreateKey( $hKey [, $sSubKey [, $iDesired [, $iOptions [, $tSecurity]]]] )

###参数###
@@ParamTable@@
$hKey
$KEY_CREATE_SUB_KEY权限. 句柄由_WinAPI_RegCreateKey()或_WinAPI_RegOpenKey()函数返回, 或为下列预定义键之一.
$HKEY_CLASSES_ROOT
$HKEY_CURRENT_CONFIG
$HKEY_CURRENT_USER
$HKEY_LOCAL_MACHINE
$HKEY_USERS
$sSubKey
$hKey参数标识的键的子键; 可到注册表树的第32层.
$iDesired
   用于指定键的访问权限的掩码. 该参数可为:
$KEY_ALL_ACCESS: $STANDARD_RIGHTS_REQUIRED + $KEY_QUERY_VALUE + $KEY_SET_VALUE + $KEY_CREATE_SUB_KEY + $KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY + $KEY_CREATE_LINK
$KEY_CREATE_LINK: 系统保留
$KEY_CREATE_SUB_KEY: 创建注册表键的子键
$KEY_ENUMERATE_SUB_KEYS: 枚举注册表键的子键
$KEY_EXECUTE: 与$KEY_READ相同
$KEY_NOTIFY: 请求更改注册表键或子键的通知
$KEY_QUERY_VALUE: 查询注册表键的值
$KEY_READ: $STANDARD_RIGHTS_READ + $KEY_QUERY_VALUE + $KEY_ENUMERATE_SUB_KEYS + $KEY_NOTIFY
$KEY_SET_VALUE: 创建, 删除或设置注册表值
$KEY_WOW64_32KEY: 表示64位Windows程序在32位注册表视图中操作
$KEY_WOW64_64KEY: 表示64位Windows程序在64位注册表视图中操作
$KEY_WRITE: $STANDARD_RIGHTS_WRITE + $KEY_SET_VALUE + $KEY_CREATE_SUB_KEY
$iOptions
   该参数可为:
$REG_OPTION_BACKUP_RESTORE: 表示键以允许备份和还原的特殊权限打开
$REG_OPTION_CREATE_LINK: 表示键为象征性连接
$REG_OPTION_NON_VOLATILE: 表示键在系统重新启动时保留改变
$REG_OPTION_VOLATILE: 表示键在系统重新启动时不保留改变
$tSecurity
$tagSECURITY_ATTRIBUTES结构. 为0时表示无法继承.
@@End@@

###返回值###
@@ReturnTable@@
成功: 打开或创建的键的句柄, @extended标记可包含:
    0 (FALSE): 键已存在且不带改变打开
    1 (TRUE): 键不存在并创建
失败: 返回0并设置@error非0, @extended标记可包含非0系统错误代码.
@@End@@

###备注###
应用程序无法创建HKEY_USERS或HKEY_LOCAL_MACHINE的直接子键. 可创建HKEY_USERS或HKEY_LOCAL_MACHINE树的下级子键.
如果不是一个预定义注册表键($HKEY_...)必须在使用完句柄后调用_WinAPI_RegCloseKey()函数.
运行示例前请将 reg.dat 文件保存至临时文件夹

###相关###

###参考###
 搜索MSDN知识库中RegCreateKey的相关信息

###示例###
@@IncludeExample@@
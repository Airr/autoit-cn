AbsAbs ( expression )Calculates the absolute value of a number.
ACosACos ( expression )Calculates the arcCosine of a number.
AdlibRegisterAdlibRegister ( "function" [, time = 250] )Registers an Adlib function.
AdlibUnRegisterAdlibUnRegister ( ["function"] )Unregisters an adlib function.
AscAsc ( "char" )Returns the ASCII code of a character.
AscWAscW ( "char" )Returns the unicode code of a character.
ASinASin ( expression )Calculates the arcsine of a number.
AssignAssign ( "varname", "data" [, flag = 0] )Assigns a variable by name with the data.
ATanATan ( expression )Calculates the arctangent of a number.
AutoItSetOptionAutoItSetOption ( "option" [, param] )Changes the operation of various AutoIt functions/parameters.
AutoItWinGetTitleAutoItWinGetTitle (  )Retrieves the title of the AutoIt window.
AutoItWinSetTitleAutoItWinSetTitle ( "newtitle" )Changes the title of the AutoIt window.
BeepBeep ( [Frequency = 500 [, Duration = 1000]] )Plays back a beep to the user.
BinaryBinary ( expression )Returns the binary representation of an expression.
BinaryLenBinaryLen ( binary )Returns the number of bytes in a binary variant.
BinaryMidBinaryMid ( binary, start [, count] )Extracts a number of bytes from a binary variant.
BinaryToStringBinaryToString ( expression [, flag = 1] )Converts a binary variant into a string.
BitANDBitAND ( value1, value2 [, value n] )Performs a bitwise AND operation.
BitNOTBitNOT ( value )Performs a bitwise NOT operation.
BitORBitOR ( value1, value2 [, value n] )Performs a bitwise OR operation.
BitRotateBitRotate ( value [, shift = 1 [, size = "W"]] )Performs a bit shifting operation, with rotation.
BitShiftBitShift ( value, shift )Performs a bit shifting operation.
BitXORBitXOR ( value1, value2 [, value n] )Performs a bitwise exclusive OR (XOR) operation.
BlockInputBlockInput ( flag )Disable/enable the mouse and keyboard.
BreakBreak ( mode )Enables or disables the users' ability to exit a script from the tray icon menu.
CallCall ( "function" [, param1 [, param2 [, param<i>N</i>]]] )Calls a user-defined or built-in function contained in first parameter.
CDTrayCDTray ( "drive", "status" )Opens or closes the CD tray.
CeilingCeiling ( expression )Returns a number rounded up to the next integer.
ChrChr ( ASCIIcode )Returns a character corresponding to an ASCII code.
ChrWChrW ( UNICODEcode )Returns a character corresponding to a unicode code.
ClipGetClipGet (  )Retrieves text from the clipboard.
ClipPutClipPut ( "value" )Writes text to the clipboard.
ConsoleReadConsoleRead ( [peek = False [, binary = False]] )Read from the STDIN stream of the AutoIt script process.
ConsoleWriteConsoleWrite ( "data" )Writes data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.
ConsoleWriteErrorConsoleWriteError ( "data" )Writes data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.
ControlClickControlClick ( "title", "text", controlID [, button = "left" [, clicks = 1 [, x [, y]]]] )Sends a mouse click command to a given control.
ControlCommandControlCommand ( "title", "text", controlID, "command" [, "option"] )Sends a command to a control.
ControlDisableControlDisable ( "title", "text", controlID )Disables or "grays-out" a control.
ControlEnableControlEnable ( "title", "text", controlID )Enables a "grayed-out" control.
ControlFocusControlFocus ( "title", "text", controlID )Sets input focus to a given control on a window.
ControlGetFocusControlGetFocus ( "title" [, "text"] )Returns the ControlRef# of the control that has keyboard focus within a specified window.
ControlGetHandleControlGetHandle ( "title", "text", controlID )Retrieves the internal handle of a control.
ControlGetPosControlGetPos ( "title", "text", controlID )Retrieves the position and size of a control relative to its window.
ControlGetTextControlGetText ( "title", "text", controlID )Retrieves text from a control.
ControlHideControlHide ( "title", "text", controlID )Hides a control.
ControlListViewControlListView ( "title", "text", controlID, "command" [, option1 [, option2]] )Sends a command to a ListView32 control.
ControlMoveControlMove ( "title", "text", controlID, x, y [, width [, height]] )Moves a control within a window.
ControlSendControlSend ( "title", "text", controlID, "string" [, flag = 0] )Sends a string of characters to a control.
ControlSetTextControlSetText ( "title", "text", controlID, "new text" [, flag = 0] )Sets text of a control.
ControlShowControlShow ( "title", "text", controlID )Shows a control that was hidden.
ControlTreeViewControlTreeView ( "title", "text", controlID, "command" [, option1 [, option2]] )Sends a command to a TreeView32 control.
CosCos ( expression )Calculates the cosine of a number.
DecDec ( "hex" [, flag = 0] )Returns a numeric representation of a hexadecimal string.
DirCopyDirCopy ( "source dir", "dest dir" [, flag = 0] )Copies a directory and all sub-directories and files (Similar to xcopy).
DirCreateDirCreate ( "path" )Creates a directory/folder.
DirGetSizeDirGetSize ( "path" [, flag = 0] )Returns the size in bytes of a given directory.
DirMoveDirMove ( "source dir", "dest dir" [, flag = 0] )Moves a directory and all sub-directories and files.
DirRemoveDirRemove ( "path" [, recurse = 0] )Deletes a directory/folder.
DllCallDllCall ( "dll", "return type", "function" [, type1, param1 [, type n, param n]] )Dynamically calls a function in a DLL.
DllCallAddressDllCallAddress ( "return type", address [, type1, param1 [, type n, param n]] )Dynamically calls a function at a specific memory address.
DllCallbackFreeDllCallbackFree ( handle )Frees a previously created handle created with DllCallbackRegister.
DllCallbackGetPtrDllCallbackGetPtr ( handle )Returns the pointer to a callback function that can be passed to the Win32 API.
DllCallbackRegisterDllCallbackRegister ( "function", "return type", "params" )Creates a user-defined DLL Callback function.
DllCloseDllClose ( dllhandle )Closes a previously opened DLL.
DllOpenDllOpen ( "filename" )Opens a DLL file for use in DllCall.
DllStructCreateDllStructCreate ( Struct [, Pointer] )Creates a C/C++ style structure to be used in DllCall.
DllStructGetDataDllStructGetData ( Struct, Element [, index = Default] )Returns the data of an element of the struct.
DllStructGetPtrDllStructGetPtr ( Struct [, Element] )Returns the pointer to the struct or an element in the struct.
DllStructGetSizeDllStructGetSize ( Struct )Returns the size of the struct in bytes.
DllStructSetDataDllStructSetData ( Struct, Element, value [, index] )Sets the data of an element in the struct.
DriveGetDriveDriveGetDrive ( "type" )Returns an array containing the enumerated drives.
DriveGetFileSystemDriveGetFileSystem ( "path" )Returns File System Type of a drive.
DriveGetLabelDriveGetLabel ( "path" )Returns Volume Label of a drive, if it has one.
DriveGetSerialDriveGetSerial ( "path" )Returns Serial Number of a drive.
DriveGetTypeDriveGetType ( "path" [, operation = 1] )Returns drive type.
DriveMapAddDriveMapAdd ( "device", "remote share" [, flags = 0 [, "user" [, "password"]]] )Maps a network drive.
DriveMapDelDriveMapDel ( "drive" )Disconnects a network drive.
DriveMapGetDriveMapGet ( "device" )Retrieves the details of a mapped drive.
DriveSetLabelDriveSetLabel ( "path", "label" )Sets the Volume Label of a drive.
DriveSpaceFreeDriveSpaceFree ( "path" )Returns the free disk space of a path in Megabytes.
DriveSpaceTotalDriveSpaceTotal ( "path" )Returns the total disk space of a path in Megabytes.
DriveStatusDriveStatus ( "path" )Returns the status of the drive as a string.
EnvGetEnvGet ( "envvariable" )Retrieves an environment variable.
EnvSetEnvSet ( "envvariable" [, "value"] )Writes an environment variable.
EnvUpdateEnvUpdate (  )Refreshes the OS environment.
EvalEval ( string )Return the value of the variable defined by a string.
ExecuteExecute ( string )Execute an expression.
ExpExp ( expression )Calculates <i><b>e</b></i> to the power of a number.
FileChangeDirFileChangeDir ( "path" )Changes the current working directory.
FileCloseFileClose ( "filehandle" )Closes a previously opened file.
FileCopyFileCopy ( "source", "dest" [, flag = 0] )Copies one or more files.
FileCreateNTFSLinkFileCreateNTFSLink ( "source", "hardlink" [, flag = 0] )Creates an NTFS hardlink to a file or a directory
FileCreateShortcutFileCreateShortcut ( "file", "lnk" [, "workdir" [, "args" [, "desc" [, "icon" [, "hotkey" [, icon number [, state]]]]]]] )Creates a shortcut (.lnk) to a file.
FileDeleteFileDelete ( "filename" )Delete one or more files.
FileExistsFileExists ( "path" )Checks if a file or directory exists.
FileFindFirstFileFileFindFirstFile ( "filename" )Returns a search "handle" according to file search string.
FileFindNextFileFileFindNextFile ( search )Returns a filename according to a previous call to FileFindFirstFile.
FileFlushFileFlush ( "filehandle" )Flushes the file's buffer to disk.
FileGetAttribFileGetAttrib ( "filename" )Returns a code string representing a file's attributes.
FileGetEncodingFileGetEncoding ( "filehandle/filename" [, mode = 1] )Determines the text encoding used in a file.
FileGetLongNameFileGetLongName ( "filename" [, flag = 0] )Returns the long path+name of the path+name passed.
FileGetPosFileGetPos ( "filehandle" )Retrieves the current file position.
FileGetShortcutFileGetShortcut ( "lnk" )Retrieves details about a shortcut.
FileGetShortNameFileGetShortName ( "filename" [, flag = 0] )Returns the 8.3 short path+name of the path+name passed.
FileGetSizeFileGetSize ( "filename" )Returns the size of a file in bytes.
FileGetTimeFileGetTime ( "filename" [, option = 0 [, format = 0]] )Returns the time and date information for a file.
FileGetVersionFileGetVersion ( "filename" [, "stringname"] )Returns the "File" version information.
FileInstallFileInstall ( "source", "dest" [, flag = 0] )Include and install a file with the compiled script.
FileMoveFileMove ( "source", "dest" [, flag = 0] )Moves one or more files
FileOpenFileOpen ( "filename" [, mode = 0] )Opens a file for reading or writing.
FileOpenDialogFileOpenDialog ( "title", "init dir", "filter" [, options = 0 [, "default name" [, hwnd]]] )Initiates a Open File Dialog.
FileReadFileRead ( "filehandle/filename" [, count] )Read in a number of characters from a previously opened file.
FileReadLineFileReadLine ( "filehandle/filename" [, line = 1] )Read in a line of text from a previously opened text file.
FileReadToArrayFileReadToArray ( "filehandle/filename" )Reads the specified file into an array.
FileRecycleFileRecycle ( "source" )Sends a file or directory to the recycle bin.
FileRecycleEmptyFileRecycleEmpty ( ["source"] )Empties the recycle bin.
FileSaveDialogFileSaveDialog ( "title", "init dir", "filter" [, options = 0 [, "default name" [, hwnd]]] )Initiates a Save File Dialog.
FileSelectFolderFileSelectFolder ( "dialog text", "root dir" [, flag = 0 [, "initial dir" [, hwnd]]] )Initiates a Browse For Folder dialog.
FileSetAttribFileSetAttrib ( "file pattern", "+-RASHNOT" [, recurse = 0] )Sets the attributes of one or more files/directories
FileSetPosFileSetPos ( "filehandle", offset, origin )Sets the current file position.
FileSetTimeFileSetTime ( "file pattern", "time" [, type = 0 [, recurse = 0]] )Sets the timestamp of one of more files.
FileWriteFileWrite ( "filehandle/filename", "text/data" )Append a text/data to the end of a previously opened file.
FileWriteLineFileWriteLine ( "filehandle/filename", "line" )Append a line of text to the end of a previously opened text file.
FloorFloor ( expression )Returns a number rounded down to the closest integer.
FtpSetProxyFtpSetProxy ( mode = 0 [, "proxy:port" [, "username" [, "password"]]] )Sets the internet proxy to use for ftp access.
FuncNameFuncName ( $Functionvariable )Returns the name of a function stored in a variable.
GUICreateGUICreate ( "title" [, width [, height [, left = -1 [, top = -1 [, style = -1 [, exStyle = -1 [, parent = 0]]]]]]] )Create a GUI window.
GUICtrlCreateAviGUICtrlCreateAvi ( filename, subfileid, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates an AVI video control for the GUI.
GUICtrlCreateButtonGUICtrlCreateButton ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Button control for the GUI.
GUICtrlCreateCheckboxGUICtrlCreateCheckbox ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Checkbox control for the GUI.
GUICtrlCreateComboGUICtrlCreateCombo ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a ComboBox control for the GUI.
GUICtrlCreateContextMenuGUICtrlCreateContextMenu ( [controlID] )Creates a context menu for a control or entire GUI window.
GUICtrlCreateDateGUICtrlCreateDate ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a date control for the GUI.
GUICtrlCreateDummyGUICtrlCreateDummy (  )Creates a Dummy control for the GUI.
GUICtrlCreateEditGUICtrlCreateEdit ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates an Edit control for the GUI.
GUICtrlCreateGraphicGUICtrlCreateGraphic ( left, top [, width [, height [, style]]] )Creates a Graphic control for the GUI.
GUICtrlCreateGroupGUICtrlCreateGroup ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Group control for the GUI.
GUICtrlCreateIconGUICtrlCreateIcon ( filename, iconName, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates an Icon control for the GUI.
GUICtrlCreateInputGUICtrlCreateInput ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates an Input control for the GUI.
GUICtrlCreateLabelGUICtrlCreateLabel ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a static Label control for the GUI.
GUICtrlCreateListGUICtrlCreateList ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a List control for the GUI.
GUICtrlCreateListViewGUICtrlCreateListView ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a ListView control for the GUI.
GUICtrlCreateListViewItemGUICtrlCreateListViewItem ( "text", listviewID )Creates a ListView item.
GUICtrlCreateMenuGUICtrlCreateMenu ( "submenutext" [, menuID = -1 [, menuentry = -1]] )Creates a Menu control for the GUI.
GUICtrlCreateMenuItemGUICtrlCreateMenuItem ( "text", menuID = -1 [, menuentry = -1 [, menuradioitem = 0]] )Creates a MenuItem control for the GUI.
GUICtrlCreateMonthCalGUICtrlCreateMonthCal ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a month calendar control for the GUI.
GUICtrlCreateObjGUICtrlCreateObj ( ObjectVar, left, top [, width [, height]] )Creates an ActiveX control in the GUI.
GUICtrlCreatePicGUICtrlCreatePic ( filename, left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Picture control for the GUI.
GUICtrlCreateProgressGUICtrlCreateProgress ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Progress control for the GUI.
GUICtrlCreateRadioGUICtrlCreateRadio ( "text", left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Radio button control for the GUI.
GUICtrlCreateSliderGUICtrlCreateSlider ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Slider control for the GUI.
GUICtrlCreateTabGUICtrlCreateTab ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a Tab control for the GUI.
GUICtrlCreateTabItemGUICtrlCreateTabItem ( "text" )Creates a TabItem control within an existing tab control in the GUI.
GUICtrlCreateTreeViewGUICtrlCreateTreeView ( left, top [, width [, height [, style = -1 [, exStyle = -1]]]] )Creates a TreeView control for the GUI.
GUICtrlCreateTreeViewItemGUICtrlCreateTreeViewItem ( "text", treeviewID )Creates a TreeViewItem control for the GUI.
GUICtrlCreateUpdownGUICtrlCreateUpdown ( inputcontrolID [, style = -1] )Creates an UpDown control for the GUI.
GUICtrlDeleteGUICtrlDelete ( controlID )Deletes a control.
GUICtrlGetHandleGUICtrlGetHandle ( controlID )Returns the handle for a control and some special (item) handles (Menu, ContextMenu, TreeViewItem).
GUICtrlGetStateGUICtrlGetState ( controlID )Gets the current state of a control
GUICtrlReadGUICtrlRead ( controlID [, advanced = 0] )Read state or data of a control.
GUICtrlRecvMsgGUICtrlRecvMsg ( controlID , msg [, wParam [, lParamType]] )Send a message to a control and retrieve information in lParam.
GUICtrlRegisterListViewSortGUICtrlRegisterListViewSort ( controlID, "function" )Register a user defined function for an internal listview sorting callback function.
GUICtrlSendMsgGUICtrlSendMsg ( controlID, msg , wParam, lParam )Send a message to a control.
GUICtrlSendToDummyGUICtrlSendToDummy ( controlID [, state] )Sends a message to a Dummy control.
GUICtrlSetBkColorGUICtrlSetBkColor ( controlID, backgroundcolor )Sets the background color of a control.
GUICtrlSetColorGUICtrlSetColor ( controlID, textcolor )Sets the text color of a control.
GUICtrlSetCursorGUICtrlSetCursor ( controlID, cursorID )Sets the mouse cursor icon for a particular control.
GUICtrlSetDataGUICtrlSetData ( controlID, data [, default] )Modifies the data for a control.
GUICtrlSetDefBkColorGUICtrlSetDefBkColor ( defbkcolor [, winhandle] )Sets the default background color of all the controls of the GUI window.
GUICtrlSetDefColorGUICtrlSetDefColor ( deftextcolor [, winhandle] )Sets the default text color of all the controls of the GUI window.
GUICtrlSetFontGUICtrlSetFont ( controlID, size [, weight [, attribute [, fontname [, quality]]]] )Sets the font for a control.
GUICtrlSetGraphicGUICtrlSetGraphic ( controlID, type [, par1 [, ... par6]] )Modifies the data for a control.
GUICtrlSetImageGUICtrlSetImage ( controlID, filename [, iconname [, icontype]] )Sets the bitmap or icon image to use for a control.
GUICtrlSetLimitGUICtrlSetLimit ( controlID, max [, min = 0] )Limits the number of characters/pixels for a control.
GUICtrlSetOnEventGUICtrlSetOnEvent ( controlID, "function" )Defines a user-defined function to be called when a control is clicked.
GUICtrlSetPosGUICtrlSetPos ( controlID, left [, top [, width [, height]]] )Changes the position of a control within the GUI window.
GUICtrlSetResizingGUICtrlSetResizing ( controlID, resizing )Defines the resizing method used by a control.
GUICtrlSetStateGUICtrlSetState ( controlID, state )Changes the state of a control.
GUICtrlSetStyleGUICtrlSetStyle ( controlID, style [, exStyle] )Changes the style of a control.
GUICtrlSetTipGUICtrlSetTip ( controlID, tiptext [, "title" [, icon [, options]]] )Sets the tip text associated with a control.
GUIDeleteGUIDelete ( [winhandle] )Deletes a GUI window and all controls that it contains.
GUIGetCursorInfoGUIGetCursorInfo ( [winhandle] )Gets the mouse cursor position relative to GUI window.
GUIGetMsgGUIGetMsg ( [advanced = 0] )Polls the GUI to see if any events have occurred.
GUIGetStyleGUIGetStyle ( [winhandle] )Retrieves the styles of a GUI window.
GUIRegisterMsgGUIRegisterMsg ( msgID, "function" )Register a user defined function for a known Windows Message ID (WM_MSG).
GUISetAcceleratorsGUISetAccelerators ( accelerators [, winhandle] )Sets the accelerator table to be used in a GUI window.
GUISetBkColorGUISetBkColor ( background [, winhandle] )Sets the background color of the GUI window.
GUISetCoordGUISetCoord ( left, top [, width [, height [, winhandle]]] )Sets absolute coordinates for the next control.
GUISetCursorGUISetCursor ( [cursorID [, override = 0 [, winhandle]]] )Sets the mouse cursor icon for a GUI window.
GUISetFontGUISetFont ( size [, weight [, attribute [, fontname [, winhandle [, quality]]]]] )Sets the default font for a GUI window.
GUISetHelpGUISetHelp ( helpfile [, winhandle] )Sets an executable file that will be run when F1 is pressed.
GUISetIconGUISetIcon ( iconfile [, iconID [, winhandle]] )Sets the icon used in a GUI window.
GUISetOnEventGUISetOnEvent ( specialID, "function" [, winhandle] )Defines a user function to be called when a system button is clicked.
GUISetStateGUISetState ( [flag [, winhandle]] )Changes the state of a GUI window.
GUISetStyleGUISetStyle ( Style [, ExStyle [, winhandle]] )Changes the styles of a GUI window.
GUIStartGroupGUIStartGroup ( [winhandle] )Defines that any subsequent controls that are created will be "grouped" together.
GUISwitchGUISwitch ( winhandle [, tabitemID] )Switches the current window used for GUI functions.
HexHex ( expression [, length] )Returns a string representation of an integer or of a binary type converted to hexadecimal.
HotKeySetHotKeySet ( "key" [, "function"] )Sets a hotkey that calls a user function.
HttpSetProxyHttpSetProxy ( mode = 0 [, "proxy:port" [, "username" [, "password"]]] )Sets the internet proxy to use for http access.
HttpSetUserAgentHttpSetUserAgent ( "user agent" )Sets the HTTP user-agent string which is sent with all Inet requests.
HWndHWnd ( expression )Converts an expression into an HWND handle.
InetCloseInetClose ( handle )Closes a handle returned from InetGet().
InetGetInetGet ( "URL", "filename" [, options = 0 [, background = 0]] )Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.
InetGetInfoInetGetInfo ( [handle [, index = -1]] )Returns detailed data for a handle returned from InetGet().
InetGetSizeInetGetSize ( "URL" [, options = 0] )Returns the size (in bytes) of a file located on the internet.
InetReadInetRead ( "URL" [, options = 0] )Downloads a file from the internet using the HTTP, HTTPS or FTP protocol.
IniDeleteIniDelete ( "filename", "section" [, "key"] )Deletes a value from a standard format .ini file.
IniReadIniRead ( "filename", "section", "key", "default" )Reads a value from a standard format .ini file.
IniReadSectionIniReadSection ( "filename", "section" )Reads all key/value pairs from a section in a standard format .ini file.
IniReadSectionNamesIniReadSectionNames ( "filename" )Reads all sections in a standard format .ini file.
IniRenameSectionIniRenameSection ( "filename", "section", "new section" [, flag = 0] )Renames a section in a standard format .ini file.
IniWriteIniWrite ( "filename", "section", "key", "value" )Writes a value to a standard format .ini file.
IniWriteSectionIniWriteSection ( "filename", "section", "data" [, index = 1] )Writes a section to a standard format .ini file.
InputBoxInputBox ( "title", "prompt" [, "default" [, "password char" [, width = -1 [, height = -1 [, left = Default [, top = Default [, timeout = 0 [, hwnd]]]]]]]] )Displays an input box to ask the user to enter a string.
IntInt ( expression [, flag = 0] )Returns the integer (whole number) representation of an expression.
IsAdminIsAdmin (  )Checks if the current user has full administrator privileges.
IsArrayIsArray ( variable )Checks if a variable is an array type.
IsBinaryIsBinary ( expression )Checks if a variable or expression is a binary type.
IsBoolIsBool ( variable )Checks if a variable's base type is boolean.
IsDeclaredIsDeclared ( expression )Check if a variable has been declared.
IsDllStructIsDllStruct ( variable )Checks if a variable is a DllStruct type.
IsFloatIsFloat ( variable )Checks if a variable or expression is a float-type.
IsFuncIsFunc ( expression )Checks if a variable or expression is a function type.
IsHWndIsHWnd ( variable )Checks if a variable's base type is a pointer and window handle.
IsIntIsInt ( variable )Checks if a variable or expression is an integer type.
IsKeywordIsKeyword ( variable )Checks if a variable is a keyword (for example, Default).
IsNumberIsNumber ( variable )Checks if a variable's base type is numeric.
IsObjIsObj ( variable )Checks if a variable or expression is an object type.
IsPtrIsPtr ( variable )Checks if a variable's base type is a pointer.
IsStringIsString ( variable )Checks if a variable is a string type.
LogLog ( expression )Calculates the natural logarithm of a number.
MemGetStatsMemGetStats (  )Retrieves memory related information.
ModMod ( value1, value2 )Performs the modulus operation.
MouseClickMouseClick ( "button" [, x, y [, clicks = 1 [, speed = 10]]] )Perform a mouse click operation.
MouseClickDragMouseClickDrag ( "button", x1, y1, x2, y2 [, speed = 10] )Perform a mouse click and drag operation.
MouseDownMouseDown ( "button" )Perform a mouse down event at the current mouse position.
MouseGetCursorMouseGetCursor (  )Returns the cursor ID Number for the current Mouse Cursor.
MouseGetPosMouseGetPos ( [dimension] )Retrieves the current position of the mouse cursor.
MouseMoveMouseMove ( x, y [, speed = 10] )Moves the mouse pointer.
MouseUpMouseUp ( "button" )Perform a mouse up event at the current mouse position.
MouseWheelMouseWheel ( "direction" [, clicks = 1] )Moves the mouse wheel up or down.
MsgBoxMsgBox ( flag, "title", "text" [, timeout = 0 [, hwnd]] )Displays a simple message box with optional timeout.
NumberNumber ( expression [, flag = 0] )Returns the numeric representation of an expression.
ObjCreateObjCreate ( "classname" [, "servername" [, "username",["password"]]] )Creates a reference to a COM object from the given classname.
ObjCreateInterfaceObjCreateInterface ( "CLSID" , "IID" [, "interface_description",[flag = True]] )Creates a reference to an object from the given classname/object pointer, interface identifier and description string.
ObjEventObjEvent ( $ObjectVar, "functionprefix" [, "interface name"] )Handles incoming events from the given Object.
ObjGetObjGet ( "filename" [, "classname" [, instance]] )Retrieves a reference to a COM object from an existing process or filename.
ObjNameObjName ( $Objectvariable [, Flag = 1] )Returns the name or interface description of an Object
OnAutoItExitRegisterOnAutoItExitRegister ( "function" )Registers a function to be called when AutoIt exits.
OnAutoItExitUnRegisterOnAutoItExitUnRegister ( "function" )UnRegisters a function that was called when AutoIt exits.
PingPing ( "address/hostname" [, timeout = 4000] )Pings a host and returns the roundtrip-time.
PixelChecksumPixelChecksum ( left, top, right, bottom [, step = 1 [, hwnd [, mode = 0]]] )Generates a checksum for a region of pixels.
PixelGetColorPixelGetColor ( x , y [, hwnd] )Returns a pixel color according to x,y pixel coordinates.
PixelSearchPixelSearch ( left, top, right, bottom, color [, shade-variation = 0 [, step = 1 [, hwnd]]] )Searches a rectangle of pixels for the pixel color provided.
ProcessCloseProcessClose ( "process" )Terminates a named process.
ProcessExistsProcessExists ( "process" )Checks to see if a specified process exists.
ProcessGetStatsProcessGetStats ( ["process" [, type = 0]] )Returns an array about Memory or IO infos of a running process.
ProcessListProcessList ( ["name"] )Returns an array listing the currently running processes (names and PIDs).
ProcessSetPriorityProcessSetPriority ( "process", priority )Changes the priority of a process
ProcessWaitProcessWait ( "process" [, timeout = 0] )Pauses script execution until a given process exists.
ProcessWaitCloseProcessWaitClose ( "process" [, timeout = 0] )Pauses script execution until a given process does not exist.
ProgressOffProgressOff (  )Turns Progress window off.
ProgressOnProgressOn ( "title", "maintext" [, "subtext" [, x pos [, y pos [, opt]]]] )Creates a customizable progress bar window.
ProgressSetProgressSet ( percent [, "subtext" [, "maintext"]] )Sets the position and/or text of a previously created Progress bar window.
PtrPtr ( expression )Converts an expression into a pointer variant.
RandomRandom ( [Min = 0 [, Max = 1 [, Flag = 0]]] )Generates a pseudo-random float-type number.
RegDeleteRegDelete ( "keyname" [, "valuename"] )Deletes a key or value from the registry.
RegEnumKeyRegEnumKey ( "keyname", instance )Reads the name of a subkey according to its instance.
RegEnumValRegEnumVal ( "keyname", instance )Reads the name of a value according to its instance.
RegReadRegRead ( "keyname", "valuename" )Reads a value from the registry.
RegWriteRegWrite ( "keyname" [, "valuename", "type", value] )Creates a key or value in the registry.
RoundRound ( expression [, decimalplaces] )Returns a number rounded to a specified number of decimal places.
RunRun ( "program" [, "workingdir" [, show_flag [, opt_flag]]] )Runs an external program.
RunAsRunAs ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )Runs an external program under the context of a different user.
RunAsWaitRunAsWait ( "username", "domain", "password", logon_flag, "program" [, "workingdir" [, show_flag [, opt_flag]]] )Runs an external program under the context of a different user and pauses script execution until the program finishes.
RunWaitRunWait ( "program" [, "workingdir" [, show_flag [, opt_flag]]] )Runs an external program and pauses script execution until the program finishes.
SendSend ( "keys" [, flag = 0] )Sends simulated keystrokes to the active window.
SendKeepActiveSendKeepActive ( "title" [, "text"] )Attempts to keep a specified window active during Send().
SetErrorSetError ( code [, extended = 0 [, return value]] )Manually set the value of the @error (and optionally @extended) macro.
SetExtendedSetExtended ( code [, return value] )Manually set the value of the @extended macro.
ShellExecuteShellExecute ( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )Runs an external program using the ShellExecute API.
ShellExecuteWaitShellExecuteWait ( "filename" [, "parameters" [, "workingdir" [, "verb" [, showflag]]]] )Runs an external program using the ShellExecute API and pauses script execution until it finishes.
ShutdownShutdown ( code )Shuts down the system.
SinSin ( expression )Calculates the sine of a number.
SleepSleep ( delay )Pause script execution.
SoundPlaySoundPlay ( "filename" [, wait = 0] )Play a sound file.
SoundSetWaveVolumeSoundSetWaveVolume ( percent )Sets the system wave volume by percent.
SplashImageOnSplashImageOn ( "title", "file" [, width [, height [, x pos [, y pos [, opt]]]]] )Creates a customizable image popup window.
SplashOffSplashOff (  )Turns SplashText or SplashImage off.
SplashTextOnSplashTextOn ( "title", "text" [, w = 500 [, h = 400 [, x pos [, y pos [, opt = 0 [, "fontname" [, fontsz = 12 [, fontwt]]]]]]]] )Creates a customizable text popup window.
SqrtSqrt ( expression )Calculates the square-root of a number.
SRandomSRandom ( Seed )Set Seed for random number generation.
StatusbarGetTextStatusbarGetText ( "title" [, "text" [, part = 1]] )Retrieves the text from a standard status bar control.
StderrReadStderrRead ( process_id [, peek = False [, binary = False]] )Reads from the STDERR stream of a previously run child process.
StdinWriteStdinWrite ( process_id [, data] )Writes a number of characters to the STDIN stream of a previously run child process.
StdioCloseStdioClose ( process_id )Closes all resources associated with a process previously run with STDIO redirection.
StdoutReadStdoutRead ( process_id [, peek = False [, binary = False]] )Reads from the STDOUT stream of a previously run child process.
StringString ( expression )Returns the string representation of an expression.
StringAddCRStringAddCR ( "string" )Takes a string and prefixes all linefeed characters ( Chr(10) ) with a carriage return character ( Chr(13) ).
StringCompareStringCompare ( "string1", "string2" [, casesense = 0] )Compares two strings with options.
StringFormatStringFormat ( "format control", var1 [, ... var32] )Returns a formatted string (similar to the C sprintf() function).
StringFromASCIIArrayStringFromASCIIArray ( array,[start = 0 [, end = -1 [, encoding = 0]]] )Converts an array of ASCII codes to a string.
StringInStrStringInStr ( "string", "substring" [, casesense = 0 [, occurrence = 1 [, start = 1 [, count]]]] )Checks if a string contains a given substring.
StringIsAlNumStringIsAlNum ( "string" )Checks if a string contains only alphanumeric characters.
StringIsAlphaStringIsAlpha ( "string" )Checks if a string contains only alphabetic characters.
StringIsASCIIStringIsASCII ( "string" )Checks if a string contains only ASCII characters in the range 0x00 - 0x7f (0 - 127).
StringIsDigitStringIsDigit ( "string" )Checks if a string contains only digit (0-9) characters.
StringIsFloatStringIsFloat ( "string" )Checks if a string is a floating point number.
StringIsIntStringIsInt ( "string" )Checks if a string is an integer.
StringIsLowerStringIsLower ( "string" )Checks if a string contains only lowercase characters.
StringIsSpaceStringIsSpace ( "string" )Checks if a string contains only whitespace characters.
StringIsUpperStringIsUpper ( "string" )Checks if a string contains only uppercase characters.
StringIsXDigitStringIsXDigit ( "string" )Checks if a string contains only hexadecimal digit (0-9, A-F) characters.
StringLeftStringLeft ( "string", count )Returns a number of characters from the left-hand side of a string.
StringLenStringLen ( "string" )Returns the number of characters in a string.
StringLowerStringLower ( "string" )Converts a string to lowercase.
StringMidStringMid ( "string", start [, count = -1] )Extracts a number of characters from a string.
StringRegExpStringRegExp ( "test", "pattern" [, flag = 0 [, offset = 1]] )Check if a string fits a given regular expression pattern.
StringRegExpReplaceStringRegExpReplace ( "test", "pattern", "replace" [, count = 0] )Replace text in a string based on regular expressions.
StringReplaceStringReplace ( "string", "searchstring/start", "replacestring" [, occurrence = 0 [, casesense = 0]] )Replaces substrings in a string.
StringReverseStringReverse ( "string" [, flag = 0] )Reverses the contents of the specified string.
StringRightStringRight ( "string", count )Returns a number of characters from the right-hand side of a string.
StringSplitStringSplit ( "string", "delimiters" [, flag = 0] )Splits up a string into substrings depending on the given delimiters.
StringStripCRStringStripCR ( "string" )Removes all carriage return values ( Chr(13) ) from a string.
StringStripWSStringStripWS ( "string", flag )Strips the white space in a string.
StringToASCIIArrayStringToASCIIArray ( "string",[start = 0 [, end [, encoding = 0]]] )Converts a string to an array containing the ASCII code of each character.
StringToBinaryStringToBinary ( expression [, flag = 1] )Converts a string into binary data.
StringTrimLeftStringTrimLeft ( "string", count )Trims a number of characters from the left hand side of a string.
StringTrimRightStringTrimRight ( "string", count )Trims a number of characters from the right hand side of a string.
StringUpperStringUpper ( "string" )Converts a string to uppercase.
TanTan ( expression )Calculates the tangent of a number.
TCPAcceptTCPAccept ( mainsocket )Permits an incoming connection attempt on a socket.
TCPCloseSocketTCPCloseSocket ( socket )Closes a TCP socket.
TCPConnectTCPConnect ( IPAddr, port )Create a socket connected to an existing server.
TCPListenTCPListen ( IPAddr, port [, MaxPendingConnection] )Creates a socket listening for an incoming connection.
TCPNameToIPTCPNameToIP ( name )Converts an Internet name to IP address.
TCPRecvTCPRecv ( mainsocket, maxlen [, flag = 0] )Receives data from a connected socket.
TCPSendTCPSend ( mainsocket, data )Sends data on a connected socket.
TCPShutdownTCPShutdown ( )Stops TCP/UDP services.
TCPStartupTCPStartup ( )Starts TCP or UDP services.
TimerDiffTimerDiff ( handle )Returns the difference in time from a previous call to TimerInit().
TimerInitTimerInit (  )Returns a handle that can be passed to TimerDiff() to calculate the difference in milliseconds.
ToolTipToolTip ( "text" [, x [, y [, "title" [, icon = 0 [, options]]]]] )Creates a tooltip anywhere on the screen.
TrayCreateItemTrayCreateItem ( "text" [, menuID = -1 [, menuentry = -1 [, menuradioitem = 0]]] )Creates a menuitem control for the tray.
TrayCreateMenuTrayCreateMenu ( "sub/menutext" [, menuID = -1 [, menuentry = -1]] )Creates a menu control for the tray menu.
TrayGetMsgTrayGetMsg (  )Polls the tray to see if any events have occurred.
TrayItemDeleteTrayItemDelete ( controlID )Deletes a menu/item control from the tray menu.
TrayItemGetHandleTrayItemGetHandle ( controlID )Returns the handle for a tray menu(item).
TrayItemGetStateTrayItemGetState ( [controlID] )Gets the current state of a control.
TrayItemGetTextTrayItemGetText ( controlID )Gets the itemtext of a tray menu/item control.
TrayItemSetOnEventTrayItemSetOnEvent ( itemID, "function" )Defines a user-defined function to be called when a tray item is clicked.
TrayItemSetStateTrayItemSetState ( controlID, state )Sets the state of a tray menu/item control.
TrayItemSetTextTrayItemSetText ( controlID, text )Sets the itemtext of a tray menu/item control.
TraySetClickTraySetClick ( flag )Sets the clickmode of the tray icon - what mouseclicks will display the tray menu.
TraySetIconTraySetIcon ( [filename [, iconID]] )Loads/Sets a specified tray icon.
TraySetOnEventTraySetOnEvent ( specialID, "function" )Defines a user function to be called when a special tray action happens.
TraySetPauseIconTraySetPauseIcon ( [filename [, iconID]] )Loads/Sets a specified tray pause icon.
TraySetStateTraySetState ( [flag = 1] )Sets the state of the tray icon.
TraySetToolTipTraySetToolTip ( [text] )(Re)Sets the tooltip text for the tray icon.
TrayTipTrayTip ( "title", "text", timeout [, option = 0] )Displays a balloon tip from the AutoIt Icon.
UBoundUBound ( Array [, Dimension = 1] )Returns the size of array dimensions.
UDPBindUDPBind ( IPAddr, port )Create a socket bound to an incoming connection.
UDPCloseSocketUDPCloseSocket ( socketarray )Close a UDP socket.
UDPOpenUDPOpen ( IPAddr, port [, flag = 0] )Open a socket connected to an existing server .
UDPRecvUDPRecv ( socketarray, maxlen [, flag = 0] )Receives data from an opened socket
UDPSendUDPSend ( socketarray, data )Sends data on an opened socket
VarGetTypeVarGetType ( expression )Returns the internal type representation of a variant.
WinActivateWinActivate ( "title" [, "text"] )Activates (gives focus to) a window.
WinActiveWinActive ( "title" [, "text"] )Checks to see if a specified window exists and is currently active.
WinCloseWinClose ( "title" [, "text"] )Closes a window.
WinExistsWinExists ( "title" [, "text"] )Checks to see if a specified window exists.
WinFlashWinFlash ( "title" [, "text" [, flashes = 4 [, delay = 500]]] )Flashes a window in the taskbar.
WinGetCaretPosWinGetCaretPos (  )Returns the coordinates of the caret in the foreground window
WinGetClassListWinGetClassList ( "title" [, "text"] )Retrieves the classes from a window.
WinGetClientSizeWinGetClientSize ( "title" [, "text"] )Retrieves the size of a given window's client area.
WinGetHandleWinGetHandle ( "title" [, "text"] )Retrieves the internal handle of a window.
WinGetPosWinGetPos ( "title" [, "text"] )Retrieves the position and size of a given window.
WinGetProcessWinGetProcess ( "title" [, "text"] )Retrieves the Process ID (PID) associated with a window.
WinGetStateWinGetState ( "title" [, "text"] )Retrieves the state of a given window.
WinGetTextWinGetText ( "title" [, "text"] )Retrieves the text from a window.
WinGetTitleWinGetTitle ( "title" [, "text"] )Retrieves the full title from a window.
WinKillWinKill ( "title" [, "text"] )Forces a window to close.
WinListWinList ( ["title" [, "text"]] )Retrieves a list of windows.
WinMenuSelectItemWinMenuSelectItem ( "title", "text", "item" [, "item" [, "item" [, "item" [, "item" [, "item" [, "item"]]]]]] )Invokes a menu item of a window.
WinMinimizeAllWinMinimizeAll (  )Minimizes all windows.
WinMinimizeAllUndoWinMinimizeAllUndo (  )Undoes a previous WinMinimizeAll function.
WinMoveWinMove ( "title", "text", x, y [, width [, height [, speed]]] )Moves and/or resizes a window.
WinSetOnTopWinSetOnTop ( "title", "text", flag )Change a window's  "Always On Top" attribute.
WinSetStateWinSetState ( "title", "text", flag )Shows, hides, minimizes, maximizes, or restores a window.
WinSetTitleWinSetTitle ( "title", "text", "newtitle" )Changes the title of a window.
WinSetTransWinSetTrans ( "title", "text", transparency )Sets the transparency of a window.
WinWaitWinWait ( "title" [, "text" [, timeout = 0]] )Pauses execution of the script until the requested window exists.
WinWaitActiveWinWaitActive ( "title" [, "text" [, timeout = 0]] )Pauses execution of the script until the requested window is active.
WinWaitCloseWinWaitClose ( "title" [, "text" [, timeout = 0]] )Pauses execution of the script until the requested window does not exist.
WinWaitNotActiveWinWaitNotActive ( "title" [, "text" [, timeout = 0]] )Pauses execution of the script until the requested window is not active.
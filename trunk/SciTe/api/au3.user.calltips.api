_WinAPI_AbortPath($hDC) Closes and discards any paths in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AboutDlg($sTitle, $sName, $sText [, $hIcon [, $hParent]]) Displays a Windows About dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ActivateKeyboardLayout($hLocale [, $iFlag]) Sets the input locale identifier for the calling thread or the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddClipboardFormatListener($hWnd) Places the given window in the system-maintained clipboard format listener list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddFontMemResourceEx($pData, $iSize) Adds the font resource from a memory image to the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddFontResourceEx($sFont [, $iFlag [, $fNotify]]) Adds the font resource from the specified file to the system font table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddIconOverlay($hIcon, $hOverlay) Creates an icon by merging the source icon and overlay mask (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddIconTransparency($hIcon [, $iPercent [, $fDelete]]) Adds a transparency to the specified 32 bits-per-pixel icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AddMRUString($hMRU, $sStr) Adds a string to the top of the most recently used (MRU) list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AdjustTokenPrivileges($hToken, $aPrivileges, $iAttributes, ByRef $aAdjust) Enables or disables privileges in the specified access token (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AdjustWindowRectEx(ByRef $tRECT, $iStyle [, $iExStyle [, $fMenu]) Calculates the required size of the window rectangle, based on the desired size of the client rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AlphaBlend($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iAlpha [, $fAlpha]) Displays bitmaps that have transparent or semitransparent pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AngleArc($hDC, $iX, $iY, $iRadius, $nStartAngle, $nSweepAngle) Draws a line segment and an arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AnimateWindow($hWnd, $iFlags [, $iDuration]) Enables you to produce special effects when showing or hiding windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Arc($hDC, $tRECT, $iXStartArc, $iYStartArc, $iXEndArc, $iYEndArc) Draws an elliptical arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ArcTo($hDC, $tRECT, $iXRadial1, $iYRadial1, $iXRadial2, $iYRadial2) Draws an elliptical arc (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ArrayToStruct($aData [, $iStart [, $iEnd]]) Converts an array of strings to the structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssignProcessToJobObject($hJob, $hProcess) Assigns a process to an existing job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssocGetPerceivedType($sExt) Retrieves a file's perceived type based on its extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_AssocQueryString($sAssoc, $iType [, $iFlags [, $sExtra]]) Searches for and retrieves a file or protocol association-related string from the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginBufferedPaint($hDC, $tTarget, ByRef $hNewDC [, $iFormat [, $iFlags [, $tExclude [, $iAlpha]]]]) Begins a buffered paint operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginDeferWindowPos([$iAmount]) Allocates memory for a multiple-window-position structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginPaint($hWnd, ByRef $tPAINTSTRUCT) Prepares the specified window for painting (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginPath($hDC) Opens a path bracket in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BeginUpdateResource($sFile [, $fDelete]) Retrieves a handle that can be used to add, delete, or replace resources in a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BringWindowToTop($hWnd) Brings the specified window to the top of the Z order (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BroadcastSystemMessage($iMsg [, $wParam [, $lParam [, $iFlags [, $iRecipients]]]]) Sends a message to the specified recipients (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BrowseForFolderDlg([$sRoot [, $sText [, $iFlags [, $pBrowseProc [, $lParam [, $hParent]) Displays a dialog box that enables the user to select a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintClear($hBP [, $tRECT]) Clears a specified rectangle in the buffer to ARGB = {0,0,0,0} (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintInit() Initialize buffered painting for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintSetAlpha($hBP [, $iAlpha [, $tRECT]]) Sets the alpha to a specified value in a given rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_BufferedPaintUnInit() Closes down buffered painting for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CalculatePopupWindowPosition($iX, $iY, $iWidth, $iHeight [, $iFlags [, $tExclude]]) Calculates an appropriate pop-up window position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CascadeWindows($aWnds [, $tRECT [, $hParent [, $iFlags [, $iStart [, $iEnd]]]]]) Cascades the specified child windows of the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CharToOem($sStr) Converts a string into the OEM-defined character set (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ChildWindowFromPointEx($hWnd, $tPOINT [, $iFlags]) Determines which, if any, of the child windows belonging to the specified parent window contains the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ClipCursor($tRECT) Confines the cursor to a rectangular area on the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseDesktop($hDesktop) Closes an open handle to a desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseEnhMetaFile($hDC) Closes an enhanced-metafile device context and returns a handle that identifies an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseFigure($hDC) Closes an open figure in a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseThemeData($hTheme) Closes the theme data handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseWindow($hWnd) Minimizes (but does not destroy) the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CloseWindowStation($hStation) Closes an open window station handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoInitialize([$iFlags]) Initializes the COM library for use by the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ColorHLSToRGB($iHue, $iLuminance, $iSaturation) Converts colors from hue-luminance-saturation (HLS) to RGB format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ColorRGBToHLS($iRGB, ByRef $iHue, ByRef $iLuminance, ByRef $iSaturation) Converts colors from RGB to hue-luminance-saturation (HLS) format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CombineTransform($tXFORM1, $tXFORM2) Concatenates two world-space to page-space transformations (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CommandLineToArgv($sCmd) Parses a command-line string and returns an array of the command-line arguments (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CommDlgExtendedErrorEx() Returns a common dialog box error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyBitmap($hBitmap) Creates a duplicate of a specified bitmap with a device-independent bitmap (DIB) section (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyCursor($hCursor) Creates a duplicate of a specified cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyEnhMetaFile($hEmf [, $sFile]) Copies the contents of an enhanced-format metafile to a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyFileEx($sExistingFile, $sNewFile [, $iFlags [, $pProgressProc [, $pData]) Copies an existing file to a new file, notifying the application of its progress through a callback function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyImage($hImage [, $iType [, $xDesired [, $yDesired [, $iFlags]]]]) Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyRect($tRECT) Copies the coordinates of one rectangle to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CopyStruct (ByRef $tStruct [, $sStruct]) Creates a duplicate of a specified structure (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemAlloc($iSize) Allocates a block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemFree($hMemory) Frees a block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoTaskMemRealloc($hMemory, $iSize) Changes the size of a previously allocated block of task memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CoUninitialize() Closes the COM library on the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Create32BitHBITMAP($hIcon [, $fDelete]) Creates a 32 bits-per-pixel device-independent bitmap (DIB) from the specified icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Create32BitHICON($hIcon [, $fDelete]) Converts an icon to 32 bits-per-pixel format and copies to the new icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateBitmapIndirect($tBITMAP) Creates a bitmap with the specified width, height, and color format (color planes and bits-per-pixel) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateBrushIndirect($iStyle, $iRGB, $iHatch) Creates a logical brush that has the specified style, color, and pattern (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateCaret($hWnd, $hBitmap [, $iWidth [, $iHeight]]) Creates a new shape for the system caret and assigns ownership of the caret to the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateSolidBitmapEx($hDC, $iWidth, $iHeight, $iRGB) Creates a bitmap compatible with the device and fills it the specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDesktop($sName [, $iAccess [, $iFlags [, $iHeap [, $tSecurity]]]]) Creates a new desktop, associates it with the current window station of the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIB($iWidth, $iHeight [, $iBitsPerPel]) Creates an uncompressed device-independent bitmap (DIB) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIBitmap($hDC, ByRef $tBITMAPINFO, $iUsage [, $pBits]) Creates a compatible bitmap (DDB) from a DIB and, optionally, sets the bitmap bits (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDIBSection($hDC, ByRef $tBITMAPINFO, $iUsage, ByRef $pBits [, $hSection [, $iOffset]]) Creates a DIB that applications can write to directly (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateDirectoryEx($sNewDir, $sTemplateDir [, $tSecurity]) Creates a new directory with the attributes of a specified template directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateEllipticRgn($tRECT) Creates an elliptical region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateEnhMetaFile([$hDC [, $tRECT [, $fPixels [, $sFile [, $sDescription]]]]]) Creates a device context for an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateFileEx($sFile, $iCreation, $iAccess, $iShare [, $iFlagsAndAttributes [, $tSecurity [, $hTemplate]]]) Creates or opens a file or I/O device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateFileMapping($hFile [, $iSize [, $sName [, $iProtect [, $tSecurity]]]]) Creates or opens a named or unnamed file mapping object for a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateGUID() Creates a globally unique identifier (GUID) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIcon($hInstance, $iWidth, $iHeight, $iPlanes, $iBitsPixel, $pANDBits, $pXORBits) Creates an icon that has the specified size, colors, and bit patterns (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIconFromResourceEx($pData, $iSize [, $fIcon [, $xDesired [, $yDesired [, $iFlags]]]]) Creates an icon or cursor from resource bits describing the icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateIconIndirect($hBitmap, $hMask [, $XHotspot [, $YHotspot [, $fIcon]]]) Creates an icon or cursor that has the specified size, colors, and bit patterns (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateJobObject([$sName [, $tSecurity]) Creates or opens a job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateMRUList($hKey, $sSubKey [, $iMax]]) Creates a new most recently used (MRU) list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateMutex ($sMutex [, $fInitial [, $tSecurity]]) Creates or opens a named or unnamed mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateNullRgn() Creates an empty region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateObjectID($sPath) Creates or retrieves the object identifier for the specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreatePoint($iX, $iY) Creates $tagPOINT structure with the x- and y-coordinates of the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreatePolygonRgn($aPoint [, $iStart [, $iEnd [, $iMode]]]) Creates a polygonal region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRect($iLeft, $iTop, $iRight, $iBottom) Creates $tagRECT structure with the coordinates of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRectEx($iX, $iY, $iWidth, $iHeight) Creates $tagRECT structure with the coordinates of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateRectRgnIndirect($tRECT) Creates a rectangular region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateSemaphore($sSemaphore, $iInitial, $iMaximum [, $tSecurity]) Creates or opens a named or unnamed semaphore object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateStreamOnHGlobal($hGlobal [, $fDeleteOnRelease]) Creates a stream object that uses a memory handle to store the stream contents (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateString($sString, ByRef $tString [, $iLenght [, $fUnicode]]) Copies a specified string to the memory and returns its pointer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateTransform([$nM11 [, $nM12 [, $nM21 [, $nM22 [, $nDX [, $nDY]]]]]]) Ceates $tagXFORM structure specifies a world-space to page-space transformation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_CreateWindowStation([$sName [, $iAccess [, $iFlags [, $tSecurity]]]]) Creates a window station object, associates it with the calling process, and assigns it to the current session (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeferWindowPos($hInfo, $hWnd, $hAfter, $iX, $iY, $iWidth, $iHeight, $iFlags) Updates the specified multiple-window-position structure for the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DefineDosDevice($sDevice, $iFlags [, $sPath]) Defines, redefines, or deletes MS-DOS device names (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DefSubclassProc($hWnd, $iMsg, $wParam, $lParam) Calls the next handler in a window's subclass chain (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteEnhMetaFile($hEmf) Deletes an enhanced-format metafile or an enhanced-format metafile handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteFile($sFile) Deletes an existing file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteObjectID($sPath) Removes the object identifier from a specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeleteVolumeMountPoint($sPath) Deletes a drive letter or mounted folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeregisterShellHookWindow($hWnd) Unregisters a specified Shell window that is registered to receive Shell hook messages (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DestroyCaret() Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DestroyCursor($hCursor) Destroys a cursor and frees any memory the cursor occupied (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DeviceIoControl($hDevice, $iControlCode [, $pInBuffer [, $iInBufferSize [, $pOutBuffer [, $iOutBufferSize]]]]) Sends a control code directly to a specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DisplayStruct (ByRef $tStruct [, $sStruct [, $sTitle [, $iItem [, $iSubItem [, $iFlags [, $fTop [, $hParent]]]]]]]) Displays data from the specified structure or memory address as a list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllGetVersion($sPath) Retrieves a DLL-specific version information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllInstall($sPath) Registers OLE controls such as DLL or ActiveX Controls (OCX) files (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DllUninstall($sPath) Unregisters OLE controls such as DLL or ActiveX Controls (OCX) files (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DPtoLP( $hDC, $tPOINT [, $iCount = 1]) Converts device coordinates into logical coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragAcceptFiles($hWnd [, $fAccept]) Registers whether a window accepts dropped files (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragFinish($hDrop) Releases memory that the system allocated for use in transferring file names to the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragQueryFileEx($hDrop [, $iFlag]) Retrieves the names of dropped files that result from a successful drag-and-drop operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DragQueryPoint($hDrop) Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawAnimatedRects($hWnd, $tRectFrom, $tRectTo) Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawBitmap($hDC, $iX, $iY, $hBitmap [, $iRop]) Draws a bitmap into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawShadowText($hDC, $sText, $rgbText, $rgbShadow [, $iXOffset [, $iYOffset [, $tRECT [, $iFlags]]]]) Draws formatted text in the specified rectangle with a drop shadow (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeBackground($hTheme, $iPartId, $iStateId, $hDC, $tRECT [, $tCLIP]) Draws the border and fill defined by the visual style for the specified control part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeEdge($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $iEdge, $iFlags [, $tAREA]) Draws one or more edges defined by the visual style of a rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeIcon($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $hIL, $iIndex) Draws an image from an image list with the icon effect defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeParentBackground($hWnd, $hDC [, $tRECT]) Draws the part of a parent control that is covered by a partially-transparent or alpha-blended child control (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeText($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags) Draws text using the color and font defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DrawThemeTextEx($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags, $tDTTOPTS) Draws text using the color and font defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DuplicateHandle($hProcess, $hSource, $hTarget [, $iAccess [, $iOptions [, $fInherit]]]) Duplicates an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmEnableBlurBehindWindow($hWnd [, $fEnable [, $fTransition [, $hRgn]]]) Enables the blur effect on a specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmEnableComposition($fEnable) Enables or disables Desktop Window Manager (DWM) composition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmGetColorizationColor() Retrieves the current color used for Desktop Window Manager (DWM) glass composition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmGetWindowAttribute($hWnd, $iAttribute) Retrieves the current value of a specified attribute applied to the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmExtendFrameIntoClientArea($hWnd [, $tMARGINS]) Extends the window frame behind the client area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmInvalidateIconicBitmaps($hWnd) Indicates that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmIsCompositionEnabled() Determines whether Desktop Window Manager (DWM) composition is enabled (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUnregisterThumbnail($hThumbnail) Returns the source size of the Desktop Window Manager (DWM) thumbnail (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmRegisterThumbnail($hDestination, $hSource) Creates a Desktop Window Manager (DWM) thumbnail relationship between the destination and source windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetIconicLivePreviewBitmap($hWnd, $hBitmap [, $fFrame [, $tClient]]) Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetIconicThumbnail($hWnd, $hBitmap [, $fFrame]) Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmSetWindowAttribute($hWnd, $iAttribute, $iData) Sets the value of the specified attributes for non-client rendering to apply to the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUnregisterThumbnail($hThumbnail) Removes a Desktop Window Manager (DWM) thumbnail relationship (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DwmUpdateThumbnailProperties($hThumbnail [, $fVisible [, $fClientAreaOnly [, $iOpacity [, $tRectDest [, $tRectSrc]]]]]) Specifies Desktop Window Manager (DWM) thumbnail properties (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DWordToFloat($iValue) Converts a value of type DWORD to a value of type FLOAT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_DWordToInt($iValue) Converts a value of type DWORD to a value of type INT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EjectMedia($sDrive) Ejects media from a device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Ellipse($hDC, $tRECT) Draws an ellipse (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EmptyWorkingSet([$PID]) Removes as many pages as possible from the working set of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndBufferedPaint($hBP [, $fUpdate]) Completes a buffered paint operation and frees the associated buffered paint handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndDeferWindowPos($hInfo) Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndPaint($hWnd, ByRef $tPAINTSTRUCT) Marks the end of painting in the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndPath($hDC) Closes a path bracket and selects the path defined by the bracket into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EndUpdateResource($hUpdate [, $fDiscard]) Commits or discards changes of the resources within module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumChildProcess([$PID]) Enumerates the child processes that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumChildWindows($hWnd [, $fVisible]) Enumerates the child windows that belong to the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDesktops($hStation) Enumerates all desktops associated with the specified window station of the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDesktopWindows($hDesktop [, $fVisible]) Enumerates all top-level windows associated with the specified desktop (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDeviceDrivers() Retrieves the load address for each device driver in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumDisplaySettings($sDevice, $iMode) Retrieves information about one of the graphics modes for a display device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumMRUList($hMRU, $iItem) Enumerates the contents of the most recently used (MRU) list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumPageFiles() Retrieves information for each installed pagefile in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessModules( [$PID [, $iFlag]]) Retrieves a handle and name for each module in the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessThreads([$PID]) Enumerates the threads that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumProcessWindows([$PID [, $fVisible]]) Enumerates the windows that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceLanguages($sModule, $sType, $sName) Enumerates language-specific resources, of the specified type and name, associated with a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceNames($sModule, $sType) Enumerates resources of a specified type within a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumResourceTypes($sModule) Enumerates resource types within a binary module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumSystemLocales($iFlag) Enumerates the locales that are either installed on or supported by an operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EnumWindowStations() Enumerates all window stations in the current session (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualMemory($pSource1, $pSource2, $iLenght) Compares two blocks of memory to determine whether the specified number of bytes are identical (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualRect($tRECT1, $tRECT2) Determines whether the two specified rectangles are equal (Requires: #Include <WinAPIEx.au3>)
_WinAPI_EqualRgn($hRgn1, $hRgn2) Checks the two specified regions to determine whether they are identical (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExcludeClipRect($hDC, $tRECT) Creates a new clipping region that consists of the existing clipping region minus the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtCreatePen($iPenStyle, $iWidth, $iBrushStyle, $iRGB [, $iHatch [, $aUserStyle [, $iStart [, $iEnd]]]]) Creates a logical cosmetic or geometric pen that has the specified style, width, and brush attributes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtCreateRegion(ByRef $tRGNDATA [, $tXFORM]) Creates a region from the specified region and transformation data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtFloodFill($hDC, $iX, $iY, $iRGB [, $iType]) Fills an area of the display surface with the current brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtractIcon($sIcon, $iIndex [, $fSmall]) Extracts an icon from the specified executable file, DLL, or icon file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ExtSelectClipRgn($hDC, $hRgn [, $iMode]) Combines the specified region with the current clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FatalExit($iCode) Transfers execution control to the debugger (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FileInUse($sFile) Tests whether the specified file in use by another application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillMemory($pDestination, $iLenght [, $iValue]) Fills a cblock of memory with the given value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillPath($hDC) Closes any open figures in the current path and fills the path's interior by using the current brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillRect($hDC, $tRECT, $hBrush) Fills a rectangle by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FillRgn($hDC, $hRgn, $hBrush) Fills a region by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindResource($hInstance, $sType, $sName) Determines the location of a resource with the specified type and name in the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindResourceEx($hInstance, $sType, $sName, $iLanguage) Determines the location of the resource with the specified type, name, and language in the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FindTextDlg($hOwner [, $sFindWhat [, $iFlags [, $pFindProc [, $lParam]]]]) Creates a system-defined modeless Find dialog box to search for text in a document (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlattenPath($hDC) Transforms any curves in the path that is selected into the current DC, turning each curve into a sequence of lines (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FloatToDWord($iValue) Converts a value of type FLOAT to a value of type DWORD (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlushFRBuffer() Destroys the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FlushViewOfFile($pAddress [, $iBytes]) Writes to the disk a byte range within a mapped view of a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FormatDriveDlg($sDrive [, $iOption [, $hParent]]) Opens the Shell's Format dialog (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FrameRect($hDC, $tRECT, $hBrush) Draws a border around the specified rectangle by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FrameRgn($hDC, $hRgn, $hBrush, $iWidth, $iHeight) Draws a border around the specified region by using the specified brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FreeMRUList($hMRU) Frees the handle associated with the most recently used (MRU) list and writes cached data to the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_FreeResource($hData) Decrements (decreases by one) the reference count of a loaded resource (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GdiComment($hDC, $pBuffer, $iSize) Copies a comment from a buffer into a specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetActiveWindow() Retrieves the window handle to the active window attached to the calling process's message queue (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetAllUsersProfileDirectory() Retrieves the path to the root of the directory that contains program data shared by all users (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetApplicationRestartSettings([$PID]) Retrieves the restart information registered for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetArcDirection($hDC) Retrieves the current arc direction for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetAsyncKeyState($vKey) Determines whether a key is up or down at the time the function is called (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBinaryType($sPath) Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBitmapBits($hBitmap, $iSize, $pBits) Copies the bitmap bits of a specified device-dependent bitmap into a buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBitmapDimension($hBitmap) Retrieves a dimension for the specified bitmap (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBkColor($hDC) Retrieves the current background color for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBoundsRect($hDC [, $iFlags]) Obtains the current accumulated bounding rectangle for a specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintBits($hBP) Retrieves a pointer to the buffer bitmap if the buffer is a device-independent bitmap (DIB) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintDC($hBP) Gets the paint device context (DC) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintTargetDC($hBP) Retrieves the target device context (DC) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBufferedPaintTargetRect($hBP) Retrieves the target rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetBValue($iRGB) Retrieves an intensity value for the blue component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCaretBlinkTime() Returns the time required to invert the caret's pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCaretPos() Retrieves the caret's position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCDType($sDrive) Retrieves a type of the media which is loaded into a specified CD-ROM device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClassInfoEx($sClass [, $hInstance]) Retrieves information about a window class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClassLongEx($hWnd, $iIndex) Retrieves the specified value associated with the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipboardSequenceNumber() Retrieves the clipboard sequence number for the current window station (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipBox($hDC, ByRef $tRECT) Retrieves the dimensions of the bounding rectangle of the visible area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipCursor() Retrieves the screen coordinates of the rectangular area to which the cursor is confined (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetClipRgn($hDC) Retrieves a handle identifying the current application-defined clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCompressedFileSize($sFile) Retrieves the actual number of bytes of disk storage used to store a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCompression($sPath) Retrieves the current compression state of a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetConnectedDlg($iDlg [, $iFlags [, $hParent]]) Launches the Get Connected wizard within the calling application to enable network connectivity (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentDirectory() Retrieves the current directory for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentHwProfile() Retrieves information about the current hardware profile for the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentObject($hDC, $iType) Retrieves a handle to an object of the specified type that has been selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentPosition($hDC) Retrieves the current position for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentProcessExplicitAppUserModelID() Retrieves the application-defined, explicit Application User Model ID for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCurrentThemeName() Retrieves the name of the current visual styles, color scheme name, and size name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetCursor() Retrieves a handle to the current cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDateFormat([$LCID [, $tSYSTEMTIME [, $iFlag [, $sFormat]]]]) Formats a date as a date string for a locale specified by the locale identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDCEx($hWnd, $hRgn, $iFlags) Retrieves a handle to a device context (DC) for the client area of a specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDefaultPrinter() Retrieves the printer name of the default printer for the current user on the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDefaultUserProfileDirectory() Retrieves the path to the root of the default user's profile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceDriverBaseName($hDriver) Retrieves the base name of the specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceDriverFileName($hDriver) Retrieves the path available for the specified device driver (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDeviceGammaRamp($hDC, ByRef $aRamp) Gets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDiskFreeSpaceEx($sDrive) Retrieves information about the amount of space that is available on a disk volume (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDllDirectory() Retrieves the application-specific portion of the search path used to locate DLLs for the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveBusType($sDrive) Retrieves a bus type for the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveGeometryEx($iDrive) Retrieves extended information about the disk's geometry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveNumber($sDrive) Retrieves a device type, device number, and partition number for the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetDriveType([$sDrive]) Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFile($sFile) Creates a handle that identifies the enhanced-format metafile stored in the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileBits($hEmf) Retrieves the contents of the specified enhanced-format metafile and copies them into a buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileDescription($hEmf) Retrieves an optional text description from an enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileHeader($hEmf) Retrieves a dimension for the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetEnhMetaFileHeader($hEmf) Retrieves the record containing the header for the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetErrorMessage($iCode [, $iLanguage]) Retrieves a text error message for the specified system error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetErrorMode() Retrieves the error mode for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetExitCodeProcess($hProcess) Retrieves the termination status of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileAttributes($sFile) Retrieves file system attributes for a specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileInformationByHandle($hFile) Retrieves file information for the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileSizeOnDisk($sFile) Retrieves the file allocation size on disk (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileTitle($sFile) Retrieves the name of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileType($hFile) Retrieves the file type of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFileVersionInfo($sFile) Retrieves version information for the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFinalPathNameByHandle($hFile [, $iFlags]) Retrieves the final path for the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFontResourceInfo($sFont [, $fForce]) Retrieves the fontname from the specified font resource file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetForegroundWindow() Returns a handle to the foreground window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFRBuffer() Retrieves the current size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetFullPathName($sFile) Retrieves the full path and file name of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGraphicsMode($hDC) Retrieves the current graphics mode for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGUIThreadInfo($iThreadID) Retrieves information about the active window or a specified GUI thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetGValue($iRGB) Retrieves an intensity value for the green component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetHandleInformation($hObject) Retrieves certain properties of an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetHGlobalFromStream($pStream) Retrieves the global memory handle to a stream (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIconDimension($hIcon) Retrieves a dimension for the specified icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIconInfoEx($hIcon) Retrieves information about the specified icon or cursor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetIdleTime() Retrieves the time that has elapsed since the last input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardLayout($hWnd) Retrieves the active input locale identifier for the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardLayoutList() Retrieves the all input locale identifiers corresponding to the current set of input locales in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardState() Copies the status of the 256 virtual keys to the specified buffer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyboardType($iType) Retrieves information about the current keyboard (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyNameText($lParam) Retrieves a string that represents the name of a key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetKeyState($vKey) Retrieves the status of the specified virtual key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLastActivePopup($hWnd) Determines which pop-up window owned by the specified window was most recently active (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLayeredWindowAttributes($hWnd) Retrieves the opacity and transparency color key of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLocaleInfo($LCID, $iType) Retrieves information about a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetLogicalDrives() Retrieves a bitmask representing the currently available disk drives (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetMapMode($hDC) Retrieves the current mapping mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetMessageExtraInfo() Retrieves the extra message information for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleFileNameEx( $hProcess [, $hModule]) Retrieves the fully-qualified path for the file containing the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleHandleEx($sModule [, $iFlags]) Retrieves a module handle for the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetModuleInformation( $hProcess, $hModule) Retrieves information about the specified module (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetObjectID($sPath) Retrieves the object identifier for the specified file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetObjectType($hObject) Retrieves the type of the specified object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetOutlineTextMetrics($hDC) Retrieves text metrics for TrueType fonts (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetParentProcess([$PID]) Retrieves the PID of the parent process for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPerformanceInfo() Retrieves the performance information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPhysicallyInstalledSystemMemory() Retrieves the amount of RAM that is physically installed on the computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPixel($hDC, $iX, $iY) Retrieves the color value of the pixel at the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPolyFillMode($hDC) Retrieves the current polygon fill mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPosFromRect($tRECT) Interprets the coordinates of the rectangle as offset and position coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcAddress($hModule, $sProc) Retrieves the address of a function from the specified dynamic-link library (DLL) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessCommandLine([$PID]) Retrieves the command-line string for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessFileName([$PID]) Retrieves the fully-qualified path of the executable file for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessHandleCount([$PID]) Retrieves the number of open handles that belong to the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessID($hProcess) Retrieves the process identifier of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessIoCounters([$PID]) Retrieves accounting information for all I/O operations performed by the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessMemoryInfo([$PID]) Retrieves information about the memory usage of the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessName([$PID]) Retrieves the name for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessShutdownParameters() Retrieves the shutdown parameters for the currently calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessTimes([$PID]) Retrieves timing information for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessUser([$PID]) Retrieves the user and domain name for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessWindowStation() Retrieves a handle to the current window station for the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProcessWorkingDirectory([$PID]) Retrieves the the current working directory for the specified process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetProfilesDirectory() Retrieves the path to the root directory where user profiles are stored (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetPwrCapabilities() Retrieves information about the system power capabilities (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRegionData($hRgn, ByRef $tRGNDATA) Fills the specified buffer with data describing a region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRegKeyNameByHandle($hKey) Retrieves a name for the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRgnBox($hRgn, ByRef $tRECT) Retrieves the bounding rectangle of the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetROP2($hDC) Retrieves the foreground mix mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetRValue($iRGB) Retrieves an intensity value for the red component of a 32-bit RGB value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetShellWindow() Retrieves a handle to the Shell's desktop window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetStartupInfo() Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetString($pString [, $fUnicode]) Returns a string located at the specified memory address (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemDefaultLCID() Returns the locale identifier (LCID) for the system locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemDEPPolicy() Gets the data execution prevention (DEP) policy setting for the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemInfo() Retrieves information about the current system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemPowerStatus() Retrieves the power status of the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemTimes() Retrieves system timing information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetSystemWow64Directory() Retrieves the path of the system directory used by WOW64 (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTempFileName($sPath [, $sPrefix]) Creates a name for a temporary file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextAlign($hDC) Retrieves the text-alignment setting for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextCharacterExtra($hDC) Retrieves the current intercharacter spacing for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextColor($hDC) Retrieves the current text color for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextFace($hDC) Retrieves the typeface name of the font that is selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTextMetrics($hDC) Retrieves basic information for the currently selected font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeAppProperties() Retrieves the property flags that control how visual styles are applied in the current application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundContentRect($hTheme, $iPartId, $iStateId, $hDC, $tRECT) Retrieves the size of the content area for the background defined by the visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundExtent($hTheme, $iPartId, $iStateId, $hDC, $tRECT) Calculates the size and location of the background, defined by the visual style, given the content area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBackgroundRegion($hTheme, $iPartId, $iStateId, $hDC, $tRECT) Computes the region for a regular or partially transparent background that is bounded by a specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBitmap($hTheme, $iPartId, $iStateId, $iPropId [, $iFlag]) Retrieves the bitmap associated with a particular theme, part, state, and property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeBool($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a BOOL property from the SysMetrics section of theme data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeColor($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a color property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeDocumentationProperty($sFile, $sProperty) Retrieves the value for a theme property from the documentation section of the specified theme file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeEnumValue($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of an enumerated type property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeFilename($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a filename property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeFont($hTheme, $iPartId, $iStateId, $iPropId [, $hDC]) Retrieves the value of a font property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeInt($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of an INT property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeMargins($hTheme, $iPartId, $iStateId, $iPropId, $hDC, $tRECT) Retrieves the value of a margins property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeMetric($hTheme, $iPartId, $iStateId, $iPropId [, $hDC]) Retrieves the value of a metric property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePartSize($hTheme, $iPartId, $iStateId, $hDC, $tRECT, $iType) Calculates the original size of the part defined by a visual style (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePosition($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a position property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemePropertyOrigin($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the location of the theme property definition for a property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeRect($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a RECT property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeString($hTheme, $iPartId, $iStateId, $iPropId) Retrieves the value of a string property (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysBool($hTheme, $iBoolId) Retrieves the Boolean value of a system metric (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysColor($hTheme, $iColorId) Retrieves the value of a system color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysColorBrush($hTheme, $iColorId) Retrieves a system color brush (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysFont($hTheme, $iFontId) Retrieves the font information of a system font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysInt($hTheme, $iIntId) Retrieves the value of a system INT (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysSize($hTheme, $iSizeId) Retrieves the value of a system size metric from theme data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeSysString($hTheme, $iStringId) Retrieves the value of a system string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTextExtent($hTheme, $iPartId, $iStateId, $hDC, $sText, $tRECT, $iFlags) Calculates the size and location of the specified text when rendered in the visual style font (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTextMetrics($hTheme, $iPartId, $iStateId [, $hDC]) Retrieves information about the font specified by a visual style for a particular part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThemeTransitionDuration($hTheme, $iPartId, $iStateIdFrom, $iStateIdTo, $iPropId) Gets the duration for the specified transition (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThreadDesktop($iThreadID) Retrieves a handle to the desktop assigned to the specified thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetThreadErrorMode() Retrieves the error mode for the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTickCount() Retrieves the number of milliseconds that have elapsed since the system was started (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTickCount64() Retrieves the number of milliseconds that have elapsed since the system was started (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTimeFormat([$LCID [, $tSYSTEMTIME [, $iFlag [, $sFormat]]]]) Formats time as a time string for a locale specified by identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetTopWindow($hWnd) Retrieves a handle to the child window at the top of the Z order (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUDFColorMode() Retrieves the current color mode for WinAPIEx UDF library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUDFVersion() Retrieves the current version of WinAPIEx UDF library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUpdateRect($hWnd [, $fErase]) Retrieves the coordinates of the rectangle that completely encloses the update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUpdateRgn($hWnd, $hRgn [, $fErase]) Retrieves the update region of a window by copying it into the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUserDefaultLCID() Returns the locale identifier (LCID) for the user default locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetUserObjectInformation($hObject, $iIndex) Retrieves information about the specified window station or desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVersion() Retrieves version of the current operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVersionEx() Retrieves information about the current operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetVolumeNameForVolumeMountPoint($sPath) Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowDisplayAffinity($hWnd) Retrieves the current display affinity setting, from any process, for a given window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowExt($hDC) Retrieves the x-extent and y-extent of the window for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowFileName($hWnd) Retrieves the fully-qualified path of the module associated with the specified window handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowInfo($hWnd) Retrieves information about the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowLongEx($hWnd, $iIndex) Retrieves information about the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowOrg($hDC) Retrieves the x-coordinates and y-coordinates of the window origin for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowSubclass($hWnd, $pSubclassProc, $ID) Retrieves the reference data for the specified window subclass callback (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWindowTheme($hWnd) Retrieves a theme handle to a window that has visual styles applied (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWorkArea() Retrieves the size of the working area on the primary display monitor (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GetWorldTransform($hDC) Retrieves the current world-space to page-space transformation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_GradientFill ($hDC, $aVertex [, $iStart [, $iEnd [, $fRotate]]]) Fills rectangle or triangle gradient (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Hex64($iValue [, $iLenght]) Converts an integer value into a string of its hexadecimal representation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HiByte($iValue) Returns the high BYTE of a 16-bit (2 bytes) value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HideCaret($hWnd) Removes the caret from the screen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_HiDWord($iValue) Returns the high DWORD of a 64-bit (8 bytes) value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InflateRect(ByRef $tRECT, $DX, $DY) Increases or decreases the width and height of the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntersectClipRect($hDC, $tRECT) Creates a new clipping region from the intersection of the current clipping region and the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntersectRect($tRECT1, $tRECT2) Creates the intersection of two rectangles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IntToDWord($iValue) Converts a value of type INT to a value of type DWORD (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvalidateRect($hWnd [, $tRECT [, $fErase]]) Adds a rectangle to the specified window's update region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvalidateRgn($hWnd [, $hRgn [, $fErase]]) Adds a region to the specified window's update region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertColor($iColor) Inverts (negative) the specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertRect($hDC, $tRECT) Inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel (Requires: #Include <WinAPIEx.au3>)
_WinAPI_InvertRgn($hDC, $hRgn) Inverts the colors in the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IOCTL($iDeviceType, $iFunction, $iMethod, $iAccess) Create a unique system I/O control code (IOCTL) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadCodePtr($pAddress) Determines whether the calling process has read access to the memory at the specified address (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadReadPtr($pAddress, $iLenght) Verifies that the calling process has read access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadStringPtr($pAddress, $iLenght) Verifies that the calling process has read access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsBadWritePtr($pAddress, $iLenght) Verifies that the calling process has write access to the specified range of memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsChild($hWnd, $hWndParent) Tests whether a window is a child window of a specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsDoorOpen($sDrive) Checks if a CD (DVD) tray is open (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsHungAppWindow($hWnd) Determines whether the specified application is not responding (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsIconic($hWnd) Determines whether the specified window is minimized (iconic) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsInternetConnected() Determines whether the current user is connected to the Internet (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsLoadKBLayout($iLanguage) Determines whether the specified input locale loaded into the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsNetworkAlive() Determines whether or not a local system is connected to a network, and identifies the type of network connection (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsProcessInJob( $hProcess [, $hJob]) Determines whether the process is running in the specified job (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsProcessorFeaturePresent($iFeature) Determines whether the specified processor feature is supported by the current computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsRectEmpty($tRECT) Determines whether the specified rectangle is empty (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemeActive() Tests if a visual style for the current application is active (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemeBackgroundPartiallyTransparent($hTheme, $iPartId, $iStateId) Retrieves whether the background specified by the visual style has transparent pieces or alpha-blended pieces (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsThemePartDefined($hTheme, $iPartId) Retrieves whether a visual style has defined parameters for the specified part (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsValidLocale($LCID [, $iFlag]) Determines if the specified locale is installed or supported on the operating system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWindowEnabled($hWnd) Determines whether the specified window is enabled for mouse and keyboard input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWindowUnicode($hWnd) Determines whether the specified window is a native Unicode window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWow64Process([$PID]) Determines whether the specified process is running under WOW64 (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsWritable($sDrive) Determines whether a disk is writable (Requires: #Include <WinAPIEx.au3>)
_WinAPI_IsZoomed($hWnd) Determines whether a window is maximized (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Keybd_Event($vKey, $iFlags [, $iScanCode [, $iExtraInfo]]) Synthesizes a keystroke (Requires: #Include <WinAPIEx.au3>)
_WinAPI_KillTimer($hWnd, $iTimerID) Destroys the specified timer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LineDDA($X1, $Y1, $X2, $Y2, $pLineProc [, $pData]) Determines which pixels should be highlighted for a line (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadCursor($hInstance, $sName) Loads the specified cursor resource from the executable (.EXE) file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadCursorFromFile($sFile) Creates a cursor based on data contained in a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadIconWithScaleDown($hInstance, $sName, $iWidth, $iHeight) Loads an icon and scales down a larger image instead of scaling up a smaller image (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadIndirectString($sStrIn) Extracts the string from the specified resource when given an indirect string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadKeyboardLayout($iLanguage [, $iFlag]) Loads a new input locale identifier into the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadMedia($sDrive) Loads media into a device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoadResource($hInstance, $hResource) Loads the specified resource into global memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoByte($iValue) Returns the low BYTE of a 16-bit (2 bytes) value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockDevice($sDrive, $fLock) Enables or disables the mechanism that ejects media, for those devices possessing that locking capability (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockFile($hFile, $iOffset, $iLenght) Locks the specified file for exclusive access by the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockResource($hData) Locks the specified resource in memory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockWindowUpdate($hWnd) Disables or enables drawing in the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LockWorkStation() Locks the workstation's display (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LoDWord($iValue) Returns the low DWORD of a 64-bit (8 bytes) value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LongMid($iValue, $iStart, $iCount) Extracts a number of bits from a DWORD (32-bit) value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LookupIconIdFromDirectoryEx($pData [, $fIcon [, $xDesired [, $yDesired [, $iFlags]]]]) Searches through icon or cursor data for the icon or cursor that best fits the current display device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LPtoDP( $hDC, $tPOINT [, $iCount = 1]) Converts a logical coordinates into device coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LZNTCompress(ByRef $tInput, ByRef $tOutput [, $fMaximum]) Compresses an input data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_LZNTDecompress(ByRef $tInput, ByRef $tOutput [, $iBufferSize]) Decompresses an input data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MapViewOfFile($hMapping [, $iOffset [, $iBytes [, $iAccess]]]) Maps a view of a file mapping into the address space of a calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MapVirtualKey($iCode, $iType) Translates a virtual-key code into a scan code or character value, or translates a scan code into a virtual-key code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MaskBlt($hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $hMask, $iXMask, $iYMask, $iRop) Combines the color data for the source and destination bitmaps using the specified mask and raster operation (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MessageBoxCheck($iType, $sTitle, $sText, $sRegVal [, $iDefault [, $hParent]]) Displays a message box that gives the user the option of suppressing further occurrences (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MessageBoxIndirect($tMSGBOXPARAMS) Creates, displays, and operates a message box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ModifyWorldTransform($hDC, $tXFORM, $iMode) Changes the world transformation for a device context using the specified mode (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveFileEx($sExistingFile, $sNewFile [, $iFlags [, $pProgressProc [, $pData]) Moves a file or directory, notifying the application of its progress through a callback function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveMemory($pDestination, $pSource, $iLenght) Moves a block of memory from one location to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_MoveToEx($hDC, $iX, $iY) Updates the current position to the specified point (Requires: #Include <WinAPIEx.au3>)
_WinAPI_NtStatusToDosError($iStatus) Converts the specified NTSTATUS code to its equivalent system error code (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OemToChar($sStr) Converts a string from the OEM-defined character set into either an ANSI string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetPoints(ByRef $aPoint, $iXOffset, $iYOffset [, $iStart [, $iEnd]]) Moves a points from the array by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetClipRgn($hDC, $iXOffset, $iYOffset) Moves the clipping region of a device context by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetRect(ByRef $tRECT, $DX, $DY) Moves the specified rectangle by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetRgn($hRgn, $iXOffset, $iYOffset) Moves a region by the specified offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OffsetWindowOrg($hDC, $iXOffset, $iYOffset) Modifies the window origin for a device context using the specified horizontal and vertical offsets (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenDesktop($sName [, $iAccess [, $iFlags [, $fInherit]]]) Opens the specified desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenFileById($hFile, $tGUID, $iAccess, $iShare [, $iFlags]) Opens the file that matches the specified object identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenFileMapping($sName [, $iAccess [, $fInherit]]) Opens a named file mapping object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenIcon($hWnd) Restores a minimized (iconic) window to its previous size and position and activates the window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenInputDesktop([$iAccess [, $iFlags [, $fInherit]]]) Opens the desktop that receives user input (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenJobObject($sName [, $iAccess [, $fInherit]) Opens an existing job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenMutex($sMutex [, $iAccess [, $fInherit]]) Opens an existing named mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenProcessToken($iAccess [, $hProcess]) Opens the access token associated with a process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenSemaphore($sSemaphore [, $iAccess [, $fInherit]]) Opens an existing named semaphore object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenThemeData($hWnd, $sClass) Opens the theme data for a window and its associated class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_OpenWindowStation($sName [, $iAccess [, $fInherit]]) Opens the specified window station (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PageSetupDlg(ByRef $tPAGESETUPDLG) Creates a Page Setup dialog box that enables the user to specify the attributes of a printed page (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PaintDesktop($hDC) Fills the clipping region in the specified device context with the desktop pattern or wallpaper (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PaintRgn($hDC, $hRgn) Paints the specified region by using the brush currently selected into the device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PatBlt($hDC, $iX, $iY, $iWidth, $iHeight, $iRop) Paints the specified rectangle using the brush that is currently selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCompactPath($hWnd, $sPath [, $iWidth]) Truncates a file path to fit within a given pixel width by replacing path components with ellipses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathCompactPathEx($sPath, $iMax) Truncates a path to fit within a certain number of characters by replacing path components with ellipses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindExtension($sPath) Searches a path for an extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindFileName($sPath) Searches a path for a file name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindNextComponent($sPath) Parses a path and returns the portion of that path that follows the first backslash (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathFindOnPath($sFile [, $aDirs [, $iStart [, $iEnd]]]) Searches for a file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetArgs($sPath) Finds the command-line arguments within a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetCharType($sChar) Determines the type of character in relation to a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathGetDriveNumber($sPath) Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsContentType($sPath, $sType) Determines if a file's registered content type matches the specified content type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsDirectory($sPath) Verifies that a path is a valid directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsDirectoryEmpty($sPath) Determines whether a specified path is an empty directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsExe($sPath) Determines whether a file is an executable by examining the file extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsFileSpec($sPath) Searches a path for any path-delimiting characters (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsLFNFileSpec($sPath) Determines whether a file name is in long format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsRelative($sPath) Searches a path and determines if it is relative (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsRoot($sPath) Parses a path to determine if it is a directory root (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsSameRoot($sPath1, $sPath2) Compares two paths to determine if they have a common root component (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathIsSystemFolder($sPath) Determines if an existing folder contains the attributes that make it a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathMakeSystemFolder($sPath) Gives an existing folder the proper attributes to become a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathMatchSpec($sPath, $sSpec) Searches a string using a Microsoft MS-DOS wild card match type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathParseIconLocation($sPath) Parses a file location string that contains a file location and icon index (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRelativePathTo($sPathFrom, $fDirFrom, $sPathTo, $fDirTo) Creates a relative path from one file or folder to another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveArgs($sPath) Removes any arguments from a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveBackslash($sPath) Removes the trailing backslash from a given path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveExtension($sPath) Removes the file name extension from a path, if one is present (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRemoveFileSpec($sPath) Removes the trailing file name and backslash from a path, if they are present (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathRenameExtension($sPath, $sExt) Replaces the extension of a file name with a new extension (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathSearchAndQualify($sPath [, $fExists]) Formats a path to the fully qualified path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathSkipRoot($sPath) Parses a path, ignoring the drive letter or Universal Naming Convention (UNC) server/share path elements (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathStripPath($sPath) Removes the path portion of a fully qualified path and file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathStripToRoot($sPath) Removes all parts of the path except for the root information (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathToRegion($hDC) Creates a region from the path that is selected into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUndecorate($sPath) Removes the decoration from a path string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnExpandEnvStrings($sPath) Replaces folder names in a fully-qualified path with their associated environment string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnmakeSystemFolder($sPath) Removes the attributes from a folder that make it a system folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathUnquoteSpaces($sPath) Removes quotes from the beginning and end of a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PathYetAnotherMakeUniqueName($sPath) Creates a unique filename based on an existing filename (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PickIconDlg([$sIcon [, $iIndex [, $hParent]]]) Displays a dialog box that allows the user to choose an icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PlayEnhMetaFile( $hDC, $hEmf, $tRECT) Displays the picture stored in the specified enhanced-format metafile (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PlaySound($sSound [, $iFlags [, $hInstance]]) Plays a sound specified by the given file name, resource, or system event (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyBezier($hDC, $aPoint [, $iStart [, $iEnd]]) Draws one or more Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyBezierTo($hDC, $aPoint [, $iStart [, $iEnd]]) Draws one or more Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PolyDraw($hDC, $aPoint [, $iStart [, $iEnd]]) Draws a set of line segments and Bezier curves (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Polygon($hDC,  $aPoint [, $iStart [, $iEnd]]) Draws a polygon consisting of two or more vertices connected by straight lines (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintDlg(ByRef $tPRINTDLG) Displays a Print dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintDlgEx(ByRef $tPRINTDLGEX) Displays a Print property sheet that enables the user to specify the properties of a particular print job (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PrintWindow($hWnd, $hDC [, $fClient]) Copies a visual window into the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtInRectEx($iX, $iY, $iLeft, $iTop, $iRight, $iBottom) Determines whether the specified point lies within the specified rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtInRegion($hRgn, $iX, $iY) Determines whether the specified point is inside the specified region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_PtVisible($hDC, $iX, $iY) Determines whether the specified point is within the clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryDosDevice($sDevice) Retrieves the current mapping for a particular MS-DOS device name (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryInformationJobObject($hJob, $iJobObjectInfoClass, ByRef $tJobObjectInfo) Retrieves limit and job state information from the job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryPerformanceCounter() Retrieves the current value of the high-resolution performance counter (Requires: #Include <WinAPIEx.au3>)
_WinAPI_QueryPerformanceFrequency() Retrieves the frequency of the high-resolution performance counter (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RadialGradientFill($hDC, $iX, $iY, $iRadius, $iRGB1, $iRGB2 [, $iAngleStart [, $iAngleEnd [, $iStep]]]) Fills radial gradient (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Rectangle($hDC, $tRECT) Draws a rectangle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RectInRegion($hRgn, $tRECT) Determines whether any part of the specified rectangle is within the boundaries of a region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RectVisible($hDC, $tRECT) Determines whether any part of the specified rectangle lies within the clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCloseKey($hKey [, $fFlush]) Closes a handle to the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegConnectRegistry($sComputer, $hKey) Establishes a connection to a predefined registry key on another computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCopyTree($hSrcKey, $sSrcSubKey, $hDestKey) Recursively copies the subkeys and values of the source subkey to the destination key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCopyTreeEx($hSrcKey, $sSrcSubKey, $hDestKey) Copies the specified registry key, along with its values and subkeys, to the specified destination key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegCreateKey($hKey [, $sSubKey [, $iAccess [, $iOptions [, $tSecurity]]]]) Creates the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteEmptyKey($hKey [, $sSubKey]) Deletes an empty key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteKey($hKey [, $sSubKey]) Deletes a subkey and its values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteKeyValue($hKey, $sSubKey, $sValueName) Removes the specified value from the specified registry key and subkey (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteTree($hKey [, $sSubKey]) Deletes a subkey and all its descendants (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteTreeEx($hKey [, $sSubKey]) Deletes the subkeys and values of the specified key recursively (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDeleteValue($hKey, $sValueName) Removes a named value from the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDisableReflectionKey($hKey) Disables registry reflection for the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegDuplicateHKey($hKey) Duplicates a registry key's handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnableReflectionKey($hKey) Restores registry reflection for the specified disabled key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnumKey($hKey, $iIndex) Enumerates the subkeys of the specified open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegEnumValue($hKey, $iIndex) Enumerates the values for the specified open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegFlushKey($hKey) Writes all the attributes of the specified open registry key into the registry (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterApplicationRestart([$iFlags [, $sCmd]]) Registers the active instance of an application for restart (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterClassEx($tWNDCLASSEX) Registers a window class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterHotKey($hWnd, $ID, $iModifiers, $vKey) Defines a system-wide hot key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterPowerSettingNotification($hWnd, $GUID) Registers the application to receive power setting notifications for the specific power setting event (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegisterShellHookWindow($hWnd) Registers a specified Shell window to receive certain messages for events or notifications (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegLoadMUIString($hKey, $sValueName [, $sDirectory]) Loads the specified string from the specified key and subkey (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegNotifyChangeKeyValue($hKey, $iFilter [, $fSubtree [, $fAsync [, $hEvent]]]) Notifies the caller about changes to the attributes or contents of a specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegOpenKey($hKey [, $sSubKey [, $iAccess]]) Opens the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryInfoKey($hKey) Retrieves information about the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryLastWriteTime($hKey) Retrieves information about the last write time to the specified registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryMultipleValues($hKey, ByRef $aValent, ByRef $tData [, $iStart [, $iEnd]]) Retrieves the type and data for a list of value names associated with an open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryReflectionKey($hKey) Determines whether reflection has been disabled or enabled for the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegQueryValue($hKey, $sValueName, ByRef $tValueData, $iBytes) Retrieves the type and data for the specified value name associated with an open registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegRestoreKey($hKey, $sFile) Reads the registry information in a specified file and copies it over the specified key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegSaveKey($hKey, $sFile [, $tSecurity]) Saves the specified key and all of its subkeys and values to a new file, in the standard format (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RegSetValue ($hKey, $sValueName, $iType, ByRef $tValueData, $iBytes) Sets the data and type of a specified value under a registry key (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReleaseMutex($hMutex) Releases ownership of the specified mutex object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReleaseSemaphore($hSemaphore [, $iIncrease]) Increases the count of the specified semaphore object by a specified amount (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveClipboardFormatListener($hWnd) Removes the given window from the system-maintained clipboard format listener list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveFontMemResourceEx($hFont) Removes the fonts added from a memory image (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveFontResourceEx($sFont [, $iFlag [, $fNotify]]) Removes the fonts in the specified file from the system font table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RemoveWindowSubclass($hWnd, $pSubclassProc, $ID) Removes a subclass callback from a window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReOpenFile($hFile, $iAccess, $iShare [, $iFlags]) Reopens the specified file system object with different access rights, sharing mode, and flags (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReplaceFile($sReplacedFile, $sReplacementFile [, $sBackupFile [, $iFlags]]) Replaces one file with another file, and creates a backup copy of the original file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ReplaceTextDlg($hOwner [, $sFindWhat [, $sReplaceWith [, $iFlags [, $pFindProc [, $lParam]]]]]) Creates a system-defined modeless dialog box that lets the user specify a string to search for and a replacement string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ResetEvent($hEvent) Sets the specified event object to the nonsignaled state (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ResizeBitmap($hBitmap, $iWidth, $iHeight [, $iMode]) Changes the size of a bitmap to the specified dimensions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RestartDlg([$sText [, $iFlags [, $hParent]]]) Displays a dialog box that prompts the user to restart Microsoft Windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RestoreDC($hDC, $ID) Restores a device context (DC) to the specified state (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RGB($iRed, $iGreen, $iBlue) Creates a RGB color value based on red, green, and blue components (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RotatePoints(ByRef $aPoint, $iXC, $iYC, $iAngle [, $iStart [, $iEnd]]) Rotates a points from the array by the specified angle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_RoundRect($hDC, $tRECT, $iWidth, $iHeight) Draws a rectangle with rounded corners (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SaveDC($hDC) Saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes to a context stack (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SaveHICONToFile($sFile, $aIcon [, $iStart [, $iEnd]]) Saves a 32 bits-per-pixel single or multiple icon (HICON) to the specified icon (.ico) file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ScaleWindowExt($hDC, $iXNum, $iXDenom, $iYNum, $iYDenom) Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SelectClipPath($hDC [, $iMode]) Selects the current path as a clipping region, combining the new region with any existing clipping region (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SelectClipRgn($hDC, $hRgn) Selects a region as the current clipping region for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SendMessageTimeout($hWnd, $iMsg [, $wParam [, $lParam [, $iTimeout [, $iFlags]]]]) Sends the specified message to one of more windows (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetActiveWindow($hWnd) Activates the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetArcDirection($hDC, $iDirection) Sets the drawing arc direction (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetBitmapBits($hBitmap, $iSize, $pBits) Sets the bits of color data for a bitmap to the specified values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetBoundsRect($hDC, $iFlags [, $tRECT]) Controls the accumulation of bounding rectangle information for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetClassLongEx($hWnd, $iIndex, $iNewLong) Replaces the specified value into the specified window belongs (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCompression($sPath, $iCompression) Sets the compression state of a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCaretBlinkTime($iDuration) Sets the caret blink time (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCaretPos($iX, $iY) Moves the caret to the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCurrentDirectory($sDir) Changes the current directory for the current process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetCurrentProcessExplicitAppUserModelID($sAppID) Specifies a unique application-defined Application User Model ID that identifies the current process to the taskbar (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDCBrushColor($hDC, $iRGB) Sets the current device context (DC) brush color to the specified color value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDCPenColor($hDC, $iRGB) Sets the current device context (DC) pen color to the specified color value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDefaultPrinter($sPrinter) Sets the printer name of the default printer for the current user on the local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDeviceGammaRamp($hDC, ByRef $aRamp) Sets the gamma ramp on direct color display boards that support downloadable gamma ramps in hardware (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDIBitsToDevice($hDC, $iXDest, $iYDest, $iWidth, $iHeight, $iXSrc, $iYSrc, $iStartScan, $iScanLines, ByRef $tBITMAPINFO, $iUsage, $pBits) Sets the pixels in the specified rectangle on the device (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetDllDirectory($sPath) Adds a directory to the search path used to locate DLLs for the application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetEnhMetaFileBits(ByRef $tBits) Creates a memory-based enhanced-format metafile from the specified data (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetErrorMode($iMode) Controls whether the system will handle the specified types of serious errors or whether the process will handle them (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFileAttributes($sFile, $iAttributes) Sets the attributes for a file or directory (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFilePointerEx($hFile, $iPos [, $iMethod]) Moves the file pointer of the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetForegroundWindow($hWnd) Puts the specified window into the foreground and activates its (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetFRBuffer($iChars) Sets the size of the internal buffer that used the _WinAPI_FindTextDlg() and _WinAPI_ReplaceTextDlg() functions (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetGraphicsMode($hDC, $iMode) Sets the graphics mode for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetHandleInformation($hObject, $iMask, $iFlags) Sets certain properties of an object handle (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetInformationJobObject($hJob, $iJobObjectInfoClass, $tJobObjectInfo) Sets limits for a job object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetKeyboardLayout($hWnd, $iLanguage [, $iFlags]) Sets an input locale identifier to the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetKeyboardState($tState) Copies a 256-byte array of keyboard key states into the calling process's keyboard input-state table (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetLayeredWindowAttributes($hWnd, $iRGB, $iAlpha, $iFlags) Sets the opacity and transparency color key of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetLocaleInfo($LCID, $iType, $sData) Sets an item of information in the user override portion of the current locale (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetMapMode($hDC, $iMode) Sets the mapping mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetMessageExtraInfo($lParam) Sets the extra message information for the current thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetParent($hWndChild, $hWndParent) Changes the parent window of the specified child window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetPixel($hDC, $iX, $iY, $iRGB) Sets the pixel at the specified coordinates to the specified color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetPolyFillMode($hDC [, $iMode]) Sets the polygon fill mode for functions that fill polygons (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetProcessShutdownParameters($iLevel [, $fDialog]) Sets a shutdown order for a process relative to the other processes in the system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetProcessWindowStation($hStation) Assigns the specified window station to the calling process (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetRectRgn($hRgn, $tRECT) Converts a region into a rectangular region with the specified coordinates (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetROP2($hDC, $iMode) Retrieves the foreground mix mode of the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetStretchBltMode($hDC, $iMode) Sets the bitmap stretching mode in the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetSystemCursor($hCursor, $ID [, $fCopy]) Enables an application to customize the system cursors (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextAlign ($hDC [, $iMode]) Sets the text-alignment flags for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextCharacterExtra($hDC, $iCharExtra) Sets the intercharacter spacing for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTextJustification($hDC, $iBreakExtra, $iBreakCount) Specifies the amount of space the system should add to the break characters in a string of text (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThemeAppProperties($iFlags) Sets the flags that determine how visual styles are implemented in the calling application (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadDesktop($hDesktop) Assigns the specified desktop to the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadErrorMode($iMode) Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetThreadExecutionState($iFlags) Prevents the system from entering sleep or turning off the display while the current application is running (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetTimer($hWnd, $iTimerID, $iElapse, $pTimerFunc) Creates a timer with the specified time-out value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetUDFColorMode($iMode) Sets the color mode for the WinAPIEx library (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetUserObjectInformation($hObject, $iIndex, $tData) Sets information about the specified window station or desktop object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetVolumeMountPoint($sPath, $GUID) Associates a volume with a drive letter or a directory on another volume (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowDisplayAffinity($hWnd, $iAffinity) Stores the display affinity setting in kernel mode on the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowExt($hDC, $iXExtent, $iYExtent) Sets the horizontal and vertical extents of the window for a device context by using the specified values (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowLongEx($hWnd, $iIndex, $iNewLong) Changes an attribute of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowOrg($hDC, $iX, $iY) Specifies which window point maps to the viewport origin (0,0) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowSubclass($hWnd, $pSubclassProc, $ID [, $pData]) Installs or updates a window subclass callback (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWindowTheme($hWnd [, $sName [, $sList]]) Causes a window to use a different set of visual style information than its class normally uses (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWinEventHook( $iEventMin, $iEventMax, $pWinEventProc [, $iProcessID [, $iThreadID [, $iFlags]]]) Sets an event hook function for a range of events (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SetWorldTransform($hDC, $tXFORM) Sets a two-dimensional linear transformation between world space and page space for the specified device context (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SfcIsFileProtected($sFile) Determines whether the specified file is protected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SfcIsKeyProtected($hKey [, $sSubKey [, $iFlag]]) Determines whether the specified registry key is protected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellAddToRecentDocs($sFile) Adds a file to the most recently and frequently item list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotify($iEvent, $iFlags [, $iItem1 [, $iItem2]]) Notifies the system of an event that an application has performed (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotifyDeregister($ID) Unregisters the client's window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellChangeNotifyRegister($hWnd, $iMsg, $iEvents, $iSources, $aPaths [, $fRecursive]) Registers a window to receive notifications from the file system or Shell (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellEmptyRecycleBin($sRoot [, $iFlags [, $hParent]]) Empties the Recycle Bin on the specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExecute($sFile [, $sArgs [, $sDir [, $sVerb [, $iShow [, $hParent]]]]]) Performs an operation on a specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExtractAssociatedIcon($sFile [, $fSmall]) Returns a handle to the icon that associated with the specified file's (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellExtractIcon($sIcon, $iIndex, $iWidth, $iHeight) Extracts the icon with the specified dimension from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellFileOperation($sFrom, $sTo, $iFunc, $iFlags [, $sTitle [, $hParent]]) Copies, moves, renames, or deletes a file system object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetFileInfo($sPath, $iFlags, $iAttributes, ByRef $tSHFILEINFO) Retrieves information about an object in the file system (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetKnownFolderPath($GUID [, $iFlags [, $hToken]]) Retrieves the full path of a known folder identified (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetLocalizedName($sPath) Retrieves the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetPathFromIDList($PIDL) Converts an item identifier list to a file system path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSetFolderCustomSettings($sPath, $iFlag, ByRef $tSHFCS) Sets or retrieves custom folder settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSettings($iFlags) Retrieves Shell state settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSpecialFolderLocation($CSIDL) Retrieves a PIDL structure of a special folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetSpecialFolderPath($CSIDL [, $fCreate]) Retrieves the path of a special folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellGetStockIconInfo($SIID, $iFlags) Retrieves information about system-defined Shell icons (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellILCreateFromPath($sPath) Creates a pointer to an item identifier list (PIDL) from a path (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellNotifyIcon($iMessage, $tNOTIFYICONDATA) Sends a message to the taskbar's status area (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellNotifyIconGetRect($hWnd, $ID [, $tGUID]) Gets the screen coordinates of the bounding rectangle of a notification icon (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellObjectProperties($sPath [, $iType [, $sProperty [, $hParent]]]) Invokes the Properties context menu command on a Shell object (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellOpenFolderAndSelectItems($sPath [, $aNames [, $iStart [, $iEnd [, $iFlags]]]]) Opens a Windows Explorer window with specified items in a particular folder selected (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellOpenWithDlg($sFile [, $iFlags [, $hParent]]) Displays the Open With dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellQueryRecycleBin($sRoot) Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellQueryUserNotificationState() Checks the state of the computer for the current user (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellRemoveLocalizedName($sPath) Removes the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellRestricted($iRestriction) Determines whether a specified administrator policy is in effect (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellSetLocalizedName($sPath, $sModule, $iResID) Sets the localized name of a file in a Shell folder (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellSetSettings($iFlags, $fSet) Sets Shell state settings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShellStartNetConnectionDlg([$sRemote [, $iFlags [, $hParent]]]) Displays a general browsing dialog box for a network resource connection (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowCaret($hWnd) Makes the caret visible on the screen at the caret's current position (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowLastError([$sText [, $fAbort [, $iLanguage]]]) Shows the last error code and message (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShowOwnedPopups($hWnd , $fShow) Shows or hides all pop-up windows owned by the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonCreate($hWnd, $sText) Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonDestroy($hWnd) Indicates that the system can be shut down and frees the reason string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownBlockReasonQuery($hWnd) Retrieves the reason string set by the _WinAPI_ShutdownBlockReasonCreate() function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ShutdownDlg() Displays a Windows Shutdown dialog box (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SizeOfResource($hInstance, $hResource) Returns the size, in bytes, of the specified resource (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StretchBlt($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRop) Copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StretchDIBits($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, ByRef $tBITMAPINFO, $iUsage, $pBits, $iRop) Copies the color data for a rectangle of pixels in a DIB, JPEG, or PNG image to the specified destination rectangle, stretching or compressing the rows and columns by using the specified raster operation, if necessary (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFormatByteSize($iSize) Converts a numeric value into a string that represents the number expressed as a size value in bytes, kilobytes, megabytes, or gigabytes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFormatKBSize($iSize) Converts a numeric value into a string that represents the number expressed as a size value in kilobytes (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrFromTimeInterval($iTime [, $iDigits]) Converts a time interval to a string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrLen($pString [, $fUnicode]) Returns the length of the specified string (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrokeAndFillPath($hDC) Closes any open figures in a path, strokes the outline of the path, and fills its interior (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StrokePath($hDC) Renders the specified path by using the current pen (Requires: #Include <WinAPIEx.au3>)
_WinAPI_StructToArray(ByRef $tStruct [, $iItems]) Converts the structure to the array of strings (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SubtractRect($tRECT1, $tRECT2) Determines the coordinates of a rectangle formed by subtracting one rectangle from another (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwapDWord($iValue) Swaps high-order and low-order bits of the 32-bit value (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchColor($iColor) Converts a color from BGR to RGB and vice versa (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchDesktop($hDesktop) Makes the specified desktop visible and activates it (Requires: #Include <WinAPIEx.au3>)
_WinAPI_SwitchToThisWindow($hWnd [, $fAltTab]) Switches the focus to a specified window and bring it to the foreground (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TextOut($hDC, $iX, $iY, $sText) Writes a string at the specified location, using the currently selected font, background color, and text color (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TileWindows($aWnds [, $tRECT [, $hParent [, $iFlags [, $iStart [, $iEnd]]]]]) Tiles the specified child windows of the specified parent window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TransparentBlt($hDestDC, $iXDest, $iYDest, $iWidthDest, $iHeightDest, $hSrcDC, $iXSrc, $iYSrc, $iWidthSrc, $iHeightSrc, $iRGB) Performs a bit-block transfer of the color data corresponding to a rectangle of pixels (Requires: #Include <WinAPIEx.au3>)
_WinAPI_TrackMouseEvent($hWnd, $iFlags [, $iTime]) Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnhookWinEvent($hEventHook) Removes an event hook function (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnionRect($tRECT1, $tRECT2) Creates the union of two rectangles (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnionStruct(ByRef $tStruct1, ByRef $tStruct2 [, $sStruct]) Creates the structure of two structures (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UniqueHardwareID([$iFlags]) Generates a unique hardware identifier (ID) for local computer (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnloadKeyboardLayout($hLocale) Unloads an input locale identifier (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnlockFile($hFile, $iOffset, $iLenght) Unlocks a region in an open file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnmapViewOfFile($pAddress) Unmaps a mapped view of a file from the calling process's address space (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterApplicationRestart() Removes the active instance of an application from the restart list (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterClass($sClass [, $hInstance]) Unregisters a window class, freeing the memory required for the class (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterHotKey($hWnd, $ID) Frees a hot key previously registered by the calling thread (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UnregisterPowerSettingNotification($hNotify) Unregisters the power setting notification (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UpdateLayeredWindowEx($hWnd, $hBitmap, $iX, $iY [, $iOpacity [, $fDelete]]) Updates a bitmap translucency of a layered window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UpdateResource($hUpdate, $sType, $sName, $iLanguage, $pData, $iSize) Adds, deletes, or replaces a resource in a portable executable (PE) file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlCreateFromPath($sPath) Converts a Microsoft MS-DOS path to a canonicalized URL (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlEscape($sUrl [, $iFlags]) Converts characters in a URL that might be altered during transport across the Internet into their corresponding escape sequences (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlGetPart($sUrl, $iPart) Retrieves a specified part from the URL (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlFixup($sUrl) Attempts to correct a URL whose protocol identifier is incorrect (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlIs($sUrl [, $iType]) Tests whether or not a URL is a specified type (Requires: #Include <WinAPIEx.au3>)
_WinAPI_UrlUnescape($sUrl [, $iFlags]) Converts escape sequences back into ordinary characters (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ValidateRect($hWnd [, $tRECT]) Removes a rectangle from the current update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_ValidateRect($hWnd [, $hRgn]) Removes a region from the current update region of the specified window (Requires: #Include <WinAPIEx.au3>)
_WinAPI_VerQueryRoot($sFile) Retrieves fixed (code page independent) version information from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_VerQueryValue($sFile [, $sValues]) Retrieves specified version information from the specified file (Requires: #Include <WinAPIEx.au3>)
_WinAPI_WidenPath($hDC) Redefines the current path as the area that would be painted if the path were stroked (Requires: #Include <WinAPIEx.au3>)
_WinAPI_WindowFromDC($hDC) Retrieves a handle to the window associated with the specified display device context (DC) (Requires: #Include <WinAPIEx.au3>)
_WinAPI_Wow64EnableWow64FsRedirection($fEnable) Enables or disables file system redirection for the calling thread (Requires: #Include <WinAPIEx.au3>)

And?4
ByRef?4
Case?4
Const?4
ContinueCase?4
ContinueLoop?4
Default?4
Dim?4
Do?4
Else?4
ElseIf?4
EndFunc?4
EndIf?4
EndSelect?4
EndSwitch?4
EndWith?4
Enum?4
Exit?4
ExitLoop?4
False?4
For?4
Func?4
Global?4
If?4
In?4
Local?4
Next?4
Not?4
Null?4
Or?4
ReDim?4
Return?4
Select?4
Static?4
Step?4
Switch?4
Then?4
To?4
True?4
Until?4
WEnd?4
While?4
With?4
#ce?2
#comments-end?2
#comments-start?2
#cs?2
#include?2
#include-once?2
#NoAutoIt3Execute?2
#NoTrayIcon?2
#OnAutoItStartRegister?2
#RequireAdmin?2
#endregion?1
#forcedef?1
#forceref?1
#region?1
@AppDataCommonDir?3
@AppDataDir?3
@AutoItExe?3
@AutoItPID?3
@AutoItVersion?3
@AutoItX64?3
@COM_EventObj?3
@CommonFilesDir?3
@Compiled?3
@ComputerName?3
@ComSpec?3
@CPUArch?3
@CR?3
@CRLF?3
@DesktopCommonDir?3
@DesktopDepth?3
@DesktopDir?3
@DesktopHeight?3
@DesktopRefresh?3
@DesktopWidth?3
@DocumentsCommonDir?3
@error?3
@exitCode?3
@exitMethod?3
@extended?3
@FavoritesCommonDir?3
@FavoritesDir?3
@GUI_CtrlHandle?3
@GUI_CtrlId?3
@GUI_DragFile?3
@GUI_DragId?3
@GUI_DropId?3
@GUI_WinHandle?3
@HomeDrive?3
@HomePath?3
@HomeShare?3
@HotKeyPressed?3
@HOUR?3
@IPAddress1?3
@IPAddress2?3
@IPAddress3?3
@IPAddress4?3
@KBLayout?3
@LF?3
@LogonDNSDomain?3
@LogonDomain?3
@LogonServer?3
@MDAY?3
@MIN?3
@MON?3
@MSEC?3
@MUILang?3
@MyDocumentsDir?3
@NumParams?3
@OSArch?3
@OSBuild?3
@OSLang?3
@OSServicePack?3
@OSType?3
@OSVersion?3
@ProgramFilesDir?3
@ProgramsCommonDir?3
@ProgramsDir?3
@ScriptDir?3
@ScriptFullPath?3
@ScriptLineNumber?3
@ScriptName?3
@SEC?3
@StartMenuCommonDir?3
@StartMenuDir?3
@StartupCommonDir?3
@StartupDir?3
@SW_DISABLE?3
@SW_ENABLE?3
@SW_HIDE?3
@SW_LOCK?3
@SW_MAXIMIZE?3
@SW_MINIMIZE?3
@SW_RESTORE?3
@SW_SHOW?3
@SW_SHOWDEFAULT?3
@SW_SHOWMAXIMIZED?3
@SW_SHOWMINIMIZED?3
@SW_SHOWMINNOACTIVE?3
@SW_SHOWNA?3
@SW_SHOWNOACTIVATE?3
@SW_SHOWNORMAL?3
@SW_UNLOCK?3
@SystemDir?3
@TAB?3
@TempDir?3
@TRAY_ID?3
@TrayIconFlashing?3
@TrayIconVisible?3
@UserName?3
@UserProfileDir?3
@WDAY?3
@WindowsDir?3
@WorkingDir?3
@YDAY?3
@YEAR?3
Abs ( 表达式 ) 求某个数的绝对值.
ACos ( 表达式 )  求某个数的反余弦值(arcCosine).
AdlibRegister ( "函数" [, 时间] ) 注册一个 Adlib 函数.
AdlibUnRegister ( [ "函数" ] ) 反注册 adlib 函数.
Asc ( "字符" )  返回某字符的 ASCII 码数值.
AscW ( "字符" )  返回 Unicode 字符的代码. 
ASin ( 表达式 )  求某个数的反正弦值(arcsine). 
Assign ( "变量名", "数据" [, 标志] ) 给指定变量赋值.
ATan ( 表达式 )  求某个数的反正切值(arctangent).
AutoItSetOption ( "CaretCoordMode" [, param ] ) Sets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the active window 
AutoItSetOption ( "ExpandEnvStrings" [, param ] ) Changes how literal strings and % symbols are interpreted.  By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., "The temp directory is: %temp%". 1 = expand environment variables (similar to AutoIt v2) 0 = do not expand environment variables (default) Without this option the usual way would be: 	"The temp directory is: " & EnvGet("temp") 
AutoItSetOption ( "ExpandVarStrings" [, param ] ) Changes how literal strings and variable/macro ($ and @) symbols are interpreted.  By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., "The value of var1 is $var1$". 1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: "This is a single dollar $$ sign". 0 = do not expand variables (default) 
AutoItSetOption ( "GUICloseOnESC" [, param ] ) When ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent.  This option toggles this behavior on and off. 1 = Send the $GUI_EVENT_CLOSE message when ESC is pressed (default). 0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed. 
AutoItSetOption ( "GUICoordMode" [, param ] ) Alters the position of a control defined by <a href="GUICtrlSetPos.htm">GUICtrlSetPos</a>. 1 = absolute coordinates (default) still relative to the dialog box. 0 = relative position to the start of the last control (upper left corner). 2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start. So next line is -1,offset; next cell is offset,-1; current cell is -1,-1. Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back. 
AutoItSetOption ( "GUIDataSeparatorChar" [, param ] ) Define the character which delimits subitems in GUICtrlSetData. The default character is '|'. 
AutoItSetOption ( "GUIOnEventMode" [, param ] ) Enable/disable OnEvent functions notifications. 0 = (default) disable. 1 = enable. 
AutoItSetOption ( "GUIResizeMode" [, param ] ) Change default resizing for a control. 0 = (default) keep default control resizing. &lt;1024 = anytype of resizing see <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>. 
AutoItSetOption ( "GUIEventOptions" [, param ] ) Change special event behavior or GUI function return values. 0 = (default) Windows behavior on click on Minimize,Restore, Maximize, Resize. 1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification. 
AutoItSetOption ( "MouseClickDelay" [, param ] ) Alters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10). 
AutoItSetOption ( "MouseClickDownDelay" [, param ] ) Alters the length a click is held down before release. Time in milliseconds to pause (default=10). 
AutoItSetOption ( "MouseClickDragDelay" [, param ] ) Alters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250). 
AutoItSetOption ( "MouseCoordMode" [, param ] ) Sets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the active window 
AutoItSetOption ( "MustDeclareVars" [, param ] ) If this option is used then all variables must be pre-declared with Dim, Local or Global before they can be used - removes the chance for misspelled variables causing bugs. 1 = Variables must be pre-declared 0 = Variables don't need to be pre-declared (default) 
AutoItSetOption ( "PixelCoordMode" [, param ] ) Sets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window): 0 = relative coords to the defined window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the defined window 
AutoItSetOption ( "SendAttachMode" [, param ] ) Specifies if AutoIt attaches input threads when using Send() function.  When not attaching (default mode=0) detecting the state of capslock/scrolllock and numlock can be unreliable under NT4.  However, when you specify attach mode=1 the Send("{... down/up}") syntax will not work and there may be problems with sending keys to "hung" windows.  ControlSend() ALWAYS attaches and is not affected by this mode. 0 = don't attach (default) 1 = attach 
AutoItSetOption ( "SendCapslockMode" [, param ] ) Specifies if AutoIt should store the state of capslock before a Send function and restore it afterwards. 0 = don't store/restore 1 = store and restore (default) 
AutoItSetOption ( "SendKeyDelay" [, param ] ) Alters the length of the brief pause in between sent keystrokes.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption ( "SendKeyDownDelay" [, param ] ) Alters the length of time a key is held down before being released during a keystroke.  For applications that take a while to register keypresses you may need to raise this value from the default.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
AutoItSetOption ( "TCPTimeout" [, param ] ) Defines the time before TCP functions stop if no communication. Time in milliseconds before timeout (default=100). 
AutoItSetOption ( "TrayAutoPause" [, param ] ) Script pauses when click on tray icon. 0 = no pause 1 = pause (default). If there is no DefaultMenu no pause will occurs. 
AutoItSetOption ( "TrayIconDebug" [, param ] ) If enabled shows the current script line in the tray icon tip to help debugging. 0 = no debug information (default) 1 = show debug 
AutoItSetOption ( "TrayIconHide" [, param ] ) Hides the AutoIt tray icon.  Note:  The icon will still initially appear ~750 milliseconds. 0 = show icon (default) 1 = hide icon 
AutoItSetOption ( "TrayMenuMode" [, param ] ) Extend the behaviour of the script tray icon/menu. This can be done with a combination (adding) of the following values. 0 = default menu items (Script Paused/Exit) are appended to the usercreated menu; usercreated checked items will automatically unchecked; if you double click the tray icon then the controlid is returned which has the "Default"-style (default). 1 = no default menu 2 = user created checked items will not automatically unchecked if you click it 4 = don't return the menuitemID which has the "default"-style in the main contextmenu if you double click the tray icon 8 = turn off auto check of radio item groups 
AutoItSetOption ( "TrayOnEventMode" [, param ] ) Enable/disable OnEvent functions notifications for the tray. 0 = (default) disable 1 = enable 
AutoItSetOption ( "WinDetectHiddenText" [, param ] ) Specifies if hidden window text can be "seen" by the window matching functions. 0 = Do not detect hidden text (default) 1 = Detect hidden text 
AutoItSetOption ( "WinSearchChildren" [, param ] ) Allows the window search routines to search child windows as well as top-level windows. 0 = Only search top-level windows (default) 1 = Search top-level and child windows 
AutoItSetOption ( "WinTextMatchMode" [, param ] ) Alters the method that is used to match window text during search operations. 1 = Complete / Slow mode (default) 2 = Quick mode In quick mode AutoIt can usually only "see" dialog text, button text and the captions of some controls.  In the default mode much more text can be seen (for instance the contents of the Notepad window). If you are having performance problems when performing many window searches then changing to the "quick" mode may help. 
AutoItSetOption ( "WinTitleMatchMode" [, param ] ) Alters the method that is used to match window titles during search operations. 1 = Match the title from the start (default) 2 = Match any substring in the title 3 = Exact title match 4 = Advanced mode, see <a href="../intro/windowsadvanced.htm">Window Titles & Text (Advanced)</a> -1 to -4 = force lower case match according to other type of match. 
AutoItSetOption ( "WinWaitDelay" [, param ] ) Alters how long a script should briefly pause after a successful window-related operation. Time in milliseconds to pause (default=250). 
AutoItWinGetTitle (  ) 获取 AutoIt 窗口的标题名.
AutoItWinSetTitle ( "新标题" )  修改 AutoIt 窗口的标题名.
Beep ( [频率 [, 延迟]] )  播放 beep 声音(PC蜂鸣器). 
Binary ( 表达式)  返回一个表达式的二进制值. 
BinaryLen ( 二进制变量 )  返回一个二进制变量的所用字节数.
BinaryMid ( 二进制数据, 开始 [, 数量] )  取出二进制变量里面X字节的内容.
BinaryToString ( 表达式 [, 标志] ) 转换一个二进制变量为一个字符串.
BitAND ( 值1, 值2 [, 值 n] ) 按位"与"运算.
BitNOT ( 值 )  按位"取反"运算.
BitOR ( 值1, 值2 [, 值 n] )  BitOR 按位"或"运算.
BitRotate ( 值 [, 位移 [, 大小]] )  执行位移操作, 使用旋转法. 
BitShift ( 数值, 移位 ) 按位"移"运算.
BitXOR ( 数值1, 数值2 [, 数值 n] )  按位"异或"运算.
BlockInput ( 标志 )  屏蔽/启用鼠标与键盘(输入).
Break ( 模式 ) 允许或禁止用户从脚本程序的托盘菜单中退出.
Call ( "函数名" [, 参数1 [, 参数2 [, 参数<i>N</i> ]]] )  调用用户自定义函数.可以包含字符串参数.
CDTray ( "驱动器", "状态" )  弹出或关闭光驱.
Ceiling ( 表达式 ) 返回一个数的四舍五入值(最靠近的最大整数).
Chr ( ASCII码 )  返回指定ASCII码所对应的字符.
ChrW ( UNICODE代码 ) 返回一个字符对应的UNICODE(统一的字符编码标准, 采用多字节对字符进行编码)代码.
ClipGet (  ) 获取剪切板里的文本.
ClipPut ( "值" ) 在剪切板中写入文本.
ConsoleRead ( [peek = false [, 二进制 = false ]]) 读取AU3进程中的 STDIN 流字符.
ConsoleWrite ( "数据" ) 写入数据到 STDOUT 流.一些文本编辑器可以读取这个流作为其它程序可接受的数据.
ConsoleWriteError ( "数据" ) 写入数据到 STDERR 流. 一些文本编辑器可以读取这个流作为其它程序可接受的数据.
ControlClick ( "标题", "文本", 控件ID [, 按钮 [, 点击次数 [, X坐标 [, Y坐标]]]] ) 向指定控件发送鼠标点击命令.
ControlCommand ( "title", "text", "classnameNN", "IsVisible", "" ) Returns 1 if Control is visible, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "IsEnabled", "" ) Returns 1 if Control is enabled, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "ShowDropDown", "" ) Drops a ComboBox
ControlCommand ( "title", "text", "classnameNN", "HideDropDown", "" ) Undrops a ComboBox
ControlCommand ( "title", "text", "classnameNN", "AddString", 'string' ) Adds a string to the end in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "DelString", occurrence ) Deletes a string according to occurrence in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "FindString", 'string' ) Returns occurrence ref of the exact string in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "SetCurrentSelection", occurrence ) Sets selection to occurrence ref in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "SelectString", 'string' ) Sets selection according to string in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "IsChecked", "" ) Returns 1 if Button is checked, 0 otherwise
ControlCommand ( "title", "text", "classnameNN", "Check", "" ) Checks radio or check Button
ControlCommand ( "title", "text", "classnameNN", "UnCheck", "" ) Unchecks radio or check Button
ControlCommand ( "title", "text", "classnameNN", "GetCurrentLine", "" ) Returns the line # where the caret is in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetCurrentCol", "" ) Returns the column # where the caret is in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetCurrentSelection", "" ) Returns name of the currently selected item in a ListBox or ComboBox
ControlCommand ( "title", "text", "classnameNN", "GetLineCount", "" ) Returns # of lines in an Edit
ControlCommand ( "title", "text", "classnameNN", "GetLine", line# ) Returns text at line # passed of an Edit
ControlCommand ( "title", "text", "classnameNN", "GetSelected", "" ) Returns selected text of an Edit
ControlCommand ( "title", "text", "classnameNN", "EditPaste", 'string' ) Pastes the 'string' at the Edit's caret position
ControlCommand ( "title", "text", "classnameNN", "CurrentTab", "" ) Returns the current Tab shown of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "TabRight", "" ) Moves to the next tab to the right of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "TabLeft", "" ) Moves to the next tab to the left of a SysTabControl32
ControlCommand ( "title", "text", "classnameNN", "SendCommandID", Command ID ) Simulates the WM_COMMAND message. Usually used for ToolbarWindow32 controls - use the ToolBar tab of Au3Info to get the Command ID.
ControlDisable ( "窗口标题", "窗口文本", 控件ID ) 禁用或使某控件变成灰色不可用状态.
ControlEnable ( "窗口标题", "窗口文本", 控件ID ) 使灰色按钮/控件变为"可用"状态.
ControlFocus ( "窗口标题", "窗口文本", 控件ID ) 设置输入焦点到指定窗口的某个控件上.
ControlGetFocus ( "窗口标题" [, "窗口文本"] ) 返回指定窗口上键盘焦点所在的控件的类别名.
ControlGetHandle ( "窗口标题", "窗口文本", 控件ID) 获取指定控件的内部句柄.
ControlGetPos ( "窗口标题", "窗口文本", 控件ID ) 获取指定控件相对其窗口的坐标位置和大小等信息.
ControlGetText ( "窗口标题", "窗口文本", 控件ID)  获取指定控件上的文本.
ControlHide ( "窗口标题", "窗口文本", 控件ID) 隐藏指定控件.
ControlListView ( "title", "text", "classnameNN", "DeSelect", From [, To] ) Deselects one or more items.
ControlListView ( "title", "text", "classnameNN", "FindItem", "string to find" [, SubItem] ) Returns the item index of the string.  Returns -1 if the string is not found.
ControlListView ( "title", "text", "classnameNN", "GetItemCount" ) Returns the number of list items.
ControlListView ( "title", "text", "classnameNN", "GetSelected" [, option] ) Returns a string containing the item index of selected items.  If option=0 (default) only the first selected item is returned.  If option=1 then all the selected items are returned delimited by |, e.g: &quot;0|3|4|10&quot;.  If no items are selected a blank "" string is returned.
ControlListView ( "title", "text", "classnameNN", "GetSelectedCount" ) Returns the number of items that are selected.
ControlListView ( "title", "text", "classnameNN", "GetSubItemCount" ) Returns the number of subitems.
ControlListView ( "title", "text", "classnameNN", "GetText", Item, SubItem ) Returns the text of a given item/subitem.
ControlListView ( "title", "text", "classnameNN", "IsSelected", Item ) Returns 1 if the item is selected, otherwise returns 0.
ControlListView ( "title", "text", "classnameNN", "Select", From [, To] ) Selects one or more items.
ControlListView ( "title", "text", "classnameNN", "SelectAll" ) Selects all items.
ControlListView ( "title", "text", "classnameNN", "SelectClear" ) Clears the selection of all items.
ControlListView ( "title", "text", "classnameNN", "SelectInvert" ) Inverts the current selection.
ControlListView ( "title", "text", "classnameNN", "ViewChange", "view" ) Changes the current view.  Valid views are "list", "details", "smallicons", "largeicons".
ControlMove ( "窗口标题", "窗口文本", 控件ID, X坐标, Y坐标 [, 宽度 [, 高度]] )  在窗口内移动控件.
ControlSend ( "窗口标题", "窗口文本", 控件ID, "字符串" [, 标志] )  向指定的控件发送字符串.
ControlSetText ( "窗口标题", "窗口文本", 控件ID, "新文本" [,标志] )  修改指定控件的文本.
ControlShow ( "窗口标题", "窗口文本", 控件ID)  显示已经隐藏的控件. 
ControlTreeView ( "窗口标题", "窗口文本", 控件ID, "命令" [, 选项1 [, 选项2]] ) 发送一个命令到 TreeView32 控件.
Cos ( 表达式 )  求某个数的余弦值(cosine).
Dec ( "hex" [, flag ] ) 返回一个十六进制数的十进制数值. 
DirCopy ( "源目录", "目标目录" [, 标志] )  复制指定目录及其所有子目录和文件(类似于xcopy命令). 
DirCreate ( "路径" ) 新建一个目录/文件夹. 
DirGetSize ( "路径" [, 标志] ) 返回给点目录所占用的空间(单位字节).
DirMove ( "源目录", "目标目录" [, 标志] )  移动指定目录及其所有子目录和文件.
DirRemove ( "路径" [, 递归遍历] ) 删除一个目录/文件夹.
DllCall ( "dll", "返回值类型", "函数名称" [, 类型1, 参数1[, 类型n, 参数n]] )  动态调用指定DLL(动态链接库)文件中的函数.
DllCallAddress ( "返回值类型", 地址 [, 类型1, 参数1 [, 类型 n, 参数 n]] ) 动态调用一个指定内存地址的函数.<div class="experimental">警告: 这是一个高级函数. 不正确的使用将导致 AutoIt 崩溃. 开始使用这个函数前,您需要先确定 <a href="DllCall.htm">DllCall()</a> 还无法达到你的要求.</div>
DllCallbackFree ( 句柄 ) 清空先前由 DllCallbackRegister 创建的句柄.
DllCallbackGetPtr ( 句柄 ) 返回一个回调函数的指针,可以用于传递给一个 Win32 API.
DllCallbackRegister ( "函数名", "返回类型", "参数" ) 创建一个用户自定义回调函数.
DllClose ( dll句柄 )  关闭此前打开的DLL文件.
DllOpen ( "文件名" )  打开指定的 DLL 文件以供 DllCall 函数使用. 
DllStructCreate ( Struct [,Pointer] ) 创建一个 C/C++ 样式的数据结构供 DllCall 使用.
DllStructGetData ( 数据结构, 元素 [, 索引 ] ) 返回数据结构(struct)元素的数据.
DllStructGetPtr ( 数据结构 [,元素] ) 返回 数据结构(struct) 或者 数据结构(struct)的一个元素的指针.
DllStructGetSize ( 数据结构 ) 返回一个数据结构(struct)的大小,单位为字节.
DllStructSetData ( 数据结构, 元素, 值 [, 索引 ] ) 设置数据结构(struct)中部分元素的数据.
DriveGetDrive ( "类型" ) 返回一个含有指定驱动器盘符的数组.
DriveGetFileSystem ( "路径" ) 返回指定驱动器的文件系统类型.
DriveGetLabel ( "路径" ) 返回指定的驱动器分区的卷标(如果存在).
DriveGetSerial ( "路径" ) 返回指定驱动器的序列号.
DriveGetType ( "路径" ) 返回指定驱动器的类型.
DriveMapAdd ( "设备名", "远程共享路径" [, 标志 [, "用户名" [, "密码"]]] ) 映射网络驱动器.
DriveMapDel ( "驱动器" ) 断开网络驱动器.
DriveMapGet ( "设备名" ) 获取已映射网络驱动器的路径.
DriveSetLabel ( "路径", "卷标" ) 修改指定驱动器的卷标.
DriveSpaceFree ( "路径" ) 以MB(兆字节)为单位返回指定路径所在分区的剩余空间.
DriveSpaceTotal ( "路径" ) 以MB(兆字节)为单位返回指定路径所在分区的容量大小.
DriveStatus ( "路径" ) 以字符串的形式返回指定驱动器的状态.
EnvGet ( "环境变量" ) 返回指定的系统环境变量的值.
EnvSet ( "环境变量" [, "值"] ) 写入或修改一个环境变量.
EnvUpdate ( ) 刷新操作系统的环境变量.
Eval ( 表达式 ) 返回字符串形式的变量的值.
Execute ( 字符串 ) 执行一个表达式(主要用于数学求值). 
Exp ( 表达式 ) 求自然对数 <i><b>e</b></i> 的指定幂运算结果.
FileChangeDir ( "路径" ) 更改当前的工作目录.
FileClose ( 文件句柄 ) 关闭此前已打开的文本文件.
FileCopy ( "源文件", "目标路径" [, 标志] ) 复制一个或多个文件.
FileCreateNTFSLink ( "源路径", "硬链接" [, 标志] ) 创建一个 NTFS 硬连接到一个文件或者文件夹.
FileCreateShortcut ( "目标文件", "lnk文件" [, "工作目录" [, "参数" [, "描述" [, "图标文件" [, "快捷键" [, 图标编号 [, 状态]]]]]]] ) 创建指定文件的快捷方式(.lnk文件).
FileDelete ( "路径" ) 删除一个或多个文件.
FileExists ( "路径" ) 检查指定文件或目录是否存在.
FileFindFirstFile ( "文件名" ) 返回一个依照搜索的字符串得到的搜索"句柄".
FileFindNextFile ( 搜索句柄 ) 搜索指定字符串并返回(下一个)与之匹配的文件名,但要求在调用过 FileFindFirstFile 函数之后.
FileFlush ( 文件句柄 ) 刷新文件缓冲器中的数据到磁盘.
FileGetAttrib ( "文件名" ) 返回指定文件的属性代码.
FileGetEncoding ( "文件句柄/文件名" [, 模式] ) 检测一个正在使用的文件的文本编码.
FileGetLongName ( "文件名" [, 标志] ) 返回指定路径的长文件名.
FileGetPos ( 文件句柄 ) 返回当前文件坐标.
FileGetShortcut ( "lnk文件" ) 获取指定快捷方式的各种属性.
FileGetShortName ( "文件" [, 标志] ) 返回指定路径的短文件名(按8.3命名规则,即文件前缀8个字符,后缀3个字符).
FileGetSize ( "文件名" ) 以字节为单位返回指定文件的大小.
FileGetTime ( "文件名" [, 选项 [, 格式]] ) 返回指定文件的时间戳(时间和日期)信息.
FileGetVersion ( "文件名" [,"字符串名称"] ) 返回指定"文件"(通常是指可执行文件)的版本信息.
FileInstall ( "源文件", "目标路径" [, 标志] ) 包含并装入指定文件到编译后的脚本程序中.
FileMove ( "源文件", "目标路径" [, 标志] ) 移动一个或多个文件.
FileOpen ( "文件名" [, 模式 ] ) 打开指定的文件以供读写.
FileOpenDialog ( "标题", "起始目录", "文件类型" [, 选项 [, "默认文件名" [, 窗口句柄]]] ) 显示一个文件打开对话框.
FileRead ( "文件句柄/文件名" [, 数量] ) 从此前已打开的文本文件中读取指定数量的字符.
FileReadLine ( "文件句柄/文件名" [, 行号] ) 从此前已打开的文本文件中读取指定行的字符.
FileRecycle ( "源文件" ) 把指定的文件或目录放入回收站.
FileRecycleEmpty ( ["源路径"] )  清空回收站. 
FileSaveDialog ( "标题", "起始目录", "文件类型" [, 选项 [, "默认文件名" [, 窗口句柄]]] )  显示一个文件保存对话框.
FileSelectFolder ( "对话框提示文本", "根目录" [, 标志 [, "起始目录" [, 窗口句柄]]] )  显示一个文件夹选择对话框.
FileSetAttrib ( "文件", "+-RASHNOT" [, 递归遍历] )  修改一个或多个文件的属性.
FileSetPos ( 文件句柄, 偏移量, 原点 ) 设置当前文件坐标.
FileSetTime ( "文件名", "时间" [, 类型 [, 递归遍历] ])  修改一个或多个文件的时间戳.
FileWrite ( "文件句柄/文件名", "文本/数据" )  向此前已打开的文本/数据文件尾追加数据.
FileWriteLine ( "文件句柄/文件名", "数据" ) 向此前已打开的文本文件尾追加一行数据.
Floor ( 表达式)  返回一个数的四舍五入值(最靠近的最小整数). 
FtpSetProxy ( 模式 [, "地址:端口" [, "用户名" [, "密码"]]] ) 设置访问FTP时使用的代理服务器.
GUICreate ( "窗口标题" [, 宽度 [, 高度 [, 左侧 [, 顶部 [, 样式 [, 扩展样式 [, 父窗口]]]]]]] )  创建一个 GUI 窗口.
GUICtrlCreateAvi ( 文件名, 子文件ID, 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [,  扩展样式]]]] )  在GUI上创建一个AVI视频剪辑控件. 
GUICtrlCreateButton ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个按钮控件. 
GUICtrlCreateCheckbox ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个复选框(Checkbox)控件. 
GUICtrlCreateCombo ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个组合列表框(ComboBox)控件. 
GUICtrlCreateContextMenu ( [控件ID] ) 在指定控件或GUI窗口上创建上下文菜单(右键).
GUICtrlCreateDate ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个日期控件.
GUICtrlCreateDummy ( ) 在GUI上创建一个 Dummy 控件. 
GUICtrlCreateEdit ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个编辑框(Edit)控件.
GUICtrlCreateGraphic ( 左侧, 顶部[, 宽度[, 高度[, 样式]]] )  在GUI上创建一个绘图(Graphic)控件. 
GUICtrlCreateGroup ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个分组(Group)控件.
GUICtrlCreateIcon ( 文件名, 图标名称, 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个图标(Icon)控件. 
GUICtrlCreateInput ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个输入框(Input)控件.
GUICtrlCreateLabel ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个静态标签(Label)控件.
GUICtrlCreateList ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个列表(List)控件. 
GUICtrlCreateListView ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个 ListView 控件.
GUICtrlCreateListViewItem ( "文本", 列表视图ID ) 在GUI上创建一个 ListView 项目控件.
GUICtrlCreateMenu ( "子菜单文本" [, menuID [, menuentry]] )  在GUI上创建一个菜单控件.
GUICtrlCreateMenuItem ( "文本", 菜单ID [, 菜单编号 [, 菜单单选项目]] )  在GUI上创建一个菜单项目控件.
GUICtrlCreateMonthCal ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上面创建一个月历控件.
GUICtrlCreateObj ( 对象变量, 左侧, 顶部 [, 宽度 [, 高度 ]] ) 在GUI上面创建一个 ActiveX 控件.
GUICtrlCreatePic ( 文件名, 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个图片控件.
GUICtrlCreateProgress ( 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个进度条控件.
GUICtrlCreateRadio ( "文本", 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个单选框(Radio)控件.
GUICtrlCreateSlider ( 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] )  在GUI上创建一个滑动条(Slider)控件.
GUICtrlCreateTab ( 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个标签页(Tab)控件.
GUICtrlCreateTabItem ( "文本" ) 在GUI上创建一个标签页控件项目.
GUICtrlCreateTreeView ( 左侧, 顶部 [, 宽度 [, 高度 [, 样式 [, 扩展样式]]]] ) 在GUI上创建一个 TreeView 控件.
GUICtrlCreateTreeViewItem ( "文本", 列表视图ID ) 在GUI上创建一个 TreeViewItem 控件.
GUICtrlCreateUpdown ( 输入控件ID [,样式] )  在GUI上创建一个 Updown(上下按钮)控件.
GUICtrlDelete ( 控件ID ) 删除指定控件.
GUICtrlGetHandle ( 控件ID ) 返回一个指定控件的句柄或者特殊(项目)句柄(Menu, ContextMenu, TreeViewItem). 
GUICtrlGetState ( [控件ID] ) 获取指定控件的当前状态.
GUICtrlRead ( 控件ID [, 高级] ) 读取指定控件的状态或相关数据.
GUICtrlRecvMsg ( 控件ID , msg [, wParam [, lParam类型]] ) 向指定控件发送消息并获取返回的 lParam 的信息.(获取控件消息)
GUICtrlRegisterListViewSort ( 控件ID, "函数" ) 为内部listview排序回调函数注册一个用户自定义函数.
GUICtrlSendMsg ( 控件ID, msg , wParam, lParam ) 发送一个消息到控件.
GUICtrlSendToDummy ( 控件ID [, 状态] )  向指定的 Dummy(虚拟) 控件发送消息
GUICtrlSetBkColor ( 控件ID, 背景色 )  设置指定控件的背景颜色.
GUICtrlSetColor ( 控件ID, 文本颜色)  设置指定控件的文本颜色.
GUICtrlSetCursor ( 控件ID, 指针ID )  为特定控件指定一个鼠标指针.
GUICtrlSetData ( 控件ID, 数据 [, 默认值] ) 修改指定控件的数据.
GUICtrlSetDefBkColor ( 背景色 [, 窗口句柄] ) 设置 GUI 窗口中所有控件的默认背景色.
GUICtrlSetDefColor ( 默认文本颜色 [, 窗口句柄] ) 设置 GUI 窗口中所有控件文本默认颜色.
GUICtrlSetFont (控件ID, 大小 [, 权值 [, 属性 [, 字体名 [, 质量 ]]]] ) 设置指定控件的字体.
GUICtrlSetGraphic ( 控件ID, 类型 [, par1  [, ... par6]] ) 修改一个控件的图形数据.
GUICtrlSetImage ( 控件ID, 文件名 [, 图标名 [, 图标类型]] ) 设置指定控件的位图或图标.
GUICtrlSetLimit ( 控件ID, 最大值 [, 最小值] )  设置某些控件的字符数或象素数限制.
GUICtrlSetOnEvent ( 控件ID, "函数名" )  为指定控件的点击行为定义一个用户函数.
GUICtrlSetPos ( 控件ID, 左侧 [, 顶部 [, 宽度 [, 高度]]] )  调整某个控件在窗口中的坐标位置.
GUICtrlSetResizing ( 控件ID, 调整方式 )  设置某个控件的大小调整方式.
GUICtrlSetState ( 控件ID, 状态 ) 调整指定控件的状态.
GUICtrlSetStyle ( 控件ID, 样式 [, 扩展样式] )  更改指定控件的样式.
GUICtrlSetTip ( 控件ID, 提示文本[, "标题" [, 图标[, 选项]]] ) 定义指定控件的关联提示文本.
GUIDelete ( [窗口句柄] ) 删除指定窗口和它包含的所有控件.
GUIGetCursorInfo ( [窗口句柄] ) 获取(相对于 GUI 窗口的)鼠标位置.
GUIGetMsg ( [高级模式] ) 捕获窗口消息.
GUIGetStyle ( [ 窗口句柄] ) 返回一个 GUI 窗口所使用的样式.
GUIRegisterMsg ( msgID, "函数" )  为已知的Windows 消息代码(WM_MSG)注册一个用户自定义的函数.
GUISetAccelerators ( 快捷键 [, 窗口句柄] ) 为 GUI 窗口设置快捷键表.
GUISetBkColor ( 背景色 [, 窗口句柄] ) 为GUI窗口设置背景颜色.
GUISetCoord ( 左侧, 顶部 [, 宽度 [, 高度 [, 窗口句柄]]] ) 为下一个控件设置绝对坐标.
GUISetCursor ( [指针ID [, 覆盖 [, 窗口句柄]]] ) 设置(鼠标经过窗口时的)鼠标指针.
GUISetFont (大小 [, 权值 [, 属性 [, 字体名 [, 窗口句柄[, 质量]]]] ) 设置窗口的默认字体.
GUISetHelp ( 帮助文件 [, 窗口句柄] ) 设置在用户按下F1时就打开的(可执行)文件.
GUISetIcon ( 图标文件 [, 图标ID [, 窗口句柄]] ) 设置窗口图标.
GUISetOnEvent ( 特殊ID, "函数名" [, 窗口句柄] ) 当一个系统按钮被点击时调用一个用户自定义函数(UDF).
GUISetState ( [标志 [, 窗口句柄]] ) 调整窗口的状态.
GUISetStyle ( 样式 [,扩展样式 [, 窗口句柄]] ) 改变窗口样式.
GUIStartGroup ( [窗口句柄] ) 使此后所有被创建的控件都归为一组.
GUISwitch ( 窗口句柄 [,标签项目ID] )  切换用于 GUI 函数的"当前"窗口.
Hex ( 表达式 [, 长度] ) 返回一个字符串表示的整数或者二进制数的的十六进制数值.
HotKeySet ( "热键" [, "函数名"] ) 设置一个可调用某用户函数的热键.
HttpSetProxy ( 模式 [, "地址:端口" [, "用户名" [, "密码"]]] ) 设置访问HTTP时使用的代理服务器.
HttpSetUserAgent ( "用户代理" ) 设置 InetGet() 和 InetRead() 请求的用户代理(user-agent)字符串.
HWnd ( 表达式 ) 转换一个表达式为 HWND 句柄.
InetClose ( 句柄 ) 关闭一个由 InetGet() 返回的句柄.
InetGet ( "URL" [, "文件名" [, 选项 [, 是否后台]]] ) 通过HTTP,HTTPS或FTP协议从互联网上下载指定文件.
InetGetInfo( [ 句柄 [, 索引 ]] ) 返回一个由InetGet()函数返回的句柄的详细信息.
InetGetSize ( "URL" [, 选项 ] ) 以字节为单位返回存放在互联网上的指定文件的大小.
InetRead ( "URL" [, 选项 ] ) 通过HTTP,HTTPS或FTP协议从互联网上下载一个文件.
IniDelete ( "文件名", "字段名" [, "关键字"] ) 从某标准配置文件(*.ini)中删除某个数值.
IniRead ( "文件名", "字段名", "关键字", "默认值" ) 从某标准配置文件(*.ini)中读取某个数值.
IniReadSection ( "文件名", "字段名" ) 从某标准配置文件(*.ini)中读取某个节中的所有关键字或值.
IniReadSectionNames ( "文件名" ) 从某标准配置文件(*.ini)中读取所有字段的信息.
IniRenameSection ( "文件名", "字段", "新字段" [, 标志] ) 重命名INI文件里面的字段.
IniWrite ( "文件名", "字段名", "键名", "值" ) 写入一个值到标准格式的 .ini 文件.
IniWriteSection ( "文件名", "字段", "数据" [, 索引] ) 将数据写入到标准INI文件的一个字段.
InputBox ( "标题", "提示信息" [, "默认数据" [, "密码字符" [, 宽度, 高度 [, 左方, 顶部 [, 超时时间 [,句柄]]]]]] ) 显示以一个输入框以供用户输入数据.
Int ( 表达式 [, 标志 ] ) 返回某个表达式的整数(整数部分)值. 
IsAdmin ( ) 检查当前用户是否拥有管理员权限. 
IsArray ( 变量 ) 检查某个变量是否数组类型.
IsBinary ( 表达式 ) 检查一个变量是否是 binary (二进制)类型.
IsBool ( 变量 )  检查一个变量是否是布尔值类型(boolean). 
IsDeclared ( 表达式 ) 检测某个变量是否已声明.
IsDllStruct ( 变量 ) 检查一个变量是否是 Dll 数据结构类型.
IsFloat ( 变量 ) 检测某个变量或表达式是否浮点数.
IsHWnd ( 变量 ) 检查一个变量基本类型是否是一个窗口句柄或者指针类型.
IsInt ( 变量 ) 检测某个变量或表达式是否整型数.
IsKeyword ( 变量 ) 检查一个变量是否是一个关键字(例子: Default(默认)). 
IsNumber ( 变量 ) 检测某个变量是否数字类型数据.
IsObj ( 变量 ) 检查一个变量或者表达式是否为对象类型. 
IsPtr ( 变量 ) 检查一个变量基本类型是否为指针类型. 
IsString ( 变量 ) 检测某个变量是否字符类型数据.
Log ( 表达式 )  求某个数的自然对数.
MemGetStats ( ) 获取内存相关信息.
Mod ( 数值1, 数值2 ) 求模运算.
MouseClick ( "按钮" [, X坐标, Y坐标 [, 点击次数 [, 速度]]] ) 执行鼠标点击操作.
MouseClickDrag ( "按钮", X1坐标, Y1坐标, X2坐标, Y2坐标 [, 速度] ) 执行鼠标拖曳操作.
MouseDown ( "按钮" ) 在当前位置产生一个鼠标按下(按键)事件.
MouseGetCursor ( ) 返回当前鼠标指针光标的ID.
MouseGetPos ( [维数] ) 获取当前鼠标的坐标位置.
MouseMove ( X坐标, Y坐标 [, 速度] ) 移动鼠标指针.
MouseUp ( "按钮" ) 在当前位置产生一个鼠标释放(按键)事件.
MouseWheel ("方向" [, 点击次数]) 产生向上或向下滚动鼠标滚轮事件.仅支持NT/2000/XP及更高. 
MsgBox ( 标志, "标题", "文本" [, 超时时间 [, 句柄]] ) 显示一个简单的对话框(可设置超时属性).
Number ( 表达式 [, 标志 ] )  返回某表达式的数值结果. 
ObjCreate ( "类名称"  [, "服务器名称" [,"用户名", ["密码"]]] )  通过一个指定的类名引用一个 COM 对象.
ObjCreateInterface ( "CLSID" , "IID" [,"interface_description", ["flag"]] ) Creates a reference to an object from the given classname/object pointer, interface identifier and description string.
ObjEvent ( $ObjectVar, "functionprefix" [, "接口名称"] ) 包含一个已经得到的Object(对象)的事件句柄.
ObjEvent ( "AutoIt.Error" [, "函数名称"] ) 包含一个已经得到的Object(对象)的事件句柄.
ObjGet ( "filename" [, "classname" [, instance]]) 对 COM 对象从现有的进程或文件名检索一个参考.
ObjName ( $Objectvariable [,标志] ) 返回一个对象的名称或者接口描述
OnAutoItExitRegister( "函数" ) 注册一个当AutoIt退出时执行的函数.
OnAutoItExitUnregister( "函数" ) 反注册一个由AutoIt退出时将调用的用户自定义函数.
Opt ( "CaretCoordMode" [, param ] ) Sets the way coords are used in the caret functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the active window 
Opt ( "ExpandEnvStrings" [, param ] ) Changes how literal strings and % symbols are interpreted.  By default strings are treated literally, this option allows you to use %environment% variables inside strings, e.g., "The temp directory is: %temp%". 1 = expand environment variables (similar to AutoIt v2) 0 = do not expand environment variables (default) Without this option the usual way would be: 	"The temp directory is: " & EnvGet("temp") 
Opt ( "ExpandVarStrings" [, param ] ) Changes how literal strings and variable/macro ($ and @) symbols are interpreted.  By default strings are treated literally, this option allows you to use variables and macros inside strings, e.g., "The value of var1 is $var1$". 1 = expand variables (when in this mode and you want to use a literal $ or @ then double it up: "This is a single dollar $$ sign". 0 = do not expand variables (default) 
Opt ( "GUICloseOnESC" [, param ] ) When ESC is pressed on a GUI the $GUI_EVENT_CLOSE message is sent.  This option toggles this behavior on and off. 1 = Send the $GUI_EVENT_CLOSE message when ESC is pressed (default). 0 = Don't send the $GUI_EVENT_CLOSE message when ESC is pressed. 
Opt ( "GUICoordMode" [, param ] ) Alters the position of a control defined by <a href="GUICtrlSetPos.htm">GUICtrlSetPos</a>. 1 = absolute coordinates (default) still relative to the dialog box. 0 = relative position to the start of the last control (upper left corner). 2 = cell positioning relative to current cell. A -1 for left or top parameter don't increment the start. So next line is -1,offset; next cell is offset,-1; current cell is -1,-1. Obviously "offset" cannot be -1 which reserved to indicate the no increment. But if you can use a multiple of the width you choose to skip or go back. 
Opt ( "GUIDataSeparatorChar" [, param ] ) Define the character which delimits subitems in GUICtrlSetData. The default character is '|'. 
Opt ( "GUIOnEventMode" [, param ] ) Enable/disable OnEvent functions notifications. 0 = (default) disable. 1 = enable. 
Opt ( "GUIResizeMode" [, param ] ) Change default resizing for a control. 0 = (default) keep default control resizing. &lt;1024 = anytype of resizing see <a href="GUICtrlSetResizing.htm">GUICtrlSetResizing</a>. 
Opt ( "GUIEventOptions" [, param ] ) Change special event behavior or GUI function return values. 0 = (default) Windows behavior on click on Minimize,Restore, Maximize, Resize. 1 = suppress windows behavior on minimize, restore or maximize click button or window resize. Just sends the notification. 
Opt ( "MouseClickDelay" [, param ] ) Alters the length of the brief pause in between mouse clicks. Time in milliseconds to pause (default=10). 
Opt ( "MouseClickDownDelay" [, param ] ) Alters the length a click is held down before release. Time in milliseconds to pause (default=10). 
Opt ( "MouseClickDragDelay" [, param ] ) Alters the length of the brief pause at the start and end of a mouse drag operation. Time in milliseconds to pause (default=250). 
Opt ( "MouseCoordMode" [, param ] ) Sets the way coords are used in the mouse functions, either absolute coords or coords relative to the current active window: 0 = relative coords to the active window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the active window 
Opt ( "MustDeclareVars" [, param ] ) If this option is used then all variables must be pre-declared with Dim, Local or Global before they can be used - removes the chance for misspelled variables causing bugs. 1 = Variables must be pre-declared 0 = Variables don't need to be pre-declared (default) 
Opt ( "PixelCoordMode" [, param ] ) Sets the way coords are used in the pixel functions, either absolute coords or coords relative to the window defined by hwnd (default active window): 0 = relative coords to the defined window 1 = absolute screen coordinates (default) 2 = relative coords to the client area of the defined window 
Opt ( "SendAttachMode" [, param ] ) Specifies if AutoIt attaches input threads when using Send() function.  When not attaching (default mode=0) detecting the state of capslock/scrolllock and numlock can be unreliable under NT4.  However, when you specify attach mode=1 the Send("{... down/up}") syntax will not work and there may be problems with sending keys to "hung" windows.  ControlSend() ALWAYS attaches and is not affected by this mode. 0 = don't attach (default) 1 = attach 
Opt ( "SendCapslockMode" [, param ] ) Specifies if AutoIt should store the state of capslock before a Send function and restore it afterwards. 0 = don't store/restore 1 = store and restore (default) 
Opt ( "SendKeyDelay" [, param ] ) Alters the length of the brief pause in between sent keystrokes.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
Opt ( "SendKeyDownDelay" [, param ] ) Alters the length of time a key is held down before being released during a keystroke.  For applications that take a while to register keypresses you may need to raise this value from the default.  A value of 0 removes the delay completely. Time in milliseconds to pause (default=5). 
Opt ( "TCPTimeout" [, param ] ) Defines the time before TCP functions stop if no communication. Time in milliseconds before timeout (default=100). 
Opt ( "TrayAutoPause" [, param ] ) Script pauses when click on tray icon. 0 = no pause 1 = pause (default). If there is no DefaultMenu no pause will occurs. 
Opt ( "TrayIconDebug" [, param ] ) If enabled shows the current script line in the tray icon tip to help debugging. 0 = no debug information (default) 1 = show debug 
Opt ( "TrayIconHide" [, param ] ) Hides the AutoIt tray icon.  Note:  The icon will still initially appear ~750 milliseconds. 0 = show icon (default) 1 = hide icon 
Opt ( "TrayMenuMode" [, param ] ) Extend the behaviour of the script tray icon/menu. This can be done with a combination (adding) of the following values. 0 = default menu items (Script Paused/Exit) are appended to the usercreated menu; usercreated checked items will automatically unchecked; if you double click the tray icon then the controlid is returned which has the "Default"-style (default). 1 = no default menu 2 = user created checked items will not automatically unchecked if you click it 4 = don't return the menuitemID which has the "default"-style in the main contextmenu if you double click the tray icon 8 = turn off auto check of radio item groups 
Opt ( "TrayOnEventMode" [, param ] ) Enable/disable OnEvent functions notifications for the tray. 0 = (default) disable 1 = enable 
Opt ( "WinDetectHiddenText" [, param ] ) Specifies if hidden window text can be "seen" by the window matching functions. 0 = Do not detect hidden text (default) 1 = Detect hidden text 
Opt ( "WinSearchChildren" [, param ] ) Allows the window search routines to search child windows as well as top-level windows. 0 = Only search top-level windows (default) 1 = Search top-level and child windows 
Opt ( "WinTextMatchMode" [, param ] ) Alters the method that is used to match window text during search operations. 1 = Complete / Slow mode (default) 2 = Quick mode In quick mode AutoIt can usually only "see" dialog text, button text and the captions of some controls.  In the default mode much more text can be seen (for instance the contents of the Notepad window). If you are having performance problems when performing many window searches then changing to the "quick" mode may help. 
Opt ( "WinTitleMatchMode" [, param ] ) Alters the method that is used to match window titles during search operations. 1 = Match the title from the start (default) 2 = Match any substring in the title 3 = Exact title match 4 = Advanced mode, see <a href="../intro/windowsadvanced.htm">Window Titles & Text (Advanced)</a> -1 to -4 = force lower case match according to other type of match. 
Opt ( "WinWaitDelay" [, param ] ) Alters how long a script should briefly pause after a successful window-related operation. Time in milliseconds to pause (default=250). 
Ping ( "IP地址/主机名" [, 超时时间] ) 向指定的远程主机发送Ping命令并返回收发时间量.
PixelChecksum ( 左侧, 顶部, 右侧, 底部 [, 步进 [,句柄 [,模式]]] )   生成某区域象素的校验和.
PixelGetColor ( X坐标 , Y坐标[, 句柄] )  返回指定坐标位置上的象素点的颜色值.
PixelSearch ( 左侧, 顶部, 右侧, 底部, 颜色 [, 色差 [, 步进 [,句柄]]] ) 在指定矩形区域中搜寻与指定颜色值匹配的象素(并返回第一个匹配的象素的坐标).
PluginClose ( dll句柄 ) 关闭一个插件文件
PluginOpen ( 文件名 ) 打开一个插件文件.
ProcessClose ( "进程") 终止某个进程.
ProcessExists ( "进程" ) 检查指定进程是否存在.
ProcessGetStats ( ["进程" [, 类型]] ) 返回一个数组,数组中包含了运行中的进程的内存或者IO信息.
ProcessList ( ["名称"] )  返回当前运行中的进程列表(含有进程名和 PID 值). 
ProcessSetPriority ( "进程", 优先级 ) 设置某个进程的优先级.
ProcessWait ( "进程名" [, 超时时间] ) 暂停脚本的执行直至给定进程出现为止.
ProcessWaitClose ( "进程名" [, 超时时间] )  暂停脚本的执行直至给定进程不再存在为止.
ProgressOff ( ) 关闭进度条窗口.
ProgressOn ( "标题", "主文本" [, "副文本" [, X 坐标 [, Y 坐标 [, 可选]]]] )  创建自定义进度条窗口.
ProgressSet ( 百分比 [, "子文本" [, "主文本"]] )  设置此前创建的进度条窗口的坐标位置,文字等属性.
Ptr ( 表达式 ) 转换一个表达式到指针变量.
Random ( [最小值 [, 最大值 [, 标志]]] ) 产生一个伪随机的浮点数.
RegDelete ( "键名" [, "值名"] )  从注册表中删除指定键值.
RegEnumKey ( "键名", 序数 )  读取指定子键的名称.
RegEnumVal ( "键名", 序数 )  读取指定值项的名称.
RegRead ( "键名", "值项" ) 读取注册表指定的值.
RegWrite ( "键名" [,"值项" [, "类型" [, 数据]]] ) 创建一个主键,子键或值项. 
Round ( 表达式 [, 位数]  )  返回某数值精确到指定位的结果.
Run ( "程序" [, "工作目录" [, 显示标志[, 可选标志]]] ) 运行外部程序.
RunAs ( "用户名", "域名", "密码", 登录标志, "程序" [, "工作目录" [, 显示标志 [, 可选标志 ]]] ) 使用一个不同的用户运行一个外部程序文件.
RunAsWait ( "用户名", "域", "密码", 登录标志, "程序" [, "工作目录" [, 显示标志 [, 可选标志 ]]] ) 在不同的用户环境中运行一个外部程序并暂停脚本执行直到程序结束.
RunWait ( "程序路径" [, "工作目录" [, 显示标志 [, 可选标志]]] ) 运行一个外部程序并暂停脚本的执行直至该程序执行完毕.
Send ( "按键" [, 标志] ) 向激活窗口发送模拟键击操作.
SendKeepActive ( "窗口标题" [, "窗口文本"] ) 在使用Send()函数时,尝试保持指定窗口激活状态.
SetError ( 错误码 [, 扩展值 [, 返回值]] ) 设置宏 @error 的值.
SetExtended ( 代码 [, 返回值] ) 设置宏 @extended 的值.
ShellExecute ( "文件名" [, "参数" [, "工作目录" [, "verb" [, 显示标志]]]] ) 使用 ShellExecute API 执行一个外部程序.
ShellExecuteWait ( "文件名" [, "参数" [, "工作目录" [, "verb" [, 显示标志]]]] ) 使用 ShellExecute API 执行一个外部程序并暂停脚本运行,直到外部程序正常结束.
Shutdown ( 代码 [, 理由]) 关机.
Sin ( 表达式 ) 求某个数的正弦值(sine). 
Sleep ( 延迟 ) 使脚本暂停指定时间段.
SoundPlay ( "文件名" [, 延迟] ) 播放指定的音频文件.
SoundSetWaveVolume ( 百分比 ) 调整系统波形音量的百分比大小.
SplashImageOn ( "标题", "文件" [, 宽度 [, 高度 [, x 坐标 [, y 坐标 [, 选项]]]]] ) 创建一个自定义的图片(闪屏/封面)窗口.
SplashOff ( ) 关闭闪屏.
SplashTextOn ( "标题", "文本" [, 宽度 [, 高度 [, X 坐标 [, Y 坐标 [, 可选 [, "字体名" [, "字体大小" [, "字体权值"]]]]]]]] ) 创建一个自定义的文字(闪屏)窗口.
Sqrt ( 表达式 ) 求某个数的平方根.
SRandom ( 种子 ) 设置随机数函数(random)的生成种子数.
StatusbarGetText ( "窗口标题" [, "窗口文本" [, 部分]] ) 获取标准状态栏控件的文本.
StderrRead ( 进程ID[, 只读取 = false[, 二进制 = false]] ) 从以前运行的子进程读取 STDERR 流.
StdinWrite ( 进程ID[, 数据] ) Writes a number of characters to the STDIN stream of a previously run child process.
StdioClose ( 进程ID ) 关闭前面运行(run)的进程的STDIO流的所有资源.
StdoutRead ( 进程ID[, peek = false[, 二进制 = false]] ) Reads from the STDOUT stream of a previously run child process.
String ( 表达式 ) 返回某表达式的字符串结果.
StringAddCR ( "字符串" ) 在指定字符串的所有换行符( Chr(10) )前附加一个回车( Chr(13) )(ASCII码).
StringCompare ( "字符串1", "字符串2" [, 区分大小写] ) 按选项比较两个字符串.
StringFormat ( "格式控制", var1 [, ... var32] ) 返回格式化过后的字符 (与 C 语言的sprintf() 函数相似).
StringFromASCIIArray( 数组, [ 开始 [, 结束 [, 编码 ] ] ] ) 转换一个 ASCII 码数组到一个字符串.
StringInStr ( "字符串", "子字符串" [, 区分大小写 [, 出现次序 [, 开始 [, 数量]]]] ) 检查某个字符串是否含有指定的子字符串.
StringIsAlNum ( "字符串" ) 检查某个字符串是否仅含有字母或数字(文字数字式字符).
StringIsAlpha ( "字符串" ) 检查某个字符串是否仅含有字母(文字字符).
StringIsASCII ( "字符串" ) 检查某个字符串是否仅含有ASCII码值介于 0x00 到 0x7f (0-127)之间的字符.
StringIsDigit ( "字符串" ) 检查某个字符串是否仅含有数字(0-9)字符.
StringIsFloat ( "字符串" ) 检查某个字符串是否为浮点数.
StringIsInt ( "字符串" ) 检查某个字符串是否整型数.
StringIsLower ( "字符串" )  检查某个字符串是否仅含有小写字母.
StringIsSpace ( "字符串" ) 检查某个字符串是否仅含有"空白符".
StringIsUpper ( "字符串" ) 检查某个字符串是否仅含有大写字母.
StringIsXDigit ( "字符串" ) 检查某个字符串是否仅含有十六进制字符(0-9, A-F).
StringLeft ( "字符串", 数量 ) 返回字符串中从左开始指定数量的字符.
StringLen ( "字符串" ) 返回指定字符串的字符总数.
StringLower ( "字符串" ) 转换字符串为小写字母.
StringMid ( "字符串", 起始位置 [, 数量] ) 取某个字符串的部分字符.
StringRegExp ( "字符串", "表达式" [, 标志 [, 偏移量]] ) 检查字串是否符合给定的正则表达式.
StringRegExpReplace ( "字符串", "表达式", "替换", [ 数量 ] ) 基于正则表达式的文本替换.
StringReplace ( "字符串", "搜索字符串/起始位置", "替换字符串" [, 数量 [, 区分大小写]] ) 替换字符串中的指定子串. 
StringRight ( "字符串", 数量 ) 返回字符串中从右开始指定数量的字符.
StringSplit ( "字符串", "分隔符" [, 标志] ) 以指定分隔符把字符串拆分成若干子字符串.
StringStripCR ( "字符串" ) 删除字符串中的所有回车( Chr(13) ). 
StringStripWS ( "字符串", 标志 )  删去字符串中的"空白符". 
StringToASCIIArray( "字符串", [ 开始 [, 结束 [, 编码 ] ] ] ) 转换一个字符串为包含每个字符的ASCII码的数组.
StringToBinary ( 表达式[,标志])  转换字符串为二进制数据. 
StringTrimLeft ( "字符串", 数量 )  删除字符串中从左开始指定数量的字符. 
StringTrimRight ( "字符串", 数量 ) 删除字符串中从右开始指定数量的字符.
StringUpper ( "字符串" )  转换字符串为大写字母. 
Tan ( 表达式 )  求某个数的正切值(tan). 
TCPAccept ( 主套接字 ) 尝试接受一个套接字(socket)连接. 
TCPCloseSocket ( 套接字 )  关闭一个 TCP 套接字(socket). 
TCPConnect ( IP地址, 端口)  创建一个套接字(socket)连接到已经存在的服务器. 
TCPListen ( IP地址, 端口 [, 最大未决连接] )  创建一个套接字(socket)监听. 
TCPNameToIP ( 域名 )  转换一个因特网名称(域名)到一个 IP 地址. 
TCPRecv ( 主套接字, 最大返回量[, 标志]) 从已经连接的套接字里面接收数据.
TCPSend ( 主套接字, 数据 ) 在已经连接的套接字(socket)上面发送数据.
TCPShutdown ( )UDPShutdown ( ) 停止 TCP/UDP 服务. 
TCPStartup ( )UDPStartup ( ) 开始 TCP/UDP 服务.
TimerDiff ( 句柄 )  返回当前与上一次调用TimerInit()之间的时间间隔. 
TimerInit ( ) 返回一个可以给TimerDiff()函数使用的句柄,用于计算经过的毫秒数. 
ToolTip ( "文本" [, X坐标 [, Y坐标 [, "标题" [, 图标 [, 选项]]]]] )  在屏幕的任意位置显示一个工具提示.
TrayCreateItem ( 文本 [, 菜单ID [, 菜单索引 [, 菜单可选项目]]] ) 在系统托盘上面创建一个菜单项目控件.
TrayCreateMenu ( "子菜单/菜单文本" [, 菜单ID [, 菜单索引]] ) 在系统托盘上面创建一个菜单控件.
TrayGetMsg ( ) 得到一个系统托盘图标项目产生的事件.
TrayItemDelete ( 控件ID )  删除一个系统托盘图标里面的 菜单/菜单项目 控件. 
TrayItemGetHandle ( 控件ID ) 返回一个系统托盘图标里面的 菜单/项目 控件的句柄. 
TrayItemGetState ( [控件ID] )  得到当前系统托盘项目控件的状态. 
TrayItemGetText ( 控件ID ) 得到系统托盘图标里面的 菜单/项目 控件的文本.
TrayItemSetOnEvent ( 项目ID, "函数" ) 当菜单项目被点击,执行一个用户自定义函数.
TrayItemSetState ( 控件ID, 状态) 设置当前系统托盘菜单/项目控件的状态.
TrayItemSetText ( 控件ID, 文本)  设置托盘图标的托盘 菜单/项目 控件的项目文本. 
TraySetClick ( 标志 ) 设置鼠标在系统托盘图标里面的点击模式 - 怎样的鼠标点击才会显示系统托盘的菜单.
TraySetIcon ( [文件名 [, 图标ID]] ) 载入/设置 指定的系统托盘图标. 
TraySetOnEvent ( 特殊事件标识, "函数" )  当系统托盘发生一个特殊事件就执行一个用户自定义函数. 
TraySetPauseIcon ( [文件名 [, 图标ID]] )  载入/设置 指定的托盘暂停图标(脚本暂停时显示).
TraySetState ( [ 标志 ] )  设置系统托盘图标状态. 
TraySetToolTip ( [文本] ) (重新)设置托盘图标的工具(气泡)提示文本. 
TrayTip ( "标题", "文本", 超时时间 [, 选项] )  在托盘图标上显示一个气球提示
UBound ( 数组 [, 维度] )  返回数组维度的大小.
UDPBind ( IP地址, 端口 ) 创建一个入口连接的套接字(socket)绑定.
UDPCloseSocket ( 套接字数组 ) 关闭一个 UDP 套接字(socket).
UDPOpen ( IP地址, 端口 [,标志] )  打开一个套接字(socket)连接到一个存在的服务器. 
UDPRecv ( 套接字数组, 最大返回量[, 标志] )  从已经连接的套接字里面接收数据. 
UDPSend ( 套接字数组, 数据) 在打开的套接字(socket)上面发送数据.
UDPShutdown ( ) Stops TCP/UDP services.
UDPStartup ( ) Starts TCP or UDP services.
VarGetType ( 表达式 ) 返回一个变量的AutoIt内部表示类型.
WinActivate ( "窗口标题" [, "窗口文本"] ) 激活指定的窗口(设置焦点到该窗口,使其成为活动窗口).
WinActive ( "窗口标题" [, "窗口文本"] ) 检查指定的窗口是否存在且当前被激活.
WinClose ( "窗口标题" [, "窗口文本"] ) 关闭指定窗口.
WinExists ( "窗口标题" [, "窗口文本"] ) 检查指定的窗口是否存在.
WinFlash ( "窗口标题" [,"窗口文本" [,闪烁次数[,延迟]]]) 闪烁任务栏上面的窗口标题.
WinGetCaretPos ( ) 返回顶层窗口的插入符的坐标位置.
WinGetClassList ( "窗口标题" [, "窗口文本"] ) 获取指定窗口的所有控件类的列表.
WinGetClientSize ( "窗口标题" [, "窗口文本"] ) 获取指定窗口的客户区的大小信息.
WinGetHandle ( "窗口标题" [, "窗口文本"] )  获取指定窗口的内部句柄.
WinGetPos ( "窗口标题" [, "窗口文本"] )  获取指定窗口的坐标位置和大小等属性.
WinGetProcess ( "窗口标题" [, "窗口文本"] )  获取指定窗口关联的进程ID(PID).
WinGetState ( "窗口标题" [, "窗口文本"] )  获取指定窗口的状态.
WinGetText ( "窗口标题" [, "窗口文本"] )  获取指定窗口中的文本.
WinGetTitle ( "窗口标题" [, "窗口文本"] )  获取指定窗口的完整标题名.
WinKill ( "窗口标题" [, "窗口文本"] ) 强行关闭指定窗口.
WinList ( ["窗口标题" [, "窗口文本"]] )  获取窗口列表.
WinMenuSelectItem ( "窗口标题", "窗口文本", "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项" [, "菜单项"]]]]]] )  调用窗口中的某个菜单项目.
WinMinimizeAll ( ) 最小化全部窗口.
WinMinimizeAllUndo ( ) 撤销此前的 WinMinimizeAll 的效果.
WinMove ( "窗口标题", "窗口文本", X坐标, Y坐标 [, 宽度 [, 高度[,速度]]] )  移动指定的窗口或调整窗口的大小.
WinSetOnTop ( "窗口标题", "窗口文本", 标志 )  设置指定窗口的"总是在顶层"属性.
WinSetState ( "窗口标题", "窗口文本", 标志 )  显示,隐藏,最小化,最大化或还原一个窗口.
WinSetTitle ( "窗口标题", "窗口文本", "新标题" ) 修改指定窗口的标题.
WinSetTrans ( "窗口标题", "窗口文本", 透明度 ) 设置指定窗口的透明度(仅支持Windows 2000/XP或更高版本) 
WinWait ( "窗口标题" [, "窗口文本" [, 超时时间]] ) 暂停脚本的执行直至指定窗口存在(出现)为止.
WinWaitActive ( "窗口标题"[, "窗口文本"[, 超时时间]] ) 暂停脚本的执行直至指定窗口被激活(成为活动状态)为止.
WinWaitClose ( "窗口标题" [, "窗口文本" [, 超时时间]] )  暂停脚本的执行直至所指定窗口不再存在为止.
WinWaitNotActive ( "窗口标题" [, "窗口文本" [, 超时时间]] )  暂停脚本的执行直至指定窗口不是激活状态为止.
_ArrayAdd(ByRef $avArray, $vValue) 添加一个指定的值到已存在的数组的末尾. (需要: #Include <Array.au3>)
_ArrayBinarySearch(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0]]) 使用二进制搜索算法搜索一个一维数组. (需要: #Include <Array.au3>)
_ArrayCombinations(ByRef $avArray, $iSet [, $sDelim = ""]) 返回所选数组每个元素相互可能出现的组合的一个数组. (需要: #Include <Array.au3>)
_ArrayConcatenate(ByRef $avArrayTarget, Const ByRef $avArraySource [, $iStart = 0]) 连接(合并)两个数组. (需要: #Include <Array.au3>)
_ArrayDelete(ByRef $avArray, $iElement) 从指定数组中删除指定的元素. (需要: #Include <Array.au3>)
_ArrayDisplay(Const ByRef $avArray [, $sTitle = "Array: ListView Display" [, $iItemLimit = -1 [, $iTranspose = 0 [, $sSeparator = "" [, $sReplace = "|" [, $sHeader = ""]]]]]]) 在一个列表视图(listview)中显示指定的一维或二维数组. (需要: #include <Array.au3>)
_ArrayFindAll(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare = 0 [, $iSubItem = 0]]]]]) 查找一维或二维数组的两个元素之间使用 _ArraySearch() 找到的所有匹配元素 (需要: #Include <Array.au3>)
_ArrayInsert(ByRef $avArray, $iElement [, $vValue = ""]) 添加一个新值到数组的指定位置. (需要: #Include <Array.au3>)
_ArrayMax(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]]) 返回数组中的最大值. (需要: #Include <Array.au3>)
_ArrayMaxIndex(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]]) 返回数组中最大值的索引. (需要: #Include <Array.au3>)
_ArrayMin(Const ByRef $avArray [, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]]) 返回数组中的最小值. (需要: #Include <Array.au3>)
_ArrayMinIndex(Const ByRef $avArray[, $iCompNumeric = 0 [, $iStart = 0 [, $iEnd = 0]]]) 返回数组中最小值的索引. (需要: #Include <Array.au3>)
_ArrayPermute(ByRef $avArray [, $sDelim = ""]) 返回一个原始数组中所有元素经过改序后的数组 (需要: #Include <Array.au3>)
_ArrayPop(ByRef $avArray) 返回数组中最后一个元素, 同时删除这个元素. (需要: #Include <Array.au3>)
_ArrayPush(ByRef $avArray, $vValue [, $iDirection = 0]) 添加新值而不增加数组大小, 在结尾插入新值则删除第一个,反之亦然. (需要: #Include <Array.au3>)
_ArrayReverse(ByRef $avArray [, $iStart = 0 [, $iEnd = 0]]) 反序排列数组. (需要: #Include <Array.au3>)
_ArraySearch(Const ByRef $avArray, $vValue [, $iStart = 0 [, $iEnd = 0 [, $iCase = 0 [, $iCompare= 0 [, $iForward = 1 [, $iSubItem = -1]]]]]]) 在一维或二维数组内部进行进行搜索. 类似于_ArrayBinarySearch(), 但数组不需要排序. (需要: #Include <Array.au3>)
_ArraySort(ByRef $avArray[, $iDescending = 0 [, $iStart = 0 [, $iEnd = 0 [, $iSubItem = 0]]]]) 使用快速排序法/插入排序法对一个一维或者二维数组进行排序. (需要: #Include <Array.au3>)
_ArraySwap(ByRef $vItem1, ByRef $vItem2) 交换数组的两个元素. (需要: #Include <Array.au3>)
_ArrayToClip(Const ByRef $avArray [, $iStart = 0 [, $iEnd = 0]]) 发送数组内容到剪贴板, 每个元素由回车换行分隔. (需要: #Include <Array.au3>)
_ArrayToString(Const ByRef $avArray [, $sDelim = "|" [, $iStart = 0 [, $iEnd = 0]]]) 将数组转化为一个由指定分隔符分割的单一字符串中. (需要: #Include <Array.au3>)
_ArrayTrim(ByRef $avArray, $iTrimNum [, $iDirection = 0 [, $iStart = 0 [, $iEnd = 0]]]) 从一个数组中的所有要素删除一定数目的字符. (需要: #Include <Array.au3>)
_ArrayUnique($aArray [, $iDimension = 1 [, $iBase = 0 [, $iCase = 0 [, $vDelim = "|"]]]]) 返回一维数组的独特元素. (需要: #Include <Array.au3>)
_Assert($sCondition [,$bExit = True [,$nCode = 0x7FFFFFFF [,$sLine = @ScriptLineNumber]]]) 插入显示语句错误的消息 (需要: #include <Debug.au3>)
_ChooseColor([$iReturnType = 0 [, $iColorRef = 0 [, $iRefType = 0 [, $hWndOwnder = 0]]]]) 创建一个颜色对话框使用户可以选择颜色 (需要: #Include <Misc.au3>)
_ChooseFont([$sFontName = "Courier New" [, $iPointSize = 10 [, $iColorRef = 0 [, $iFontWeight = 0 [, $iItalic = False [, $iUnderline = False [, $iStrikethru = False [, $hWndOwner = 0]]]]]]]]) 创建字体选择对话框,使用户能够选择逻辑字体属性. (需要: #Include <Misc.au3>)
_ClipBoard_ChangeChain($hRemove, $hNewNext) 从剪切板查看器中移除指定窗口链 (需要: #Include <Clipboard.au3>)
_ClipBoard_Close() 关闭剪切板 (需要: #Include <Clipboard.au3>)
_ClipBoard_CountFormats() 返回当前剪切板中不同数据格式的数量 (需要: #Include <Clipboard.au3>)
_ClipBoard_Empty() 清空剪切板并释放剪切板数据句柄. (需要: #Include <Clipboard.au3>)
_ClipBoard_EnumFormats($iFormat) 枚举剪切板中当前有效的数据格式 (需要: #Include <Clipboard.au3>)
_ClipBoard_FormatStr($iFormat) 返回一个标准剪切板格式中用字符串表示的格式(返回剪切板数据格式) (需要: #Include <Clipboard.au3>)
_ClipBoard_GetData([$iFormat = 1]) 使用返回剪切板中指定格式的数据 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetDataEx([$iFormat = 1]) 使用返回剪切板中指定格式的数据 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetFormatName($iFormat) 返回指定注册的格式的名称 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetOpenWindow() 返回当前打开剪切板的程序的窗口句柄 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetOwner() 返回剪切板的当前所有者窗口句柄 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetPriorityFormat($aFormats) 返回指定列表中第一个有效的剪切板格式 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetSequenceNumber() 返回当前窗口状态的剪切板次序 (需要: #Include <Clipboard.au3>)
_ClipBoard_GetViewer() 检索剪贴板查看器中的第一个窗口链句柄 (需要: #Include <Clipboard.au3>)
_ClipBoard_IsFormatAvailable($iFormat) 确定剪贴板是否包含指定格式的数据 (需要: #Include <Clipboard.au3>)
_ClipBoard_Open($hOwner) 打开剪切板并防止其它程序修改剪切板 (需要: #Include <Clipboard.au3>)
_ClipBoard_RegisterFormat($sFormat) 注册一个新的剪切板格式 (需要: #Include <Clipboard.au3>)
_ClipBoard_SetData($vData[, $iFormat = 1]) 使用指定格式放置一个数据到剪切板 (需要: #Include <Clipboard.au3>)
_ClipBoard_SetDataEx(ByRef $hMemory [, $iFormat = 1]) 使用一个指定的剪切板格式替换剪切板中的数据 (需要: #Include <Clipboard.au3>)
_ClipBoard_SetViewer($hViewer) 添加指定窗口到剪贴板查看器链中 (需要: #Include <Clipboard.au3>)
_ClipPutFile($sFile [, $sSeparator = "|"]) 就像资源管理器一样复制文件到剪切板. (需要: #Include <Misc.au3>)
_ColorConvertHSLtoRGB($avArray) 转换 HSL 颜色到 RGB 颜色. (需要: #Include <Color.au3>)
_ColorConvertRGBtoHSL($avArray) 转换 RGB 颜色到 HSL 颜色. (需要: #Include <Color.au3>)
_ColorGetBlue($nColor) 返回指定RGB颜色的蓝色成分. (需要: #Include <Color.au3>)
_ColorGetCOLORREF($nColor) 返回一个 COLORREF 颜色组成成分的数组. (需要: #Include <Color.au3>)
_ColorGetGreen($nColor) 返回指定RGB颜色的绿色成分. (需要: #Include <Color.au3>)
_ColorGetRed($nColor) 返回指定RGB颜色的红色成分. (需要: #Include <Color.au3>)
_ColorGetRGB($nColor) 返回 RGB 颜色中红绿蓝(Red,Green,Blue)颜色值的数组. (需要: #Include <Color.au3>)
_ColorSetCOLORREF($aColor) 返回一个 COLORREF 颜色. (需要: #Include <Color.au3>)
_ColorSetRGB($aColor) 返回 RGB 颜色 (需要: #Include <Color.au3>)
_Crypt_DecryptData($vData, $vCryptKey, $iALG_ID [, $fFinal = True]) 使用提供的密钥解密数据 (需要: #Include <Crypt.au3>)
_Crypt_DecryptFile($sSourceFile, $sDestinationFile, $vCryptKey, $iALG_ID) 使用指定的密钥和算法解密文件 (需要: #Include <Crypt.au3>)
_Crypt_DeriveKey($vPassword, $iALG_ID [, $iHash_ALG_ID = $CALG_MD5 ] ) 用算法和密码创建密钥 (需要: #Include <Crypt.au3>)
_Crypt_DestroyKey($hCryptKey) 释放密钥使用的资源 (需要: #Include <Crypt.au3>)
_Crypt_EncryptData($vData, $vCryptKey, $iALG_ID [, $fFinal = True]) 使用提供的密钥加密数据 (需要: #Include <Crypt.au3>)
_Crypt_EncryptFile($sSourceFile, $sDestinationFile, $vCryptKey, $iALG_ID) 以指定的密钥和算法加密文件 (需要: #Include <Crypt.au3>)
_Crypt_HashData($vData, $iALG_ID [, $fFinal = True [, $hCryptHash = 0]]) 以指定算法散列化数据 (需要: #Include <Crypt.au3>)
_Crypt_HashFile($sFile, $iALG_ID) 以指定算法将字符串散列化 (需要: #Include <Crypt.au3>)
_Crypt_Shutdown() 关闭加密库 (需要: #Include <Crypt.au3>)
_Crypt_Startup() 初始化加密库 (需要: #include <Crypt.au3>)
_DateAdd($sType, $iValToAdd, $sDate) 计算一个指定的日期和间隔后的新日期. (需要: #Include <Date.au3>)
_DateDayOfWeek($iDayNum [, $iShort = 0]) 按指定日期返回一个星期名称. (需要: #Include <Date.au3>)
_DateDaysInMonth($iYear, $iMonthNum) 返回基于指定年的指定月的月中的天数 (需要: #Include <Date.au3>)
_DateDiff($sType, $sStartDate, $sEndDate) 返回两个日期的不同, 使用指定类型表达. (需要: #Include <Date.au3>)
_DateIsLeapYear($iYear) 检查指定年份是不是闰年. (需要: #Include <Date.au3>)
_DateIsValid($sDate) 检查给定的日期是否是一个有效的日期(格式). (需要: #Include <Date.au3>)
_DateTimeFormat($sDate, $sType) 返回电脑的区域设置中的日期格式 (需要: #Include <Date.au3>)
_DateTimeSplit($sDate, ByRef $asDatePart, ByRef $iTimePart) 将包含日期和时间的字符串拆分为两个数组 (需要: #Include <Date.au3>)
_DateToDayOfWeek($iYear, $iMonth, $iDay) 返回给定日期在其所在周内的星期序号 (需要: #Include <Date.au3>)
_DateToDayOfWeekISO($iYear, $iMonth, $iDay) 返回一个指定日期的国际标准(ISO)星期(n)数. (需要: #Include <Date.au3>)
_DateToDayValue($iYear, $iMonth, $iDay) 返回从BC 4713 年一月一日中午至今的天数,用于得到格里日期(日常说的阳历,西历). (需要: #Include <Date.au3>)
_DateToMonth($iMonth [, $ishort = 0]) 返回指定月份的名称. (需要: #Include <Date.au3>)
_Date_Time_CompareFileTime($pFileTime1, $pFileTime2) 比较两个文件时间 (需要: #Include <Date.au3>)
_Date_Time_DOSDateTimeToArray($iDosDate, $iDosTime) 解码一个 DOS 日期/时间 为一个数组 (需要: #Include <Date.au3>)
_Date_Time_DOSDateTimeToFileTime($iFatDate, $iFatTime) 转换一个 MS-DOS 日期和时间值到一个文件时间 (需要: #Include <Date.au3>)
_Date_Time_DOSDateTimeToStr($iDosDate, $iDosTime) 解码一个 DOS 日期到一个字符串 (需要: #Include <Date.au3>)
_Date_Time_DOSDateToArray($iDosDate) 解码一个 DOS 日期到一个数组 (需要: #Include <Date.au3>)
_Date_Time_DOSDateToStr($iDosDate) 解码一个 DOS 日期到一个字符串 (需要: #Include <Date.au3>)
_Date_Time_DOSTimeToArray($iDosTime) 解码一个 DOS 时间到一个数组 (需要: #Include <Date.au3>)
_Date_Time_DOSTimeToStr($iDosTime) 解码一个 DOS 时间到字符串 (需要: #Include <Date.au3>)
_Date_Time_EncodeFileTime($iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]]) 编码并返回一个 $tagFILETIME 数据结构 (需要: #Include <Date.au3>)
_Date_Time_EncodeSystemTime($iMonth, $iDay, $iYear [, $iHour = 0 [, $iMinute = 0 [, $iSecond = 0 [, $iMSeconds = 0]]]]) 编码并返回一个 $tagSYSTEMTIME 数据结构 (需要: #Include <Date.au3>)
_Date_Time_FileTimeToArray(ByRef $tFileTime) 解码一个文件时间到数组 (需要: #Include <Date.au3>)
_Date_Time_FileTimeToDOSDateTime($pFileTime) 转换 MS-DOS 日期与时间值到一个文件时间 (需要: #Include <Date.au3>)
_Date_Time_FileTimeToLocalFileTime($pFileTime) 转换一个基于全球协调时(UTC)的文件时间到本地文件时间 (需要: #Include <Date.au3>)
_Date_Time_FileTimeToStr(ByRef $tFileTime [, $bFmt = 0]) 解码一个文件时间到一个日期/时间字符串 (需要: #Include <Date.au3>)
_Date_Time_FileTimeToSystemTime($pFileTime) 转换一个文件时间到系统时间格式 (需要: #Include <Date.au3>)
_Date_Time_GetFileTime($hFile) 返回一个包含文件创建,访问,修改的日期和时间 (需要: #Include <Date.au3>)
_Date_Time_GetLocalTime() 返回当前的本地日期和时间 (需要: #Include <Date.au3>)
_Date_Time_GetSystemTime() 返回一个使用全球协调时(UTC)表示的当前系统时间 (需要: #Include <Date.au3>)
_Date_Time_GetSystemTimeAdjustment() 确定系统是否进行定期时间调整 (需要: #Include <Date.au3>)
_Date_Time_GetSystemTimeAsFileTime() 返回一个使用全球协调时(UTC)表示的当前系统时间 (需要: #Include <Date.au3>)
_Date_Time_GetSystemTimes() 返回系统时间信息 (需要: #Include <Date.au3>)
_Date_Time_GetTickCount() 返回从系统启动到当前时间经过的毫秒数 (需要: #Include <Date.au3>)
_Date_Time_GetTimeZoneInformation() 返回当前时区设置 (需要: #Include <Date.au3>)
_Date_Time_LocalFileTimeToFileTime($pLocalTime) 转换一个本地文件时间到一个文件时间(基于UTC) (需要: #Include <Date.au3>)
_Date_Time_SetFileTime($hFile, $pCreateTime, $pLastAccess, $pLastWrite) 设置文件创建,访问,修改日期与时间 (需要: #Include <Date.au3>)
_Date_Time_SetLocalTime($pSystemTime) 设置当前本地日期与时间 (需要: #Include <Date.au3>)
_Date_Time_SetSystemTime($pSystemTime) 设置当前系统时间与日期, 使用 UTC 表达 (需要: #Include <Date.au3>)
_Date_Time_SetSystemTimeAdjustment($iAdjustment, $fDisabled) 启用或禁用系统时钟定期调整 (需要: #Include <Date.au3>)
_Date_Time_SetTimeZoneInformation($iBias, $sStdName, $tStdDate, $iStdBias, $sDayName, $tDayDate, $iDayBias) 设置当前时区设置 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToArray(ByRef $tSystemTime) 解码一个系统时间到一个数组 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToDateStr(ByRef $tSystemTime [, $bFmt = 0]) 解码一个系统时间到一个日期字符串 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToDateTimeStr(ByRef $tSystemTime [, $bFmt = 0]) 解码一个系统时间到一个日期/时间字符串 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToFileTime($pSystemTime) 转换一个系统时间到文件时间格式 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToTimeStr(ByRef $tSystemTime) 解码一个系统时间到一个时间字符串 (需要: #Include <Date.au3>)
_Date_Time_SystemTimeToTzSpecificLocalTime($pUTC [, $pTimeZone = 0]) UTC时间转换为指定时区的对应本地时间 (需要: #Include <Date.au3>)
_Date_Time_TzSpecificLocalTimeToSystemTime($pLocalTime [, $pTimeZone = 0]) 将本地时间转变为UTC时间 (需要: #Include <Date.au3>)
_DayValueToDate($iJulianDate, ByRef $iYear, ByRef $iMonth, ByRef $iDay) 添加一个指定的天数到BC 4713 年1月1日中午,并返回一个格利日期(Gregorian date,日常说的阳历,西历). (需要: #Include <Date.au3>)
_DebugBugReportEnv( ) 输出一个包含错误信息字符串的提交报告. (需要: #include <Debug.au3>)
_DebugOut ( $sOutput [, $bActivate] ) 输出调试信息到 _DebugSetup() 设置的调试会话框 (需要: #include <Debug.au3>)
_DebugReport ( $sData [,$bLastError = False [,$bExit = False]]) 写调试会话 (需要: #include <Debug.au3>)
_DebugReportEx($sData [,$bLastError = False [,$bExit = False]]) 格式化写入调试会话框的信息 (需要: #include <Debug.au3>)
_DebugReportVar ($sVarname, $vVar [,$bErrExt = False]) 将变量的结果写入调试会话 (需要: #include <Debug.au3>)
_DebugSetup($sTitle = Default, $bBugReportInfos = False, $vReportType = 1, $sLogFile = "") 使用指定的报告设置调试会话 (需要: #include <Debug.au3>)
_Degree ( $nRadians ) 将弧度转换为角度. (需要: #include <Math.au3>)
_EventLog__Backup($hEventLog, $sFileName) 将事件日志保存到一个备份文件 (需要: #Include <EventLog.au3>)
_EventLog__Clear($hEventLog, $sFileName) 清空事件日志 (需要: #Include <EventLog.au3>)
_EventLog__Close($hEventLog) 关闭一个事件日志读取句柄. (需要: #Include <EventLog.au3>)
_EventLog__Count($hEventLog) 获取事件日志中记录的数量 (需要: #Include <EventLog.au3>)
_EventLog__DeregisterSource($hEventLog) 关闭一个事件日志写入句柄. (需要: #Include <EventLog.au3>)
_EventLog__Full($hEventLog) 检查事件日志是否已满 (需要: #Include <EventLog.au3>)
_EventLog__Notify($hEventLog, $hEvent) 使应用程序接受一个事件通知 (需要: #Include <EventLog.au3>)
_EventLog__Oldest($hEventLog) 获取事件日志中最旧记录的绝对记录数 (需要: #Include <EventLog.au3>)
_EventLog__Open($sServerName, $sSourceName) 打开日志的句柄 (需要: #Include <EventLog.au3>)
_EventLog__OpenBackup($sServerName, $sFileName) 打开一个日志文件备份的句柄 (需要: #Include <EventLog.au3>)
_EventLog__Read($hEventLog [, $fRead = True [, $fForward = True [, $iOffset = 0]]]) 从事件日志读取一个值 (需要: #Include <EventLog.au3>)
_EventLog__RegisterSource($sServerName, $sSourceName) 获取已注册的指定事件日志的句柄 (需要: #Include <EventLog.au3>)
_EventLog__Report($hEventLog, $iType, $iCategory, $iEventID, $sUserName, $sDesc, $aData) 事件写入指定事件日志的末端 (需要: #Include <EventLog.au3>)
_ExcelBookAttach($s_string [, $s_mode = "FilePath"]) 连接到首个存在的使基于选择模式与搜索字符串相匹配的Microsoft Excel实例 (需要: #Include <Excel.au3>)
_ExcelBookClose($oExcel [, $fSave = 1 [, $fAlerts = 0]]) 关闭活动工作表并移除指定的 Excel 对象. (需要: #Include <Excel.au3>)
_ExcelBookNew([$fVisible = 1]) 创建一个新的工作表并返回一个对象标识(ID). (需要: #Include <Excel.au3>)
_ExcelBookOpen($sFilePath [, $fVisible = 1 [, $fReadOnly = False [, $sPassword = "" [, $sWritePassword = ""]]]]) 打开一个存在的工作表并返回它的对象标识. (需要: #Include <Excel.au3>)
_ExcelBookSave($oExcel [, $fAlerts = 0]) 保存指定Excel对象的活动工作表. (需要: #Include <Excel.au3>)
_ExcelBookSaveAs($oExcel, $sFilePath [, $sType = "xls" [, $fAlerts = 0 [, $fOverWrite = 0 [, $sPassword = "" [, $sWritePassword = "" [, $iAccessMode = 1 [, $iConflictResolution = 2]]]]]]]) 使用新文件名或格式保存指定Excel对象的活动工作簿 (需要: #Include <Excel.au3>)
_ExcelColumnDelete($oExcel, $iColumn [, $iNumCols = 1]) 删除活动工作表中一定数量的列 (需要: #Include <Excel.au3>)
_ExcelColumnInsert($oExcel, $iColumn [, $iNumCols = 1]) 向活动工作表中插入列 (需要: #Include <Excel.au3>)
_ExcelFontSetProperties($oExcel, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1 [, $fBold = False [, $fItalic = False [, $fUnderline = False]]]]]]) 设置Excel对象一个范围内的粗体, 斜体, 及下划线字体属性 (需要: #Include <Excel.au3>)
_ExcelHorizontalAlignSet($oExcel, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1 [, $sHorizAlign = "left"]]]]) 设置单元格水平对齐方式. (需要: #Include <Excel.au3>)
_ExcelHyperlinkInsert($oExcel, $sLinkText, $sAddress, $sScreenTip, $sRangeOrRow [, $iColumn = 1]) 活动页面中插入一个超链接. (需要: #Include <Excel.au3>)
_ExcelNumberFormat($oExcel, $sFormat, $sRangeOrRowStart [, $iColStart = 1 [, $iRowEnd = 1 [, $iColEnd = 1]]]) 在指定 R1C1 范围应用特定格式的单元格. (需要: #Include <Excel.au3>)
_ExcelReadArray($oExcel, $iStartRow, $iStartColumn, $iNumCells [, $iDirection = 0 [, $iIndexBase = 0]]) 使用活动工作表的 1 行或 1 列数据创建数组. (需要: #Include <Excel.au3>)
_ExcelReadCell($oExcel, $sRangeOrRow [, $iColumn = 1]) 从一个指定Excel对象的活动工作表读取(单元格)信息. (需要: #Include <Excel.au3>)
_ExcelReadSheetToArray($oExcel [, $iStartRow = 1 [, $iStartColumn = 1 [, $iRowCnt = 0 [, $iColCnt = 0 [, $iColShift = False]]]]]) 用活动工作表的行/列创建二维数组. (需要: #Include <Excel.au3>)
_ExcelRowDelete($oExcel, $iRow [, $iNumRows = 1]) 删除活动工作表中的一行或多行. (需要: #Include <Excel.au3>)
_ExcelRowInsert($oExcel, $iRow [, $iNumRows = 1]) 将一定数量的行插入工作表 (需要: #Include <Excel.au3>)
_ExcelSheetActivate($oExcel, $vSheet) 使用表名称或编号激活指定工作表. (需要: #Include <Excel.au3>)
_ExcelSheetAddNew($oExcel [, $sName = ""]) 添加一个新的工作表到工作区 - 名称可选. (需要: #Include <Excel.au3>)
_ExcelSheetDelete($oExcel, $vSheet [, $fAlerts = False]) 使用表名称或编号删除指定表. (需要: #Include <Excel.au3>)
_ExcelSheetList($oExcel) 返回工作簿中所有工作表名称列表的数组. (需要: #Include <Excel.au3>)
_ExcelSheetMove($oExcel, $vMoveSheet [, $vRelativeSheet = 1 [, $fBefore = True]]) 移动工作表 (需要: #Include <Excel.au3>)
_ExcelSheetNameGet($oExcel) 返回活动表的名称 (需要: #Include <Excel.au3>)
_ExcelSheetNameSet($oExcel, $sSheetName) 设置活动工作表名称. (需要: #Include <Excel.au3>)
_ExcelWriteArray($oExcel, $iStartRow, $iStartColumn, $aArray [, $iDirection = 0 [, $iIndexBase = 0]]) 将数组写入到指定Excel对象活动表上的行或列 (需要: #Include <Excel.au3>)
_ExcelWriteCell($oExcel, $sValue, $sRangeOrRow [, $iColumn = 1]) 将信息写入指定 Excel 对象的活动工作表单元格. (需要: #Include <Excel.au3>)
_ExcelWriteFormula($oExcel, $sFormula, $sRangeOrRow [, $iColumn = 1]) 将公式写入指定 Excel 对象活动工作表单元格中. (需要: #Include <Excel.au3>)
_ExcelWriteSheetFromArray($oExcel, ByRef $aArray [, $iStartRow = 1 [, $iStartColumn = 1 [, $iRowBase = 1 [, $iColBase = 1]]]]) 写入一个二维数组到活动工作表 (需要: #Include <Excel.au3>)
_FileCountLines($sFilePath) 返回指定文件的行数. (需要: #Include <File.au3>)
_FileCreate($sFilePath) 创建或者清零指定的文件. (需要: #Include <File.au3>)
_FileListToArray($sPath [, $sFilter = "*" [, $iFlag = 0]]) 列出指定路径下的文件和/或文件夹 (类似使用 Dir /B命令) (需要: #Include <File.au3>)
_FilePrint($s_File [, $i_Show = @SW_HIDE]) 打印一个纯文本文件. (需要: #Include <File.au3>)
_FileReadToArray($sFilePath, ByRef $aArray) 读取一个指定文件到一个数组. (需要: #Include <File.au3>)
_FileWriteFromArray($sFilePath, $aArray[, $iBase = 0[, $iUBound = 0[, $sDelimeter = "|"]]]) 将数组写入到指定的文件 (需要: #include <File.au3>)
_FileWriteLog($sLogPath, $sLogMsg [, $iFlag = -1]) 写入一个当前日期,时间和一个指定文本到一个日志文件. (需要: #include <File.au3>)
_FileWriteToLine($sFile, $iLine, $sText [, $fOverWrite = 0]) 写入文本到一个文件的指定行. (需要: #Include <File.au3>)
_FTP_Close($l_InternetSession) 关闭 _FTP_Open 函数打开的会话. (需要: #Include <FTPEx.au3>)
_FTP_Command($l_FTPSession, $s_FTPCommand [, $l_Flags = 0x00000001 [, $l_ExpectResponse = 0 [, $l_Context = 0]]]) 发送一个命令到 FTP 服务器. (需要: #Include <FTPEx.au3>)
_FTP_Connect($l_InternetSession, $s_ServerName, $s_Username, $s_Password [, $i_Passive = 0 [, $i_ServerPort = 0 [, $l_Service = 1 [, $l_Flags = 0 [, $l_Context = 0]]]]]) 连接到一个 FTP 服务器. (需要: #Include <FTPEx.au3>)
_FTP_DecodeInternetStatus($dwInternetStatus) 解码一个接收(received) Internet 状态. (需要: #Include <FTPEx.au3>)
_FTP_DirCreate($l_FTPSession, $s_Remote) 在 FTP 服务器上建立一个目录. (需要: #Include <FTPEx.au3>)
_FTP_DirDelete($l_FTPSession, $s_Remote) 删除一个 FTP 服务器上的目录. (需要: #Include <FTPEx.au3>)
_FTP_DirGetCurrent($l_FTPSession) 得到FTP服务器当前目录. (需要: #Include <FTPEx.au3>)
_FTP_DirPutContents($l_InternetSession, $s_LocalFolder, $s_RemoteFolder, $b_RecursivePut [, $l_Context]) 如果选定 Recursivley, 将文件夹放入 FTP 服务器. (需要: #Include <FTPEx.au3>)
_FTP_DirSetCurrent($l_FTPSession, $s_Remote) 设置 FTP 服务器上的当前目录. (需要: #Include <FTPEx.au3>)
_FTP_FileClose($l_InternetSession) 关闭由 _FTP_FileOpen 返回的句柄. (需要: #Include <FTPEx.au3>)
_FTP_FileDelete($l_FTPSession, $s_RemoteFile) 从 FTP 服务器删除一个文件. (需要: #Include <FTPEx.au3>)
_FTP_FileGet($l_FTPSession, $s_RemoteFile, $s_LocalFile [, $fFailIfExists = False, [ $dwFlagsAndAttributes = 0 [, $l_Flags = 0 [, $l_Context = 0]]]]) 从 FTP 服务器上得到一个文件. (需要: #Include <FTPEx.au3>)
_FTP_FileGetSize($l_FTPSession, $s_FileName) 得到 FTP 服务器上一个文件的文件大小. (需要: #Include <FTPEx.au3>)
_FTP_FileOpen($hConnect, $lpszFileName [, $dwAccess = 0x80000000 [, $dwFlags = 2 [, $dwContext = 0]]]) 打开 FTP 服务器上的远程文件供读/写. (需要: #Include <FTPEx.au3>)
_FTP_FilePut($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $l_Flags = 0 [, $l_Context = 0]]) 在 FTP 服务器上放置(上传)一个文件. (需要: #Include <FTPEx.au3>)
_FTP_FileRead($h_File, $dwNumberOfBytesToRead) 使用 _FTP_FileOpen() 返回的文件句柄读取数据 (需要: #Include <FTPEx.au3>)
_FTP_FileRename($l_FTPSession, $s_Existing, $s_New) 重命名一个 FTP 服务器上的文件. (需要: #Include <FTPEx.au3>)
_FTP_FileTimeLoHiToStr($LoDWORD, $HiDWORD [, $bFmt = 0]) 转换文件时间低位和高位到一个字符串. (需要: #include <FTPEx.au3>)
_FTP_FindFileClose($h_Handle) 删除查找文件句柄. (需要: #Include <FTPEx.au3>)
_FTP_FindFileFirst($l_FTPSession, $s_RemotePath, ByRef $h_Handle [, $l_Flags = 0 [, $l_Context = 0]]) 查找 FTP 服务器上第一个文件. (需要: #Include <FTPEx.au3>)
_FTP_FindFileNext($h_Handle) 查找 FTP 服务器上的下一个文件. (需要: #Include <FTPEx.au3>)
_FTP_GetLastResponseInfo(ByRef $dwError, ByRef $szMessage) 线程调用这个函数检索最后一个错误描述或服务器的响应 (需要: #Include <FTPEx.au3>)
_Ftp_ListToArray($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $l_Context]]]) 获取当前远程目录的文件名, 目录或两项. (需要: #Include <FTPEx.au3>)
_Ftp_ListToArray2D($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $l_Context]]]) 获取当前远程目录文件名和文件大小. (需要: #Include <FTPEx.au3>)
_FTP_ListToArrayEx($l_FTPSession [, $Return_Type = 0 [, $l_Flags = 0 [, $b_Fmt = 1 [, $l_Context]]]]) 获取当前远程目录的文件/目录的名称, 大小, 属性和时间. (需要: #include <FTPEx.au3>)
_FTP_Open($s_Agent[, $l_AccessType = 1 [, $s_ProxyName = '' [, $s_ProxyBypass = '' [, $l_Flags = 0]]]] ) 打开一个 FTP 会话. (需要: #Include <FTPEx.au3>)
_FTP_ProgressDownload($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $FunctionToCall = ""]) 以二进制模式下载文件,并显示(或通过调用用户自定义函数)进度窗口. (需要: #Include <FTPEx.au3>)
_FTP_ProgressUpload($l_FTPSession, $s_LocalFile, $s_RemoteFile [, $FunctionToCall = ""]) 以二进制模式上传文件,并显示(或通过调用用户自定义函数)进度窗口 (需要: #Include <FTPEx.au3>)
_FTP_SetStatusCallback ( $l_InternetSession, $sFunctionName) 注册回调函数,WinInet 函数可以调用一项操作中的进度.  (需要: #Include <FTPEx.au3>)
_GDIPlus_ArrowCapCreate($fHeight, $fWidth [, $bFilled = True]) 创建高度和宽度可调的箭头线帽 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapDispose($hCap) 释放可调节箭头线帽对象 (需要: #include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetFillState($hArrowCap) 获取箭头帽填充状态 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetHeight($hArrowCap) 获取箭头帽高度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetMiddleInset($hArrowCap) 获取插入值 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapGetWidth($hArrowCap) 获取箭头帽宽度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetFillState($hArrowCap, $bFilled = True) 设置箭头帽填充状态 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetHeight($hArrowCap, $fHeight) 设置箭头帽高度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetMiddleInset($hArrowCap, $fInset) 获取插入值 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ArrowCapSetWidth($hArrowCap, $fWidth) 设置箭头帽宽度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapCloneArea($hBmp, $iLeft, $iTop, $iWidth, $iHeight [, $iFormat = 0x00021808]) 创建指定坐标和格式的位图对象克隆 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromFile($sFileName) 从文件中创建位图对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromGraphics($iWidth, $iHeight, $hGraphics) 在一个图形对象上创建基于宽度和高度的位图对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapCreateFromHBITMAP($hBmp[, $hPal = 0]) 从位图句柄创建位图对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapCreateHBITMAPFromBitmap($hBitmap[, $iARGB = 0xFF000000]) 从位图对象创建位图句柄 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapDispose($hBitmap) 释放一个位图对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapLockBits($hBitmap, $iLeft, $iTop, $iWidth, $iHeight [ , $iFlags = $GDIP_ILMREAD [, $iFormat = $GDIP_PXF32RGB ]]) 为读/写操作锁定部分位图 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BitmapUnlockBits($hBitmap, $tBitmapData) 解锁 _GDIPlus_BitmapLockBits 锁定的部分位图 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushClone($hBrush) 克隆画笔对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushCreateSolid([$iARGB = 0xFF000000]) 创建实心画笔对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushDispose($hBrush) 释放画笔对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushGetSolidColor($hBrush, [$iARGB = 0xFF000000]) 获取实心画笔对象颜色 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushGetType($hBrush) 获取画刷对象的类型 (需要: #Include <GDIPlus.au3>)
_GDIPlus_BrushSetSolidColor($hBrush, [$iARGB = 0xFF000000]) 设置实心画笔对象颜色 (需要: #Include <GDIPlus.au3>)
_GDIPlus_CustomLineCapDispose($hCap) 释放一个自定义线 cap 对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_Decoders() 获取包含图像解码器信息的数组 (需要: #Include <GDIPlus.au3>)
_GDIPlus_DecodersGetCount() 获取图像解码器数量 (需要: #Include <GDIPlus.au3>)
_GDIPlus_DecodersGetSize() 获取 _GDIPlus_GetImageDecoders 返回结构总的大小 (需要: #Include <GDIPlus.au3>)
_GDIPlus_DrawImagePoints($hGraphic, $hImage, $nULX, $nULY, $nURX, $nURY, $nLLX, $nLLY[, $count = 3]) 图像绘制到指定的位置. (需要: #Include <GDIPlus.au3>)
_GDIPlus_Encoders() 获取编码器图像信息的数组 (需要: #Include <GDIPlus.au3>)
_GDIPlus_EncodersGetCLSID($sFileExt) 返回指定图像文件类型的编码器 CLSID (需要: #Include <GDIPlus.au3>)
_GDIPlus_EncodersGetCount() 获取图像编码器数量 (需要: #Include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamList($hImage, $sEncoder) 获取图像编码器参数列表 (需要: #Include <GDIPlus.au3>)
_GDIPlus_EncodersGetParamListSize($hImage, $sEncoder) 获取图像编码器参数列表的大小 (需要: #Include <GDIPlus.au3>)
_GDIPlus_EncodersGetSize() 获取 _GDIPlus_GetImageEncoders 返回的结构总大小 (需要: #Include <GDIPlus.au3>)
_GDIPlus_FontCreate($hFamily, $fSize[, $iStyle = 0[, $iUnit = 3]]) 创建一个字体对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_FontDispose($hFont) 释放一个字体对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_FontFamilyCreate($sFamily) 创建字体族对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_FontFamilyDispose($hFamily) 释放一个字体家族(Font Family)对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsClear($hGraphics[, $iARGB = 0xFF000000]) 清除图形对象指定颜色 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHDC($hDC) 从一个设备上下文(DC)创建图形对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsCreateFromHWND($hWnd) 从窗口句柄创建图形对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDispose($hGraphics) 释放一个图形对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawArc($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle[, $hPen = 0]) 绘制弧线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawBezier($hGraphics, $iX1, $iY1, $iX2, $iY2, $iX3, $iY3, $iX4, $iY4[, $hPen = 0]) 绘制贝塞尔样条线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawClosedCurve($hGraphics, $aPoints[, $hPen = 0]) 绘制封闭曲线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawCurve($hGraphics, $aPoints[, $hPen = 0]) 绘制曲线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawEllipse($hGraphics, $iX, $iY, $iWidth, $iHeight[, $hPen = 0]) 绘制椭圆 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImage($hGraphics, $hImage, $iX, $iY) 绘制图像对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRect($hGraphics, $hImage, $iX, $iY, $iW, $iH ) 图像绘制到指定的位置 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawImageRectRect($hGraphics, $hImage, $iSrcX, $iSrcY, $iSrcWidth, $iSrcHeight, $iDstX, $iDstY, $iDstWidth, $iDstHeight[, $iUnit = 2]) 绘制图像对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawLine($hGraphics, $iX1, $iY1, $iX2, $iY2[, $hPen = 0]) 绘制直线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPie($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle [, $hPen = 0]) 绘制饼图 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawPolygon($hGraphics, $aPoints[, $hPen = 0]) 绘制多边形 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawRect($hGraphics, $iX, $iY, $iWidth, $iHeight[, $hPen = 0]) 绘制一个矩形区域 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawString($hGraphics, $sString, $nX, $nY[, $sFont = "Arial"[, $fSize = 10[, $iFormat = 0]]]) 绘制字符串 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsDrawStringEx($hGraphics, $sString, $hFont, $tLayout, $hFormat, $hBrush) 使用数据结构绘制字符串 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsFillClosedCurve($hGraphics, $aPoints[, $hBrush = 0]) 填充封闭曲线 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsFillEllipse($hGraphics, $iX, $iY, $iWidth, $iHeight[, $hBrush = 0]) 填充椭圆 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPie($hGraphics, $iX, $iY, $iWidth, $iHeight, $fStartAngle, $fSweepAngle[, $hBrush = 0]) 填充饼图 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsFillPolygon($hGraphics, $aPoints[, $hBrush = 0]) 填充多边形 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsFillRect($hGraphics, $iX, $iY, $iWidth, $iHeight[, $hBrush = 0]) 填充矩形 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsGetDC($hGraphics) 获取图形的设备环境句柄 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsGetSmoothingMode($hGraphics) 获取图形对象的渲染质量 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsMeasureString($hGraphics, $sString, $hFont, $tLayout, $hFormat) 测量字符串尺寸 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsReleaseDC($hGraphics, $hDC) 释放图形对象的设备环境 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsSetSmoothingMode($hGraphics, $iSmooth) 设置图形对象绘制质量 (需要: #Include <GDIPlus.au3>)
_GDIPlus_GraphicsSetTransform($hGraphics, $hMatrix) 设置图像对象的世界坐标空间 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageDispose($hImage) 释放一个图像对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetFlags($hImage) 枚举图像的像素数据属性 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetGraphicsContext($hImage) 获取图像的图形场景 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetHeight($hImage) 获取图像高度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetHorizontalResolution($hImage) 获取以图像DPI(每英寸像素)表示的水平分辨率 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetPixelFormat($hImage) 获取图像的像素格式: 每像素位, Alpha 通道, RGB, 灰度, 索引等. (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetRawFormat($hImage) 返回文件格式的 GUID 和图像的图像格式名称 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetType($hImage) 返回图像类型(位图或图元文件) (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetVerticalResolution($hImage) 获取以图像DPI(每英寸像素)表示的垂直分辨率 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageGetWidth($hImage) 获取图像宽度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageLoadFromFile($sFileName) 创建基于文件的图像对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFile($hImage, $sFileName) 将图像保存到文件 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ImageSaveToFileEx($hImage, $sFileName, $sEncoder [, $pParams = 0]) 将图像保存到文件 (需要: #Include <GDIPlus.au3>)
_GDIPlus_MatrixCreate() 创建并初始化矩阵对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_MatrixDispose($hMatrix) 释放矩阵对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_MatrixRotate($hMatrix, $fAngle[, $bAppend = False]) 旋转矩阵 (需要: #Include <GDIPlus.au3>)
_GDIPlus_MatrixScale($hMatrix, $fScaleX, $fScaleY[, $bOrder = False]) 缩放矩阵 (需要: #Include <GDIPlus.au3>)
_GDIPlus_MatrixTranslate($hMatrix, $fOffsetX, $fOffsetY[, $bAppend = False]) 移动矩阵 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ParamAdd(ByRef $tParams, $sGUID, $iCount, $iType, $pValues) 添加值到编码器参数列表 (需要: #Include <GDIPlus.au3>)
_GDIPlus_ParamInit($iCount) 初始化编码器的参数列表 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenCreate([$iARGB = 0xFF000000[, $nWidth = 1[, $iUnit = 2]]]) 创建画笔对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenDispose($hPen) 释放一个画笔对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetAlignment($hPen) 获取画笔对齐方式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetColor($hPen) 得到画笔颜色 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetCustomEndCap($hPen) 获取自定义画笔终端线帽 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetDashCap($hPen) 获取短划线线帽样式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetDashStyle($hPen) 获取短划线样式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetEndCap($hPen) 获取画笔终点线帽 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenGetWidth($hPen) 获取画笔宽度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetAlignment($hPen[, $iAlignment = 0]) 设置画笔对齐方式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetColor($hPen, $iARGB) 设置画笔颜色 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetCustomEndCap($hPen, $hEndCap) 自定义画笔终点线帽 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetDashCap($hPen[, $iDash = 0]) 设置短划线线帽样式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetDashStyle($hPen[, $iStyle = 0]) 设置画笔短划线样式 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetEndCap($hPen, $iEndCap) 设置画笔终点线帽 (需要: #Include <GDIPlus.au3>)
_GDIPlus_PenSetWidth($hPen, $fWidth) 设置画笔宽度 (需要: #Include <GDIPlus.au3>)
_GDIPlus_RectFCreate([$nX = 0[, $nY = 0[, $nWidth = 0[, $nHeight = 0]]]]) 创建 $tagGDIPRECTF 结构 (需要: #Include <GDIPlus.au3>)
_GDIPlus_Shutdown() 清理微软 Windows GDI+ 使用的资源 (需要: #Include <GDIPlus.au3>)
_GDIPlus_Startup() 初始化微软 Windows GDI+ (需要: #Include <GDIPlus.au3>)
_GDIPlus_StringFormatCreate([$iFormat = 0[, $iLangID = 0]]) 创建字符串格式对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_StringFormatDispose($hFormat) 释放字符串格式对象 (需要: #Include <GDIPlus.au3>)
_GDIPlus_StringFormatSetAlign($hStringFormat,$iFlag) 设置字符串格式对象的文本对齐 (需要: #Include <GDIPlus.au3>)
_GetIP ( ) 获取一个网络/计算机的公网IP地址. (需要: #include <INet.au3>)
_GUICtrlAVI_Close($hWnd) 关闭一个 AVI 剪辑 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Create($hWnd[, $sFile = ""[, $subfileid = -1[, $iX = 0[, $iY = 0[, $iWidth = 0[, $iHeight = 0[, $iStyle = 0x00000006[, $iExStyle = 0x00000000]]]]]]]]) 创建一个 AVI 控件 (需要: #Include <GuiAVI.au3>)
_GUICtrlAVI_Destroy(ByRef $hWnd) 删除AVI控件 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_IsPlaying($hWnd) 检查一个AVI剪辑是否正在播放 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Open($hWnd, $sFileName) 在动画控件中打开并播放AVI剪辑 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_OpenEx($hWnd, $sFileName, $iResourceID) 打开AVI剪辑并在控件中显示第一帧 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Play($hWnd [, $iFrom = 0 [, $iTo = -1 [, $iRepeat = -1]]]) 在动画控件中播放AVI剪辑 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Seek($hWnd, $iFrame) 引导控件播放剪辑中的特殊帧 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Show($hWnd, $iState) 显示/隐藏AVI控件 (需要: #include <GuiAVI.au3>)
_GUICtrlAVI_Stop($hWnd) 停止播放一个 AVI 影片 (需要: #include <GuiAVI.au3>)
_GUICtrlButton_Click($hWnd) 模拟用户点击按钮 (需要: #include <GuiButton.au3>)
_GUICtrlButton_Create($hWnd, $sText, $iX, $iY, $iWidth, $iHeight[, $iStyle = -1[, $iExStyle = -1]]) 创建一个按钮控件 (需要: #Include <GuiButton.au3>)
_GUICtrlButton_Destroy(ByRef $hWnd) 删除按钮控件 (需要: #include <GuiButton.au3>)
_GUICtrlButton_Enable($hWnd [, $fEnable = True]) 应用或者禁用鼠标和键盘对指定按钮的输入 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetCheck($hWnd) 得到单选按钮或者复选框选中状态 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetFocus($hWnd) 赋予按钮一个键盘焦点 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetIdealSize($hWnd) 获取按钮适配文本和图像的最佳尺寸 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetImage($hWnd) 返回一个关联于按钮的图像(图标或者位图)句柄. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetImageList($hWnd) 获取图像列表对按钮控件分配状态的数组 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetNote($hWnd) 获取命令链接按钮关联的注释文字 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetNoteLength($hWnd) 获取命令链接按钮提示文本的长度 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetSplitInfo($hWnd) 获取分割(split)按钮控件的信息. (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetState($hWnd) 获取按钮或复选框的状态 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetText($hWnd) 返回按钮上的文本 (需要: #include <GuiButton.au3>)
_GUICtrlButton_GetTextMargin($hWnd) 获取按钮中文本的页边距 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetCheck($hWnd [, $iState = $BST_CHECKED]) 设置单选按钮或复选框的选取状态 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetDontClick($hWnd [, $fState = True]) 设置按钮的 $BST_DONTCLICK 状态标志 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetFocus($hWnd [, $fFocus = True]) 设置键盘焦点到指定的按钮 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetImage($hWnd, $sImageFile [, $nIconId = -1 [, $fLarge = False]]) 设置单选按钮或复选框的选取状态 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetImageList($hWnd, $hImage [, $nAlign = 0 [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]]) 分配一个图像列表到一个按钮控件 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetNote($hWnd, $sNote) 设置与命令按钮有关的提示文本 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetShield($hWnd [, $fRequired = True]) 在指定按钮或链接上显示盾牌图标 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetSize($hWnd, $iWidth, $iHeight) 设置按钮大小 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetSplitInfo($hWnd [, $himlGlyph = -1 [, $iSplitStyle = $BCSS_ALIGNLEFT [, $iWidth = 0 [, $iHeight = 0]]]]) 获取分割按钮控件的信息 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetState($hWnd [, $fHighlighted = True]) 设置按钮的加亮状态. 加亮状态表明按钮是否突出显示,就像鼠标停留在按钮上. (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetStyle($hWnd, $iStyle) 设置按钮的样式 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetText($hWnd, $sText) 设置按钮文本 (需要: #include <GuiButton.au3>)
_GUICtrlButton_SetTextMargin($hWnd [, $iLeft = 1 [, $iTop = 1 [, $iRight = 1 [, $iBottom = 1]]]]) 在按钮控件上设置一个空白用于绘制文本. (需要: #include <GuiButton.au3>)
_GUICtrlButton_Show($hWnd [, $fShow = True]) 显示/隐藏 按钮 (需要: #include <GuiButton.au3>)
_GUICtrlComboBoxEx_AddDir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]]) 添加目录和文件的名称 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_AddString($hWnd, $sText[, $iImage = -1[, $iSelecteImage = -1[, $iOverlayImage = -1[, $iIndent = -1[, $iParam = -1]]]]]) 添加字符串 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_BeginUpdate($hWnd) 启动控件更新直到调用 EndUpdate 函数 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Create($hWnd, $sText, $iX, $iY[, $iWidth = 100[, $iHeight = 200[, $iStyle = 0x00200002[, $iExStyle = 0x00000000]]]]) 创建扩展组合控件 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight) 创建单色位图 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_DeleteString($hWnd, $iIndex) 移除组合控件(Ex)项目 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_Destroy(ByRef $hWnd) 删除控件 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_EndUpdate($hWnd) 结束组合控件更新,关闭 BeginUpdate 函数 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_FindStringExact($hWnd, $sText [, $iIndex = -1]) 搜索字符串(全匹配) (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboBoxInfo($hWnd, ByRef $tInfo) 得到关于指定组合框(ComboBox)的信息 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetComboControl($hWnd) 获取扩展组合控件 ComboBoxEx 句柄 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCount($hWnd) 获取项目的个数 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetCurSel($hWnd) 获取当前被选项的索引 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRect($hWnd) 检索控件中列表框在展开状态时的屏幕坐标,返回数据数组. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedControlRectEx($hWnd) 检索控件中列表框在展开状态时的屏幕坐标,返回数据结构. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedState($hWnd) 获取组合框的列表框最小允许宽度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetDroppedWidth($hWnd) 获取组合框的列表框最小允许宽度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditControl($hWnd) 获取组合控件 ComboBoxEx 编辑框句柄 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditSel($hWnd) 获取组合框的编辑控件里当前选项开始和结束字符的位置 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetEditText($hWnd) 获取扩展组合框编辑控件里的文本 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedStyle($hWnd) 获取组合控件 ComboBoxEx 的扩展样式 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetExtendedUI($hWnd) 确定组合框使用的是默认用户界面还是扩展用户界面 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetImageList($hWnd) 获取分配给扩展组合控件的图像列表句柄 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItem($hWnd, $iIndex) 获取一个项目的属性 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemEx($hWnd, ByRef $tItem) 返回一些或者所有项目的属性 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemHeight($hWnd, $iComponent = -1) 确定ComboBox中列表项或选择区的高度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemImage($hWnd, $iIndex) 获取项目图标的索引 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemIndent($hWnd, $iIndex) 检索项目缩进的图像宽度数.一个缩进量等于一个图像宽度. (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemOverlayImage($hWnd, $iIndex) 获取项目覆盖状态图像的索引 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemParam($hWnd, $iIndex) 返回一个项目的应用程序定义的特殊值. (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemSelectedImage($hWnd, $iIndex) 检索项目选定状态的图像图标索引 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemText($hWnd, $iIndex, ByRef $sText) 获取组合框列表中的字符串 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetItemTextLen($hWnd, $iIndex) 获取组合框列表中一个字符串的字符长度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetList($hWnd) 获取来自组合框列表部分的所有项 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetListArray($hWnd) 检索组合控件列表框全部项目,返回包含项目字符串的数组. (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocale($hWnd) 获取当前地区 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleCountry($hWnd) 获取当前国家代码 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleLang($hWnd) 检索当前语言标识符 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocalePrimLang($hWnd) 从语言 ID 中提取主语言 ID (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetLocaleSubLang($hWnd) 从语言 ID 提取子语言 ID (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetMinVisible($hWnd) 获取组合框下拉列表中可见项目的最小数量 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetTopIndex($hWnd) 获取组合框的列表部分中第一个可见项从0开始的索引 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_GetUnicode($hWnd) 检查控件是否使用Unicode (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InitStorage($hWnd, $iNum, $iBytes) 分配用于存储列表框项目的内存 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_InsertString($hWnd, $sText [, $iIndex = 0 [, $iImage = -1 [, $iSelecteImage = -1 [, $iOverlayImage = -1 [, $iIndent = -1 [, $iParam = -1]]]]]]) 插入新项目 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_LimitText($hWnd [, $iLimit = 0]) 限制用户键入组合框编辑控件的文本长度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ReplaceEditSel($hWnd, $sText) 替换编辑框中选定文本 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ResetContent($hWnd) 移除所有项目. (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetCurSel($hWnd [, $iIndex = -1]) 从组合框列表中选择一个字符串 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetDroppedWidth($hWnd, $iWidth) 设置组合框的列表框允许的最大像素宽度 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditSel($hWnd, $iStart, $iStop) 选择组合框编辑控件中的字符 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetEditText($hWnd, $sText) 设置组合框控件中的编辑(edit)控件的文本 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedStyle($hWnd, $iExStyle[, $iExMask = 0]) 设置组合控件(Ex)的扩展样式 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetExtendedUI($hWnd [, $fExtended = False]) 选择默认用户界面或扩展用户界面 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetImageList($hWnd, $hHandle) 设置组合控件(Ex)图像列表 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItem($hWnd, $sText[, $iIndex = 0[, $iImage = -1[, $iSelectedImage = -1[, $iOverlayImage = -1[, $iIndent = -1[, $iParam = -1]]]]]]) 设置部分或全部项目的属性(使用参数) (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemEx($hWnd, ByRef $tItem) 设置一个项目的部分或全部属性 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemHeight($hWnd, $iComponent, $iHeight) 设置组合框列表项目或选择区的高 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemImage($hWnd, $iIndex, $iImage) 设置项目图标在图像列表中的索引. (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemIndent($hWnd, $iIndex, $iIndent) 设置项目缩进图像宽度数 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemOverlayImage($hWnd, $iIndex, $iImage) 设置项目覆盖图标在图像列表中的索引 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemParam($hWnd, $iIndex, $iParam) 设置项目的具体值 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetItemSelectedImage($hWnd, $iIndex, $iImage) 设置项目选中状态图标在图像列表中的索引 (需要: #Include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetMinVisible($hWnd, $iMinimum) 设置组合框下拉列表项目的最小可见数量 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetTopIndex($hWnd, $iIndex) 确定组合框的下拉列表中的一个特殊项是可见的 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_SetUnicode($hWnd [, $fUnicode = True]) 设置控件是否使用Unicode (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBoxEx_ShowDropDown($hWnd [, $fShow = False]) 显示或隐藏组合框的列表框 (需要: #include <GuiComboBoxEx.au3>)
_GUICtrlComboBox_AddDir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]]) 添加目录与文件的名称 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AddString($hWnd, $sText) 添加一个字符串 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_AutoComplete($hWnd) 自动完成一个组合框编辑控件 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_BeginUpdate($hWnd) 启动控件更新直到调用 EndUpdate 函数 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Create($hWnd, $sText, $iX, $iY[, $iWidth = 100[, $iHeight = 120[, $iStyle = 0x00200042[, $iExStyle = 0x00000000]]]]) 创建一个组合对话框控件 (需要: #Include <GuiComboBox.au3>)
_GUICtrlComboBox_DeleteString($hWnd, $iIndex) 删除一个字符串 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_Destroy(ByRef $hWnd) 删除控件 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_EndUpdate($hWnd) 关闭 BeginUpdate 函数并重绘屏幕 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindString($hWnd, $sText [, $iIndex = -1]) 搜索字符串(部分匹配) (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_FindStringExact($hWnd, $sText [, $iIndex = -1]) 搜索字符串(完全匹配) (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetComboBoxInfo($hWnd, ByRef $tInfo) 获取关于指定组合框的信息 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCount($hWnd) 获取项目的个数 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCueBanner($hWnd) 获取显示在组合框编辑控件的提示标志文字 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetCurSel($hWnd) 获取当前被选项的索引 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRect($hWnd) 获取组合框在打开下拉菜单状态时的屏幕坐标 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedControlRectEx($hWnd) 获取组合框在打开下拉菜单状态时的屏幕坐标 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedState($hWnd) 确定组合框的列表箱是否打开 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetDroppedWidth($hWnd) 获取组合框的列表框最小允许宽度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditSel($hWnd) 获取组合框的编辑控件里当前选项开始和结束字符的位置 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetEditText($hWnd) 获取组合框编辑控件里的文本 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetExtendedUI($hWnd) 确定组合框使用的是默认用户界面还是扩展用户界面 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetHorizontalExtent($hWnd) 获取组合框的列表框可以水平滚动的像素宽度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetItemHeight($hWnd, $iIndex = -1) 获取组合框中项目或选择区段的高度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBText($hWnd, $iIndex, ByRef $sText) 获取来自组合框列表的字符串 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLBTextLen($hWnd, $iIndex) 获取组合框的列表控件内一个字符串的长度, 用字符计算 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetList($hWnd) 获取来自组合框列表部分的所有项 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetListArray($hWnd) 获取来自组合框列表部分的所有项 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocale($hWnd) 获取当前地区 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleCountry($hWnd) 返回当前国家代码. (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleLang($hWnd) 获取当前语言标识符 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocalePrimLang($hWnd) 从语言 ID 中提取主语言 ID (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetLocaleSubLang($hWnd) 从语言 ID 提取子语言 ID (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetMinVisible($hWnd) 获取组合框下拉列表中可见项目的最小数量 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_GetTopIndex($hWnd) 获取组合框的列表部分中第一个可见项从0开始的索引 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InitStorage($hWnd, $iNum, $iBytes) 分配用于存储列表框项目的内存 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_InsertString($hWnd, $sText [, $iIndex = -1]) 插入字符串 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_LimitText($hWnd [, $iLimit = 0]) 限制组合控件编辑框文本输入长度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ReplaceEditSel($hWnd, $sText) 替换编辑框中选定的文本 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ResetContent($hWnd) 移除组合控件编辑框,列表框全部项目 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SelectString($hWnd, $sText [, $iIndex = -1]) 搜索组合框列表中以指定字符串开始的项目 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCueBanner($hWnd, $sText) 设置显示在组合框编辑控件中的提示标志 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetCurSel($hWnd [, $iIndex = -1]) 选择组合框列表中的一个字符串 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetDroppedWidth($hWnd, $iWidth) 设置组合框的列表框允许的最大像素宽度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditSel($hWnd, $iStart, $iStop) 选择组合框编辑控件中的字符 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetEditText($hWnd, $sText) 设置组合框编辑控件的文本 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetExtendedUI($hWnd [, $fExtended = False]) 选择默认用户界面或扩展用户界面 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetHorizontalExtent($hWnd, $iWidth) 设置列表箱可以水平滚动的像素宽度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetItemHeight($hWnd, $iHeight [, $iComponent = -1]) 设置组合框中的列表项目和选择区的高度 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetMinVisible($hWnd, $iMinimum) 设置组合框下拉列表可见项目的最小数量 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_SetTopIndex($hWnd, $iIndex) 确定组合框的列表箱中一个特殊项是可见的 (需要: #include <GuiComboBox.au3>)
_GUICtrlComboBox_ShowDropDown($hWnd [, $fShow = False]) 显示或隐藏组合列表框的下拉菜单 (需要: #include <GuiComboBox.au3>)
_GUICtrlDTP_Create($hWnd, $iX, $iY[, $iWidth = 120[, $iHeight = 21[, $iStyle = 0x00000000[, $iExStyle = 0x00000000]]]]) 创建日期/时间选择器(DTP)控件 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_Destroy(ByRef $hWnd) 删除日期时间选取器控件 (需要: #include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCColor($hWnd, $iIndex) 获取指定部分的颜色 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMCFont($hWnd) 返回月历控件字体句柄 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetMonthCal($hWnd) 返回子月历控件句柄 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRange($hWnd) 检索当前系统允许的最低和最高时间值,返回相关数据的数组. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetRangeEx($hWnd) 检索当前系统允许的最低和最高时间值,返回相关值的数据结构. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTime($hWnd) 检索当前选定的日期/时间,返回相关值的数组. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_GetSystemTimeEx($hWnd) 检索当前选定的日期/时间,返回相关值的数据结构. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetFormat($hWnd, $sFormat) 设置日期/时间显示格式 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCColor($hWnd, $iIndex, $iColor) 设置月(日)历给定部分的颜色 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetMCFont($hWnd, $hFont[, $fRedraw = True]) 设置月(日)历字体 (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRange($hWnd, ByRef $aRange) 设置系统最小和最大允许时间,使用数据数组. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetRangeEx($hWnd, ByRef $tRange) 设置系统最小和最大允许时间,使用数据结构. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTime($hWnd, ByRef $aDate) 设置当前选定的日期和时间,使用数据数组. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlDTP_SetSystemTimeEx($hWnd, ByRef $tDate[, $fFlag = False]) 设置当前选定的日期和时间,使用数据结构. (需要: #Include <GuiDateTimePicker.au3>)
_GUICtrlEdit_AppendText($hWnd, $sText) 添加文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_BeginUpdate($hWnd) 控件开始更新直到调用EndUpdate函数 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_CanUndo($hWnd) 确定在编辑控件的撤销队列中是否还有操作 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_CharFromPos($hWnd, $iX, $iY) 获取客户区中距指定点最近的字符的信息 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Create($hWnd, $sText, $iX, $iY [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = 0x003010C4 [, $iExStyle = 0x00000200]]]]) 创建一个编辑框控件 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Destroy(ByRef $hWnd) 删除编辑框控件 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_EmptyUndoBuffer($hWnd) 重置编辑控件撤消标志 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_EndUpdate($hWnd) 使由于_GUICtrlEdit_BeginUpdate函数关闭的屏幕可以重绘 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Find($hWnd [, $fReplace = False]) 启动查找对话框 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_FmtLines($hWnd [, $fSoftBreak = False]) 确定编辑控件是否包括软换行字符 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetFirstVisibleLine($hWnd) 获取一个多行编辑框最高可见行的索引(从 0 开始) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLimitText($hWnd) 获得编辑框控件当前的文本限制 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLine($hWnd, $iLine) 获取编辑控件中的一行 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetLineCount($hWnd) 获取行数 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetMargins($hWnd) 获取控件左右边距 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetModify($hWnd) 获取编辑框控件修订标记的状态 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetPasswordChar($hWnd) 获取编辑控件显示当用户输入文本的密码字符 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECT($hWnd) 获取一个编辑框控件的格式化矩形 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetRECTEx($hWnd) 获取一个编辑框控件的格式化矩形 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetSel($hWnd) 获取当前选择的开始和结束的字符的位置 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetText($hWnd) 获取编辑框控件中的文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_GetTextLen($hWnd) 得到编辑(Edit)控件中所有文本的长度. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_HideBalloonTip($hWnd) 隐藏与编辑框控件有关的所有气泡提示 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_InsertText($hWnd, $sText [, $iIndex = -1]) 插入文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineFromChar($hWnd [, $iIndex = -1]) 获取包含指定字符索引的行的索引 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineIndex($hWnd [, $iIndex = 0]) 获取指定行的第一个字符的字符索引 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineLength($hWnd [, $iIndex = -1]) 获取行的长度,使用字符 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_LineScroll($hWnd, $iHoriz, $iVert) 垂直滚动文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_PosFromChar($hWnd, $iIndex) 获取指定字符在编辑框控件客户区中的坐标 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_ReplaceSel($hWnd, $sText [, $fUndo = True]) 替换当前的选择 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Scroll($hWnd, $iDirection) 垂直滚动文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetLimitText($hWnd, $iLimit) 设置文本限制值 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetMargins($hWnd [, $iMargin = 0x1 [, $iLeft = 0xFFFF [, $iRight = 0xFFFF]]]) 设置左、右边距的宽度 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetModify($hWnd, $fModified) 设置或清除修改标志. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetPasswordChar($hWnd [, $cDisplayChar = "0"]) 设置或清除编辑控件的密码字符 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetReadOnly($hWnd, $fReadOnly) 设置或删除只读样式 ($ES_READONLY) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECT($hWnd, $aRect) 设置多行编辑控件的矩形格式,使用坐标值数据数组. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTEx($hWnd, $tRect) 设置多行编辑控件的矩形格式,使用坐标值数据结构. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRECTNP($hWnd, $aRect) 设置多行编辑控件的矩形格式,使用坐标值数据数组. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetRectNPEx($hWnd, $tRect) 设置多行编辑控件的矩形格式,使用坐标值数据结构. (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetSel($hWnd, $iStart, $iEnd) 选择字符中的一个范围(选择一段字符串) (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetTabStops($hWnd, $aTabStops) 设置制表符大小 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_SetText($hWnd, $sText) 设置控件文本 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_ShowBalloonTip($hWnd, $sTitle, $sText, $iIcon) 显示编辑控件关联的气球提示 (需要: #include <GuiEdit.au3>)
_GUICtrlEdit_Undo($hWnd) 撤销编辑控件撤销队列中最后的操作 (需要: #include <GuiEdit.au3>)
_GUICtrlHeader_AddItem($hWnd, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $fOnRight = False]]]]) 添加标题项目 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilter($hWnd, $iIndex) 清除筛选 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_ClearFilterAll($hWnd) 清除所有筛选 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Create($hWnd[, $iStyle = 0x00000046]) 创建标题控件 (需要: #Include <GuiHeader.au3>)
_GUICtrlHeader_CreateDragImage($hWnd, $iIndex) 创建一个半透明的项目图像作为拖曳图像 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_DeleteItem($hWnd, $iIndex) 删除一个标题栏项目 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Destroy(ByRef $hWnd) 删除标题控件 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_EditFilter($hWnd, $iIndex [, $fDiscard = True]) 启动编辑指定的过滤器 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetBitmapMargin($hWnd) 获取位图边空的宽度 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetImageList($hWnd) 获取图像列表的句柄 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItem($hWnd, $iIndex, ByRef $tItem) 获取项目信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemAlign($hWnd, $iIndex) 获取项目文本对齐方式 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemBitmap($hWnd, $iIndex) 获取项目位图句柄 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemCount($hWnd) 返回项目数量 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemDisplay($hWnd, $iIndex) 返回项目显示信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFlags($hWnd, $iIndex) 返回项目标志信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemFormat($hWnd, $iIndex) 返回项目格式 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemImage($hWnd, $iIndex) 获取图像在列表中的索引 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemOrder($hWnd, $iIndex) 获取项目出现的次序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemParam($hWnd, $iIndex) 获取项目参数值 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRect($hWnd, $iIndex) 检索给定项目的边界矩形,返回矩形数据数组. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemRectEx($hWnd, $iIndex) 检索给定项目的边界矩形,返回矩形数据结构. (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemText($hWnd, $iIndex) 返回一个项目文本 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetItemWidth($hWnd, $iIndex) 获取项目宽度 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetOrderArray($hWnd) 获取当前从左到右的项目顺序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_GetUnicodeFormat($hWnd) 获取控件Unicode字符格式标记 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_HitTest($hWnd, $iX, $iY) 检查一个点以确定在指定点上是哪个项目 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_InsertItem($hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = 0 [, $iImage = -1 [, $fOnRight = False]]]]) 插入新的标题项目 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_Layout($hWnd, ByRef $tRect) 返回控件正确大小与坐标 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_OrderToIndex($hWnd, $iOrder) 获取一个项目基于其顺序的索引值 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetBitmapMargin($hWnd, $iWidth) 指定项目中位图边距的象素宽度 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetFilterChangeTimeout($hWnd, $iTimeOut) 设置过滤器变动超时间隔 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetHotDivider($hWnd, $iFlag, $iInputValue) 改变热分隔符的颜色 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetImageList($hWnd, $hImage) 分配图像列表 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItem($hWnd, $iIndex, ByRef $tItem) 设置关于项目的信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemAlign($hWnd, $iIndex, $iAlign) 设置项目文本对齐方式 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemBitmap($hWnd, $iIndex, $hBmp) 设置项目的位图句柄 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemDisplay($hWnd, $iIndex, $iDisplay) 返回项目显示信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFlags($hWnd, $iIndex, $iFlags) 返回项目标志信息 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemFormat($hWnd, $iIndex, $iFormat) 设置项目格式 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemImage($hWnd, $iIndex, $iImage) 设置图像列表内图像的索引 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemOrder($hWnd, $iIndex, $iOrder) 设置项目出现的顺序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemParam($hWnd, $iIndex, $iParam) 设置项目参数值 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemText($hWnd, $iIndex, $sText) 设置标题项目文本 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetItemWidth($hWnd, $iIndex, $iWidth) 设置项目的宽度 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetOrderArray($hWnd, ByRef $aOrder) 设置当前项目从左到右的顺序 (需要: #include <GuiHeader.au3>)
_GUICtrlHeader_SetUnicodeFormat($hWnd, $fUnicode) 设置控件的 Unicode 字符格式标志 (需要: #include <GuiHeader.au3>)
_GUICtrlIpAddress_ClearAddress($hWnd) 清除IP地址控件内容. (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Create($hWnd, $iX, $iY[, $iWidth = 125[, $iHeight = 25[, $iStyles = 0x00000000[, $iExstyles = 0x00000000]]]]) 创建一个GUI IP地址控件 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Destroy(ByRef $hWnd) 删除控件 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Get($hWnd) 从IP地址控件返回一个IP地址 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetArray($hWnd) 检索控件内的 IP 地址,返回地址字段数据数组. (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_GetEx($hWnd) 检索控件内的 IP 地址,返回地址数据结构. (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_IsBlank($hWnd) 检测IP地址控件的所有段都不为空 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_Set($hWnd, $sAddress) 设置IP地址控件中的IP地址 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetArray($hWnd, $aAddress) 设置IP地址控件中的地址 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetEx($hWnd, $tIP) 设置 IP 地址,使用地址数据结构. (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFocus($hWnd, $iIndex) 设置键盘焦点到IP地址控件中指定的字段. (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetFont($hWnd [, $sFaceName = "Arial" [, $iFontSize = 12 [, $iFontWeight = 400 [, $fFontItalic = False]]]]) 设置IP地址控件字体 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_SetRange($hWnd, $iIndex[, $iLowRange = 0[, $iHighRange = 255]]) 设置 IP 地址指定字段的有效范围 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlIpAddress_ShowHide($hWnd, $iState) 显示/隐藏 IP 地址控件 (需要: #Include <GuiIPAddress.au3>)
_GUICtrlListBox_AddFile($hWnd, $sFile) 添加文件到列表控件 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_AddString($hWnd, $sText) 添加字符串 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_BeginUpdate($hWnd) 开始控件更新,直到 EndUpdate 函数被调用. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ClickItem($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 0]]]]) 点击一个项目 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Create($hWnd, $sText, $iX, $iY[, $iWidth = 100[, $iHeight = 200[, $iStyle = 0x00B00002[, $iExStyle = 0x00000200]]]]) 创建 ListBox (列表框)控件 (需要: #Include <GuiListBox.au3>)
_GUICtrlListBox_DeleteString($hWnd, $iIndex) 删除字符串 (需要: #Include<GuiListBox.au3>)
_GUICtrlListBox_Destroy(ByRef $hWnd) 删除控件 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Dir($hWnd, $sFile [, $iAttributes = 0 [, $fBrackets = True]]) 添加目录和文件 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_EndUpdate($hWnd) 关闭由 BeginUpdate 函数启用的屏幕重绘功能. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_FindInText($hWnd, $sText [, $iStart = -1 [, $fWrapOK = True]]) 搜索包含指定文本的项目 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_FindString($hWnd, $sText [, $fExact = False]) 查找字符串 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetAnchorIndex($hWnd) 检索锚(固定)项目的索引 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCaretIndex($hWnd) 返回焦点项目的索引 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCount($hWnd) 返回项目数量 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetCurSel($hWnd) 获取当前被选项的索引 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetHorizontalExtent($hWnd) 获取列表框的滚动宽度 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemData($hWnd, $iIndex) 获取应用程序定义的与项目关联的值 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemHeight($hWnd) 返回项目的高度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRect($hWnd, $iIndex) 获取绑定项目的矩形 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetItemRectEx($hWnd, $iIndex) 获取绑定项目的矩形 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetListBoxInfo($hWnd) 获取指定列表框中每列的项目个数 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocale($hWnd) 获取当前地区 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleCountry($hWnd) 返回当前国家代码 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleLang($hWnd) 返回当前语言标识符(ID) (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocalePrimLang($hWnd) 从语言ID释放(解压缩)主语言ID. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetLocaleSubLang($hWnd) 从语言ID释放(解压缩)一个子语言ID (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSel($hWnd, $iIndex) 获取项目的被选状态 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelCount($hWnd) 返回已选择项目的总数 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItems($hWnd) 填充选定项的数组缓冲区 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetSelItemsText($hWnd) 获取被选项目的文本 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetText($hWnd, $iIndex) 返回指定索引的项目(字符串) (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTextLen($hWnd, $iIndex) 得到列表框中字符串长度. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_GetTopIndex($hWnd) 返回列表中第一个可见项目的所在的索引 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_InitStorage($hWnd, $iItems, $iBytes) 分配存储项目的内存 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_InsertString($hWnd, $sText [, $iIndex = -1]) 在列表中插入字符串 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ItemFromPoint($hWnd, $iX, $iY) 获取距指定点最近的0基索引项 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ReplaceString($hWnd, $iIndex, $sText) 替换项目文本 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_ResetContent($hWnd) 从列表框中移除所有项目. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelectString($hWnd, $sText [, $iIndex = -1]) 搜索项目文本以指定字符串开始的项目 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRange($hWnd, $iFirst, $iLast [, $fSelect = True]) 在一个多选择列表框中选择一或多个连续的项目 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SelItemRangeEx($hWnd, $iFirst, $iLast) 在一个多选择列表框中选择一或多个连续的项目,兼有删除选中项功能. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetAnchorIndex($hWnd, $iIndex) 设置锚项目, 多项选择从该项目开始. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCaretIndex($hWnd, $iIndex [, $fPartial = False]) 设置多选择列表框指定索引项目的焦点矩形 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetColumnWidth($hWnd, $iWidth) 设置全部列的像素宽度 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetCurSel($hWnd, $iIndex) 选择字符串,如有必要,则滚动到控件可见区. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetHorizontalExtent($hWnd, $iWidth) 设置列表框水平滚动的像素宽度 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemData($hWnd, $iIndex, $iValue) 设置指定项目的关联值 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetItemHeight($hWnd, $iHeight [, $iIndex = 0]) 设置项目的像素高度 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetLocale($hWnd, $iLocal) 设置当前区域信息 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetSel($hWnd [, $iIndex = -1 [, $fSelect = -1]]) 选择多选择列表框中的字符串 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTabStops($hWnd, $aTabStops) 设置制表符停止位置 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SetTopIndex($hWnd, $iIndex) 确保特定项目在列表框可见视图中. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_Sort($hWnd) 重新排序列表框.控件需具有 $LBS_SORT 样式. (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_SwapString($hWnd, $iIndexA, $iIndexB) 互换两个指定索引的项目的文本 (需要: #include <GuiListBox.au3>)
_GUICtrlListBox_UpdateHScroll($hWnd) 根据最长的字符串更新水平滚动条. (需要: #include <GuiListBox.au3>)
_GUICtrlListView_AddArray($hWnd, ByRef $aItems) 从数组向控件添加项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddColumn($hWnd, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]]) 在控件内添加新列 (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddItem($hWnd, $sText [, $iImage = -1 [, $iParam = 0]]) 添加项目到列表的末尾 (需要: #include <GuiListView.au3>)
_GUICtrlListView_AddSubItem($hWnd, $iIndex, $sText, $iSubItem [, $iImage = -1]) 向控件添加子项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewHeight($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]]) 计算显示给定数量项目所需的近似高度 (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewRect($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]]) 计算显示给定数量项目所需的近似大小 (需要: #include <GuiListView.au3>)
_GUICtrlListView_ApproximateViewWidth($hWnd [, $iCount = -1 [, $iCX = -1 [, $iCY = -1]]]) 计算用以显示给定数量项目所需的近似宽度 (需要: #include <GuiListView.au3>)
_GUICtrlListView_Arrange($hWnd [, $iArrange = 0]) 排列视图项目图标 (需要: #include <GuiListView.au3>)
_GUICtrlListView_BeginUpdate($hWnd) 开始控件更新,直到 EndUpdate 函数被调用. (需要: #include <GuiListView.au3>)
_GUICtrlListView_CancelEditLabel($hWnd) 取消项目的文本编辑操作 (需要: #include <GuiListView.au3>)
_GUICtrlListView_ClickItem($hWnd, $iIndex [, $sButton = "left" [, $fMove = False [, $iClicks = 1 [, $iSpeed = 1]]]]) 点击一个项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_CopyItems($hWnd_Source, $hWnd_Destination [, $fDelFlag = False]) 在两个列表视图控件间复制项目 (需要: #include <GuiListView.au3>)
_GUICtrlListView_Create($hWnd, $sHeaderText, $iX, $iY[, $iWidth = 150[, $iHeight = 150[, $iStyle = 0x0000000D[, $iExStyle = 0x00000000[, $fCoInit = False]]]]]) 创建一个列表视图(ListView)控件 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_CreateDragImage($hWnd, $iIndex) 为指定的项目创建一个拖动图像列表 (需要: #include <GuiListView.au3>)
_GUICtrlListView_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight) 创建单色位图 (需要: #include <GuiListView.au3>)
_GUICtrlListView_DeleteAllItems($hWnd) 从 List-view 控件中移除所有项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_DeleteColumn($hWnd, $iCol) 从List-View控件中移除某一列. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_DeleteItem($hWnd, $iIndex) 删除项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_DeleteItemsSelected($hWnd) 删除所选项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_Destroy(ByRef $hWnd) 删除 ListView 控件 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_DrawDragImage(ByRef $hWnd, ByRef $aDrag) 绘制拖动图像 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_EditLabel($hWnd, $iIndex) 编辑指定项的文本 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_EnableGroupView($hWnd[, $fEnable = True]) 启用或禁用控件项目分组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_EndUpdate($hWnd) 结束控件更新,并关闭 BeginUpdate 函数 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_EnsureVisible($hWnd, $iIndex[, $fPartialOK = False]) 确保列表视图项目全部或部分可见 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_FindInText($hWnd, $sText[, $iStart = -1[, $fWrapOK = True[, $fReverse = False]]]) 搜索包含指定文本的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_FindItem($hWnd, $iStart, ByRef $tFindInfo[, $sText = ""]) 搜索指定特点的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_FindNearest($hWnd, $iX, $iY[, $iDir = 0[, $iStart = -1[, $fWrapOK = True]]]) 查找最接近指定位置的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_FindParam($hWnd, $iParam[, $iStart = -1]) 搜索指定参数值的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_FindText($hWnd, $sText[, $iStart = -1[, $fPartialOK = True[, $fWrapOK = True]]]) 搜索指定文本的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetBkColor($hWnd) 检索列表视图控件的背景颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetBkImage($hWnd) 检索控件背景图像 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetCallbackMask($hWnd) 检索控件的回叫掩码 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetColumn($hWnd, $iIndex) 检索列的属性 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetColumnCount($hWnd) 返回列数 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrder($hWnd) 检索当前列的左到右顺序,返回分隔的序号字符串. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetColumnOrderArray($hWnd) 检索当前列的左到右顺序,返回数据数组. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetColumnWidth($hWnd, $iCol) 检索报表视图或列表视图的列宽 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetCounterPage($hWnd) 计算在可视区域中,垂直显示的项目数量. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetEditControl($hWnd) 检索编辑项目文本的编辑控件句柄. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetExtendedListViewStyle($hWnd) 检索当前使用的扩展样式 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetFocusedGroup($hWnd) 获取具有焦点的组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetGroupCount($hWnd) 获取分组数量 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfo($hWnd, $iGroupID) 检索组信息,使用组 ID. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetGroupInfoByIndex($hWnd, $iIndex) 检索组信息,使用组索引. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetGroupRect($hWnd, $iGroupID[, $iGet = $LVGGR_GROUP]) 获取指定组的矩形 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetGroupViewEnabled($hWnd) 检查是否启用组视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetHeader($hWnd) 返回标题(header)控件句柄. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetHotCursor($hWnd) 检索热跟踪项目时的鼠标指针 HCURSOR 值 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetHotItem($hWnd) 检索热项目的索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetHoverTime($hWnd) 检索项目选中时,鼠标悬停的时间量. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetImageList($hWnd, $iImageList) 检索绘制 ListView 项目的图像列表句柄 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetISearchString($hWnd) 检索控件的增量搜索字符串 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItem($hWnd, $iIndex[, $iSubItem = 0]) Retrieves an item's attributes (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemChecked($hWnd, $iIndex) 返回列表视图中项目选择状态 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemCount($hWnd) 检索列表视图的项目数量 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemCut($hWnd, $iIndex) 确定项目是否有剪切/粘贴操作标志 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemDropHilited($hWnd, $iIndex) 确定项目是否高亮显示为拖放目标 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemEx($hWnd, ByRef $tItem) 检索项目的部分或全部属性 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemFocused($hWnd, $iIndex) 确定项目是否高亮显示为拖放目标 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemGroupID($hWnd, $iIndex) 获取项目组 ID (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemImage($hWnd, $iIndex[, $iSubItem = 0]) 检索项目的图标索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemIndent($hWnd, $iIndex) 检索项目缩进的图像宽度数 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemParam($hWnd, $iIndex) 检索项目特定应用值 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemPosition($hWnd, $iIndex) 检索项目的位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionX($hWnd, $iIndex) 检索项目的 X 位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemPositionY($hWnd, $iIndex) 检索项目的 Y 位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemRect($hWnd, $iIndex[, $iPart = 3]) 检索项目的全部或部分矩形,返回数据数组. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemRectEx($hWnd, $iIndex[, $iPart = 3]) 检索项目的全部或部分矩形,返回数据结构. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemSelected($hWnd, $iIndex) 确定项目是否被选中 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacing($hWnd[, $fSmall = False]) 确定控件中项目的间距 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingX($hWnd[, $fSmall = False]) 确定项目之间的水平间距. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemSpacingY($hWnd [, $fSmall = False]) 确定项目之间的垂直间距 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemState($hWnd, $iIndex, $iMask) 返回 ListView 项目状态 (需要: #include <GuiListView.au3>)
_GUICtrlListView_GetItemStateImage($hWnd, $iIndex) 获取图像的显示状态 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemText($hWnd, $iIndex[, $iSubItem = 0]) 取得一个项目或者子项目的文本 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemTextArray($hWnd[, $iItem = -1]) 添加所有列表视图控件项目的文本到一个数组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetItemTextString($hWnd[, $iItem = -1]) 检索指定项目及其子项的全部文本,返回分隔的字符串.(译注:依据示例脚本翻译) (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetNextItem($hWnd[, $iStart = -1[, $iSearch = 0[, $iState = 8]]]) 搜索指定属性的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetNumberOfWorkAreas($hWnd) 检索控件工作区的数量 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetOrigin($hWnd) 检索控件当前视图的起点 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetOriginX($hWnd) 检索控件当前视图水平源点 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetOriginY($hWnd) 检索控件当前视图水平源点 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetOutlineColor($hWnd) 检索控件的边框颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetSelectedColumn($hWnd) 检索选定列的索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetSelectedCount($hWnd) 检测选择的项目的数量 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetSelectedIndices($hWnd, $fArray = False) 检索选定项目的索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetSelectionMark($hWnd) 检索控件选择标记 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetStringWidth($hWnd, $sString) 确定指定字符串的宽度 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetSubItemRect($hWnd, $iIndex, $iSubItem[, $iPart = 0]) 检索项目的子项边界矩形 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetTextBkColor($hWnd) 检索控件的文本背景颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetTextColor($hWnd) 返回控件的文本颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetToolTips($hWnd) 检索工具提示控件句柄 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetTopIndex($hWnd) 检索列表或报表视图顶部可见项目的索引. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetUnicodeFormat($hWnd) 检索 UNICODE 字符格式标志 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetView($hWnd) 检索控件的当前视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewDetails($hWnd) 确定控件是否为报表视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewLarge($hWnd) 确定控件是否为大图标视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewList($hWnd) 确定控件是否为列表视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewRect($hWnd) 检索控件全部项目的边界矩形 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewSmall($hWnd) 确定控件是否为小图标模式 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_GetViewTile($hWnd) 确定控件是否为平铺显示视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_HideColumn($hWnd, $iCol) 隐藏列. "设置列宽为0” (需要: #Include <GuiListView.au3>)
_GUICtrlListView_HitTest($hWnd[, $iX = -1[, $iY = -1]]) 确定指定位置的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_InsertColumn($hWnd, $iIndex, $sText [, $iWidth = 50 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]]) 插入列 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_InsertGroup($hWnd, $iIndex, $iGroupID, $sHeader[, $iAlign = 0]) 插入组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_InsertItem($hWnd, $sText[, $iIndex = -1[, $iImage = -1[, $iParam = 0]]]) 插入项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_JustifyColumn($hWnd, $iIndex[, $iAlign = -1]) 设置控件列对齐 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_MapIDToIndex($hWnd, $iID) 映射项目 ID 到索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_MapIndexToID($hWnd, $iIndex) 映射项目索引到 ID (需要: #Include <GuiListView.au3>)
_GUICtrlListView_RedrawItems($hWnd, $iFirst, $iLast) 强制刷新控件范围内的项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_RegisterSortCallBack($hWnd[, $fNumbers = True[, $fArrows = True]]) 注册简单排序回调函数 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_RemoveAllGroups($hWnd) 移除全部组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_RemoveGroup($hWnd, $iGroupID) 移除组 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_Scroll($hWnd, $iDX, $iDY) 滚动列表视图的内容 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetBkColor($hWnd, $iColor) 设置控件的背景颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetBkImage($hWnd[, $sURL = ""[, $iStyle = 0[, $iXOffset = 0[, $iYOffset = 0]]]]) 设置控件背景图像 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetCallBackMask($hWnd, $iMask) 更改控件的回调掩码 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetColumn($hWnd, $iIndex, $sText [, $iWidth = -1 [, $iAlign = -1 [, $iImage = -1 [, $fOnRight = False]]]]) 设置列的属性 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrder($hWnd, $sOrder) 设置列的左到右顺序,使用分隔字符. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetColumnOrderArray($hWnd, $aOrder) 设置列的左到右顺序,使用数组. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetColumnWidth($hWnd, $iCol, $iWidth) 更改列宽 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetExtendedListViewStyle($hWnd, $iExStyle[, $iExMask = 0]) 设置扩展样式 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetGroupInfo($hWnd, $iGroupID, $sHeader[, $iAlign = 0[, $iState = $LVGS_NORMAL]]) 设置组信息 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetHotItem($hWnd, $iIndex) 设置热项目 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetHoverTime($hWnd, $iTime) 设置项目选中前,鼠标光标悬停该项目的时间 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetIconSpacing($hWnd, $iCX, $iCY) 设置大图标视图的图标间距 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetImageList($hWnd, $hHandle[, $iType = 0]) 分配图像列表到控件 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItem($hWnd, $sText[, $iIndex = 0[, $iSubItem = 0[, $iImage = -1[, $iParam = -1[, $iIndent = -1]]]]]) 设置项目的部分或全部属性,使用参数. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemChecked($hWnd, $iIndex[, $fCheck = True]) 设置选中状态 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemCount($hWnd, $iItems) 为列表视图控件的指定数量项目分配内存 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemCut($hWnd, $iIndex[, $fEnabled = True]) 设置是否将项目标记为剪切/粘贴操作 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemDropHilited($hWnd, $iIndex[, $fEnabled = True]) 设置是否将项目高亮显示为拖放目标 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemEx($hWnd, ByRef $tItem) 设置项目的部分或全部属性,使用数据结构. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemFocused($hWnd, $iIndex[, $fEnabled = True]) 设置项目是否具有焦点 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemGroupID($hWnd, $iIndex, $iGroupID) 设置项目组 ID (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemImage($hWnd, $iIndex, $iImage[, $iSubItem = 0]) 设置一个项目图标的索引于控件图像列表. (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemIndent($hWnd, $iIndex, $iIndent) 设置项目缩进的图像宽度数量 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemParam($hWnd, $iIndex, $iParam) 设置项目的具体值 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition($hWnd, $iIndex, $iCX, $iCY) 移动项目到控件指定位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemPosition32($hWnd, $iIndex, $iCX, $iCY) 移动项目到控件指定位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemSelected($hWnd, $iIndex[, $fSelected = True[, $fFocused = False]]) 设置项目是否被选中 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemState($hWnd, $iIndex, $iState, $iStateMask) 更改控件项目状态 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemStateImage($hWnd, $iIndex, $iImage) 设置状态图像 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetItemText($hWnd, $iIndex, $sText[, $iSubItem = 0]) 更改项目或子项文本 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetOutlineColor($hWnd, $iColor) 设置边框颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetSelectedColumn($hWnd, $iCol) 设置选定列的索引 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetSelectionMark($hWnd, $iIndex) 设置选择标志 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetTextBkColor($hWnd, $iColor) 设置控件文本的背景颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetTextColor($hWnd, $iColor) 设置控件中文本的颜色 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetToolTips($hWnd, $hToolTip) 设置工具提示控件,该控件将用于显示工具提示 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetUnicodeFormat($hWnd, $fUnicode) 设置控件的 UNICODE 字符格式标志 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetView($hWnd, $iView) 设置控件的视图 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SetWorkAreas($hWnd, $iLeft, $iTop, $iRight, $iBottom) 创建控件工作区 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SimpleSort($hWnd, ByRef $vDescending, $iCol) 排序列表视图控件(有限) (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SortItems($hWnd, $iCol) 启动回叫排序,并设置标题中的箭头 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_SubItemHitTest($hWnd[, $iX = -1[, $iY = -1]]) 确定哪些项目或子项目在控件的给定位置 (需要: #Include <GuiListView.au3>)
_GUICtrlListView_UnRegisterSortCallBack($hWnd) 反注册排序回调函数 (需要: #Include <GuiListView.au3>)
_GUICtrlMenu_AddMenuItem($hMenu, $sText[, $iCmdID = 0[, $hSubMenu = 0]]) 添加新菜单项到菜单末尾 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_AppendMenu($hMenu, $iFlags, $iNewItem, $pNewItem) 追加一个新项目到指定菜单栏,下拉菜单,子菜单或快捷菜单的末尾, (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_CheckMenuItem($hMenu, $iItem[, $fCheck = True[, $fByPos = True]]) 设置菜单项复选标记 (√) 的选中或清除选中状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_CheckRadioItem($hMenu, $iFirst, $iLast, $iCheck [, $fByPos = True]) 选中指定菜单项,并使其成为单选项目 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_CreateMenu([$iStyle = 8]) 创建菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_CreatePopup([$iStyle = 8]) 创建下拉菜单, 子菜单或快捷菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_DeleteMenu($hMenu, $iItem[, $fByPos = True]) 从指定菜单删除一个项目 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_DestroyMenu($hMenu) 销毁指定菜单,并释放菜单占用的内存 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_DrawMenuBar($hWnd) 刷新指定窗口的菜单栏 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_EnableMenuItem($hMenu, $iItem[, $iState = 0[, $fByPos = True]]) 启用,禁用或灰色指定的菜单项 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_FindItem($hMenu, $sText[, $fInStr = False[, $iStart = 0]]) 检索基于文本的菜单项 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_FindParent($hMenu) 返回菜单属于哪个窗口 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmp($hMenu, $iItem[, $fByPos = True]) 检索项目显示的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpChecked($hMenu, $iItem [, $fByPos = True]) 检索显示项目选中状态的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemBmpUnchecked($hMenu, $iItem[, $fByPos = True]) 检索显示项目未选中状态的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemChecked($hMenu, $iItem[, $fByPos = True]) 检索菜单项的选中状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemCount($hMenu) 检索指定菜单项的数目 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemData($hMenu, $iItem[, $fByPos = True]) 检索应用程序定义的菜单项关联值 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDefault($hMenu, $iItem[, $fByPos = True]) 检索菜单项的默认状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemDisabled($hMenu, $iItem[, $fByPos = True]) 检索菜单项的禁用状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemEnabled($hMenu, $iItem[, $fByPos = True]) 检索菜单项的启用状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemGrayed($hMenu, $iItem [, $fByPos = True]) 检索菜单项灰色状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemHighlighted($hMenu, $iItem[, $fByPos = True]) 检索菜单项的高亮状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemID($hMenu, $iItem[, $fByPos = True]) 检索菜单项的 ID (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemInfo($hMenu, $iItem[, $fByPos = True]) 检索菜单项的信息 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRect($hWnd, $hMenu, $iItem) 检索指定菜单项的矩形范围,返回矩形坐标数组. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemRectEx($hWnd, $hMenu, $iItem) 检索指定菜单项的矩形范围,返回矩形坐标数据结构. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemState($hMenu, $iItem[, $fByPos = True]) 检索菜单项的状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemStateEx($hMenu, $iItem[, $fByPos = True]) 检索关联指定菜单项的标志 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemSubMenu($hMenu, $iItem) 检索指定项目的激活子菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemText($hMenu, $iItem[, $fByPos = True]) 返回指定菜单项目的文本.  (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetItemType($hMenu, $iItem[, $fByPos = True]) 检索菜单项类型 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenu($hWnd) 返回指定窗口的菜单句柄. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBackground($hMenu) 检索菜单背景的画笔刷 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuBarInfo($hWnd[, $iItem = 0[, $iObject = 1]]) 检索指定菜单栏的信息 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuContextHelpID($hMenu) 检索上下文帮助标识符 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuData($hMenu) 返回应用程序定义的值(菜单数据) (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuDefaultItem($hMenu[, $fByPos = True[, $iFlags = 0]]) 检索指定菜单的默认菜单项 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuHeight($hMenu) 检索菜单的最大高度 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuInfo($hMenu) 检索指定菜单的信息 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetMenuStyle($hMenu) 检索菜单样式信息 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_GetSystemMenu($hWnd[, $fRevert = False]) 允许应用程序访问、复制和修改窗口菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItem($hMenu, $iIndex, $sText[, $iCmdID = 0[, $hSubMenu = 0]]) 插入一个新菜单项到指定位置 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_InsertMenuItemEx($hMenu, $iIndex, ByRef $tMenu[, $fByPos = True]) 插入一个新菜单项到指定位置(Ex) (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_IsMenu($hMenu) 确定句柄是否为菜单句柄 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_LoadMenu($hInst, $sMenuName) 从与应用程序实例相关联的可执行文件加载指定菜单资源 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_MapAccelerator($hMenu, $cAccel) 映射菜单快捷键到它的菜单位置 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_MenuItemFromPoint($hWnd, $hMenu [, $iX = -1 [, $iY = -1]]) 确定哪个菜单项在指定的位置. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_RemoveMenu($hMenu, $iItem[, $fByPos = True]) 从指定菜单删除菜单项或分离子菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBitmaps($hMenu, $iItem, $hChecked, $hUnChecked[, $fByPos = True]) 关联指定位图与一个菜单项 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmp($hMenu, $iItem, $hBmp [, $fByPos = True]) 设置显示项目的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpChecked($hMenu, $iItem, $hBmp[, $fByPos = True]) 设置显示项目被选中状态的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemBmpUnchecked($hMenu, $iItem, $hBmp[, $fByPos = True]) 设置显示项目未选中状态的位图 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemChecked($hMenu, $iItem [, $fState = True [, $fByPos = True]]) 设置菜单项的选中状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemData($hMenu, $iItem, $iData[, $fByPos = True]) 设置应用程序定义的菜单项值 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDefault($hMenu, $iItem[, $fState = True[, $fByPos = True]]) 设置菜单项的默认状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemDisabled($hMenu, $iItem [, $fState = True [, $fByPos = True]]) 设置菜单项的禁用状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemEnabled($hMenu, $iItem[, $fState = True[, $fByPos = True]]) 设置菜单项的启用状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemGrayed($hMenu, $iItem[, $fState = True[, $fByPos = True]]) 设置菜单项的灰色状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemHighlighted($hMenu, $iItem[, $fState = True[, $fByPos = True]]) 设置菜单项的高亮状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemID($hMenu, $iItem, $iID [, $fByPos = True]) 设置菜单项的 ID (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemInfo($hMenu, $iItem, ByRef $tInfo[, $fByPos = True]) 更改菜单项的信息 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemState($hMenu, $iItem, $iState[, $fState = True[, $fByPos = True]]) 设置菜单项的状态 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemSubMenu($hMenu, $iItem, $hSubMenu[, $fByPos = True]) 设置菜单项关联的下拉菜单或子菜单 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemText($hMenu, $iItem, $sText[, $fByPos = True]) 设置菜单项目文本 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetItemType($hMenu, $iItem, $iType[, $fByPos = True]) 设置菜单项目类型 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenu($hWnd, $hMenu) 分配一个新菜单到指定窗口. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuBackground($hMenu, $hBrush) 为菜单设置一个背景刷子(brush). (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuContextHelpID($hMenu, $iHelpID) 为菜单设置一个上下文帮助ID(标识) (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuData($hMenu, $iData) 设置菜单定义的应用 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuDefaultItem($hMenu, $iItem[, $fByPos = True]) 设置默认菜单项目 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuHeight($hMenu, $iHeight) 设置菜单最大高度 (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuInfo($hMenu, ByRef $tInfo) 设置指定菜单信息. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_SetMenuStyle($hMenu, $iStyle) 设置菜单样式. (需要: #Include <GuiMenu.au3>)
_GUICtrlMenu_TrackPopupMenu($hMenu, $hWnd[, $iX = -1[, $iY = -1[, $iAlignX = 1[, $iAlignY = 1[, $iNotify = 0[, $iButtons = 0]]]]]]) 在指定区域显示一个快捷菜单(弹出菜单) (需要: #Include <GuiMenu.au3>)
_GUICtrlMonthCal_Create($hWnd, $iX, $iY[, $iStyle = 0x00000000[, $iExStyle = 0x00000000]]) 创建月份日历控件 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_Destroy(ByRef $hWnd) 删除 MonthCal 控件 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarBorder($hWnd) 获取边框的像素大小 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCalendarCount($hWnd) 获取控件当前显示的日历数 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColor($hWnd, $iIndex) 检索控件的特定颜色 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetColorArray($hWnd, $iColor) 检索控件指定部分的颜色 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSel($hWnd) 返回当前选择的日期 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetCurSelStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索当前选定日期的字符串格式 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOW($hWnd) 检索周的第一天 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetFirstDOWStr($hWnd) 检索周的第一天的字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxSelCount($hWnd) 检索控件中最大可选择日期范围 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMaxTodayWidth($hWnd) 检索月历控件中“今天”字符串的最大宽度 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqHeight($hWnd) 检索显示完整月历所需的最低高度 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRect($hWnd) 检索显示完整月历所需的最低尺寸 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqRectArray($hWnd) 检索显示完整月历所需的最低尺寸 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMinReqWidth($hWnd) 检索显示完整月历所需的最小宽度 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthDelta($hWnd) 检索月日历控件滚动速度 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRange($hWnd[, $fPartial = False]) 检索日期的高,低界限范围 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMax($hWnd[, $fPartial = False]) 检索控件日期显示范围的上限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMaxStr($hWnd [, $sFormat = "%02d/%02d/%04d"]) 检索控件日期显示范围的上限值格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMin($hWnd[, $fPartial = False]) 检索控件日期显示范围的下限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeMinStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索控件日期显示范围的下限值格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetMonthRangeSpan($hWnd[, $fPartial = False]) 检索月历中全部显示日历天的月份跨度(译注:臆测翻译,参考原文罢!) (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRange($hWnd) 检索最大和最小允许日期 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMax($hWnd) 检索日期范围的上限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMaxStr($hWnd [, $sFormat = "%02d/%02d/%04d"]) 检索日期范围的上限值格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMin($hWnd) 检索日期范围的下限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetRangeMinStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索日期范围的下限值格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRange($hWnd) 检索当前选定日期范围的上限和下限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMax($hWnd) 检索用户选择日期范围的上限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMaxStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索用户(字符串形式)选定当前日期范围的上限 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMin($hWnd) 检索用户当前选定日期的下限范围 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetSelRangeMinStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索用户当前选定日期下限范围的格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetToday($hWnd) 检索指定为“今天”的日期信息 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetTodayStr($hWnd[, $sFormat = "%02d/%02d/%04d"]) 检索指定为“今天”的日期信息格式字符串 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_GetUnicodeFormat($hWnd) 检索控件的 Unicode 字符格式标志 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_HitTest($hWnd, $iX, $iY) 确定指定点位置的控件部分 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCalendarBorder($hWnd[, $iBorderSize = 4[, $fSetBorder = True]]) 设置边框的像素大小 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetColor($hWnd, $iIndex, $iColor) 设置月日历特定部分的颜色 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetCurSel($hWnd, $iYear, $iMonth, $iDay) 设置当前选定的日期 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetDayState($hWnd, $aMasks) 设置月份中当前可见天的状态 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetFirstDOW($hWnd, $sDay) 设置月日历控件中周的第一天 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMaxSelCount($hWnd, $iMaxSel) 设置日历控件中可供选择的最大天数 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetMonthDelta($hWnd, $iDelta) 设置了月的日历控件滚动速度 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetRange($hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay) 设置代表高低限的日期信息 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetSelRange($hWnd, $iMinYear, $iMinMonth, $iMinDay, $iMaxYear, $iMaxMonth, $iMaxDay) 设置月日历控件特定日期的选择范围 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetToday($hWnd, $iYear, $iMonth, $iDay) 设置指定日期的“今天”日期信息 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlMonthCal_SetUnicodeFormat($hWnd[, $fUnicode = False]) 设置控件的 Unicode 字符格式 (需要: #Include <GuiMonthCal.au3>)
_GUICtrlRebar_AddBand($hwndRebar, $hwndChild[, $iMinWidth = 100[, $iDefaultWidth = 100[, $sText = ""[, $iIndex = -1[, $fStyle = -1]]]]]) 添加带区控件 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_AddToolBarBand($hwndRebar, $hwndToolbar[, $sText = ""[, $iIndex = -1[, $fStyle = -1]]]) 添加带区控件.(附带工具栏) (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_BeginDrag($hWnd, $iIndex[, $dwPos = -1]) 添加带区控件.(允许拖动操作) (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_Create($hWnd[, $iStyles = 0x513]) 创建伸缩条控件 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_DeleteBand($hWnd, $iIndex) 删除伸缩条控件带区 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_Destroy(ByRef $hWnd) 删除控件 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_DragMove($hWnd[, $dwPos = -1]) 更新 _GUICtrlRebar_BeginDrag 消息后的伸缩条控件拖动位置 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_EndDrag($hWnd) 终止伸缩条控件的拖动操作.不发送 $RBN_ENDDRAG 通知消息 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBackColor($hWnd, $iIndex) 检索带区的背景颜色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBorders($hWnd, $iIndex) 检索带区的边界.此消息的结果可以用于计算带区的实用面积,返回数据数组. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandBordersEx($hWnd, $iIndex) 检索带区的边界.此消息的结果可以用于计算带区的实用面积,返回数据结构. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandChildHandle($hWnd, $iIndex) 检索带区子窗口句柄(如果存在) (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandChildSize($hWnd, $iIndex) 检索带区设置的子尺寸 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandCount($hWnd) 检索伸缩条控件当前带区数 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandForeColor($hWnd, $iIndex) 检索带区前景色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandHeaderSize($hWnd, $iIndex) 检索带区的标头大小 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandID($hWnd, $iIndex) 获取控件用于识别自定义绘制带区通知消息的值 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandIdealSize($hWnd, $iIndex) 获得带区理想的像素宽度 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandLength($hWnd, $iIndex) 获取带区像素长度 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandLParam($hWnd, $iIndex) 得到应用程序定义的值 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandMargins($hWnd) 获取带区页边距,返回数据数组. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandMarginsEx($hWnd) 获取带区页边距,返回数据结构. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandRect($hWnd, $iIndex) 检索伸缩条控件特定带区的边界矩形,返回数据数组. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandRectEx($hWnd, $iIndex) 检索伸缩条控件特定带区的边界矩形,返回数据结构. (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyle($hWnd, $iIndex) 获取带区样式标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleBreak($hWnd, $iIndex) 确定被设置的(带区在新行)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleChildEdge($hWnd, $iIndex) 确定被设置的(带区有顶底部边缘子窗口)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleFixedBMP($hWnd, $iIndex) 确定被设置的(调整大小不移动背景位图)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleFixedSize($hWnd, $iIndex) 确定被设置的(带区不能调整大小)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleGripperAlways($hWnd, $iIndex) 确定被设置的(带区具有尺寸控制)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleHidden($hWnd, $iIndex) 确定被设置的(带区不可见)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleHideTitle($hWnd, $iIndex) 确定被设置的(带区标题隐藏)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleNoGripper($hWnd, $iIndex) 确定被设置的(带区没有尺寸控制)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleTopAlign($hWnd, $iIndex) 确定被设置的(带区置于顶行)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleUseChevron($hWnd, $iIndex) 确定被设置的(显示下拉按钮)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandStyleVariableHeight($hWnd, $iIndex) 确定被设置的(带区可由伸缩条改变大小)标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBandText($hWnd, $iIndex) 检索带区文本 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBarHeight($hWnd) 检索伸缩条控件高度 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBarInfo($hWnd) 检索伸缩条使用的图像列表信息 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetBKColor($hWnd) 检索伸缩条控件的默认背景色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetColorScheme($hWnd) 检索伸缩条配色方案信息 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetRowCount($hWnd) 检索伸缩条带区行数 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetRowHeight($hWnd, $iIndex) 检索指定带区的高度 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetTextColor($hWnd) 检索控件默认文本颜色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetToolTips($hWnd) 检索控件关联的工具提示控件句柄 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_GetUnicodeFormat($hWnd) 检索控件的 Unicode 字符格式标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_HitTest($hWnd [, $iX = -1 [, $iY = -1]]) 确定指定位置的项目 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_IDToIndex($hWnd, $iID) 带区标识符转换为带区索引 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_MaximizeBand($hWnd, $iIndex[, $fIdeal = True]) 调整带区的理想或最大尺寸 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_MinimizeBand($hWnd, $iIndex) 调整带区的最小尺寸 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_MoveBand($hWnd, $iIndexFrom, $iIndexTo) 移动带区索引为另一索引 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandBackColor($hWnd, $iIndex, $iColor) 设置带区的背景颜色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandForeColor($hWnd, $iIndex, $iColor) 设置带区前景颜色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandHeaderSize($hWnd, $iIndex, $iNewSize) 设置带区标题大小的像素值 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandID($hWnd, $iIndex, $iID) 设置控件用于识别带区的值,以便于通知客户自定义绘制带区 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandIdealSize($hWnd, $iIndex, $iNewSize) 设置带区理想宽度的像素值 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandLength($hWnd, $iIndex, $icx) 设置带区长度(译注:按该函数名称直译,留原文如下) (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandLParam($hWnd, $iIndex, $ilParam) 设置应用程序定义的值 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyle($hWnd, $iIndex, $fStyle) 设置带区样式标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleBreak($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否新起一行 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleChildEdge($hWnd, $iIndex[, $fEnabled = True]) 设置带区子窗口是否有顶部和底部边缘 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleFixedBMP($hWnd, $iIndex[, $fEnabled = True]) 设置带区调整大小时,背景位图是否不移动 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleFixedSize($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否不能调整大小.不显示尺寸控制柄 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleGripperAlways($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否具有尺寸控制柄, 即使伸缩条上仅有一个带区 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleHidden($hWnd, $iIndex [, $fEnabled = True]) 设置带区是否不可见 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleHideTitle($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否隐藏标题 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleNoGripper($hWnd, $iIndex [, $fEnabled = True]) 设置带区是否没有尺寸控制柄, 即使伸缩条上有多个带区 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleTopAlign($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否置于顶行 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleUseChevron($hWnd, $iIndex[, $fEnabled = True]) 设置是否显示下拉按钮 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandStyleVariableHeight($hWnd, $iIndex[, $fEnabled = True]) 设置带区是否可由伸缩条改变大小 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetBandText($hWnd, $iIndex, $sText) Sets the display text for the band of a rebar control (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBarInfo($hWnd, $himl) 设置 rebar 控件的特性 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetBKColor($hWnd, $iColor) 设置伸缩条控件默认背景色 (需要: #include <GuiReBar.au3>)
_GUICtrlRebar_SetColorScheme($hWnd, $BtnHighlight, $BtnShadow) 设置Rebar控件的颜色方案 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetTextColor($hWnd, $iColor) 设置 rebar 控件的默认文本颜色 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetToolTips($hWnd, $hToolTip) 设置 rebar 控件关联的工具提示控件 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_SetUnicodeFormat($hWnd[, $fUnicode = True]) 设置控件 Unicode 字符格式标志 (需要: #Include <GuiRebar.au3>)
_GUICtrlRebar_ShowBand($hWnd, $iIndex[, $fShow = True]) 显示或隐藏 rebar 控件的某个带区 (需要: #Include <GuiRebar.au3>)
_GUICtrlRichEdit_AppendText($hWnd, $sText) 追加文本到客户区尾端 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_AutoDetectURL($hWnd, $fState) 启用或禁用自动检测网址(URL) (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPaste($hWnd) 确定剪贴板内容可否粘贴到控件 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanPasteSpecial($hWnd) 确定剪贴板内容粘贴到控件的是两种格式的哪一种 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanRedo($hWnd) 确定撤销操作能否能重做 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_CanUndo($hWnd) 确定是否有撤销操作 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ChangeFontSize($hWnd, $iIncrement) 递增或递减选定文本的字体大小 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Copy($hWnd) 复制文本到剪贴板 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Create($hWnd, $sText, $iLeft, $iTop [, $iWidth = 150 [, $iHeight = 150 [, $iStyle = -1 [, $iExStyle = -1]]]]) 创建编辑控件 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Cut($hWnd) 剪切文本到剪贴板 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Deselect($hWnd) 取消选择的文本,没有选择地离开 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Destroy(ByRef $hWnd) 删除 RichEdit 控件 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_EmptyUndoBuffer($hWnd) 重置控件撤消标志 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindText($hWnd, $sText [, $fForward = True [, $fMatchCase = False [, $fWholeWord = False [, $iBehavior = 0]]]]) 搜索插入点或定位点的选择文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_FindTextInRange($hWnd, $sText [, $iStart = 0 [, $iEnd = -1 [, $fMatchCase = False [, $fwholeWord = False [, $iBehavior = 0]]]]]) 搜索字符区间范围内的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetBkColor($hWnd) 获取控件的背景颜色 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharAttributes($hWnd) 返回选中文本的属性 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharBkColor($hWnd) 检索所选文本的背景颜色,如果没有选定文本,则检索插入点右边的字符 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharColor($hWnd) 检索所选文本的颜色,如果没有选定文本,则检索插入点右边的字符 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosFromXY($hWnd, $iX, $iY) 获取最接近客户区指定点的字符区间位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfNextWord($hWnd, $iCpStart) 获取下一个单词之前的字符区间位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharPosOfPreviousWord($hWnd, $iCpStart) 获取上一个单词之前的字符区间位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetCharWordBreakInfo($hWnd, $iCp) 获取上一个单词之前的字符区间位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFirstCharPosOnLine($hWnd [, $iLine = -1]) 检索字符区间位置上一行的第一个字符 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetFont($hWnd) 获取选定字体的属性,如果没有选择,则获取插入点的字体属性 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineCount($hWnd) 检索多行编辑控件的行数 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineLength($hWnd, $iLine) 检索行的字符长度 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetLineNumberFromCharPos($hWnd, $iCharPos) 检索字符区间位置的行数 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextRedo($hWnd, $fName = True) 检索下一个可能的"重做"动作名称或类型 ID (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNextUndo($hWnd, $fName = True) 检索下一个可能的"撤消"动作名称或类型 ID (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetNumberOfFirstVisibleLine($hWnd) 获取控件可见行的第一行 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAlignment($hWnd) 获取选定段落的对齐方式,或如果没有选择,则获取当前段落 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaAttributes($hWnd) 获取(第一)选中段落;或没有选择时的当前段落属性 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaBorder($hWnd) 获取第一选中段落;或没有选择时的当前段落的边框设置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaIndents($hWnd) 获取第一个选定段落;或者没有选择时的当前段落的边框缩进设置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaNumbering($hWnd) 获获取第一个选定段落; 或者没有选择时的当前段落的编号方式类型 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaShading($hWnd) 获取获取(第一)选定的;或者如果没有选择时的当前段落的明暗处理 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaSpacing($hWnd) 获取(第一)选定段落;或者没有选择时的当前段落的间距设置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetParaTabStops($hWnd) 获取(第一)选中段落;或者没有选择时的当前段落的制表位 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetPasswordChar($hWnd) 获取 RichEdit 控件显示当用户输入文本的密码字符 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetRECT($hWnd) 检索控件的格式化矩形 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetScrollPos($hWnd) 获取控件的滚动位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSel($hWnd) 获取选中字符区间的低、高位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelAA($hWnd) 获取选中字符区间按顺序的当前锚点 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSelText($hWnd) 检索当前选定的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetSpaceUnit() 获取水平和垂直空间计算单位,供 _GUICtrlRichEdit 函数的参数使用 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetText($hWnd [, $fCrToCrLf = False [, $iCodePage = 0 [, $sReplChar = ""]]]) 获取控件中的全部文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInLine($hWnd, $iLine) 获取一行文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextInRange($hWnd, $iStart, $iEnd) 获取字符区间位置的另一个文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetTextLength($hWnd [, $fExact = True [, $fChars = False]]) 获取控件中的整个文本的长度 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetVersion() 获取富文本编辑控件的版本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetXYFromCharPos($hWnd, $iCharPos) 检索字符区间位置的 X、Y 坐标 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GetZoom($hWnd) 获取控件文本区间缩放级别 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_GotoCharPos($hWnd, $iCharPos) 移动插入点到字符区间位置 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_HideSelection($hWnd[, $fHide = True]) 隐藏(或显示)选区 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_InsertText($hWnd, $sText) 在插入点或定位点插入文本 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsModified($hWnd) 检索 RichEdit 控件的修改标志状态 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_IsTextSelected($hWnd) 确定文本是否选中 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Paste($hWnd) 从剪贴板粘贴 RTF 或 RTF 格式的对象 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PasteSpecial($hWnd, $fAndObjects = True) 从剪贴板粘贴 RTF 或 RTF 格式的对象(专用) (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_PauseRedraw($hWnd) 暂停控件的重绘 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Redo($hWnd) 对最后的撤消作重做操作 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ReplaceText($hWnd, $sText[, $fCanUndo = True]) 替换所选的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ResumeRedraw($hWnd) 恢复控件刷新 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLineOrPage($hWnd, $sAction) 滚动一行或一页的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollLines($hWnd, $iQlines) 滚动多行文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_ScrollToCaret($hWnd) 滚动到插入符号所在行 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetBkColor($hWnd [, $iColor = Default]) 设置控件的背景颜色 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharAttributes($hWnd, $sStatesAndEffects [, $fWord = False]) 打开或关闭选定文本,(或者没有选择时,则取插入点的文本) 的属性 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharBkColor($hWnd [, $iColor]) 设置选定文本 (或没有选定时,设置插入点插入文本) 的背景颜色 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetCharColor($hWnd [, $iColor]) 设置所选文本 (或者没有选中时,设置插入点插入文本) 的颜色 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetEventMask($hWnd, $iEventMask) 发送通知消息到指定的父窗口 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetFont($hWnd [, $iPoints = Default [, $sName = Default [, $iCharset = Default [, $iLcid = Default]]]]) 设置选定文本(或者没有选定时,设置插入点插入文本) 的字体属性 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetLimitOnText($hWnd, $iNewLimit) 修改可以键入的字符数,粘贴或将流(streamed)作为 Rich 文本格式 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetModified($hWnd, $fState = True) 设置或清除修改标志 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAlignment($hWnd, $sAlignment) 设置当前选定段落 (或者没有选择时,设置插入点所在段落) 的对齐方式 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaAttributes($hWnd, $sStatesAndAtts) 设置(第一)当前选择(或没有选择时的插入点所在段落)的属性 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaBorder($hWnd [, $sLocation [, $vLineStyle [, $sColor [, $iSpace]]]]) 设置(第一)当前选择(或没有选择时的插入点所在段落)的边框 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaIndents($hWnd [, $vLeft = Default [, $iRight = Default [, $iFirstLine = Default]]]) 设置(第一)当前选择(或没有选择时的插入点所在段落)的缩进 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaNumbering($hWnd, $sStyle [, $iTextToNbrSpace = Default [, $fForceRoman=False]]) 设置(第一)当前选择(或没有选择时的插入点所在段落)的编号方式 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaShading($hWnd [, $iWeight = Default [, $sStyle = Default [, $sForeColor = Default [, $sBackColor = Default]]]]) 设置(第一)当前选择(或没有选择时的插入点所在段落)的明暗处理 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaSpacing($hWnd, [$vInter=Default [, $iBefore=Default [, $iAfter=Default]]]) 设置(第一)当前选择(或没有选择时的插入点所在段落)的段落间距 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetParaTabStops($hWnd, $sTabStops) 设置(第一)当前选择(或没有选择时的插入点所在段落)的制表位 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetPasswordChar($hWnd[, $cDisplayChar = "0"]) 设置代替用户输入文本显示的密码字符 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetReadOnly($hWnd[, $fState = True]) 设置或删除只读状态 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetRECT($hWnd [,$iLeft = Default [, $iTop = Default [, $iRight = Default [, $iBottom = Default [, $bRedraw = True]]]]]]) 设置控件的格式化矩形 译注:原描述文字与 _GUICtrlRichEdit_SetModified 函数完全一样,参照 _GUICtrlRichEdit_GetRECT 函数汉化此函数的描述文字. (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetScrollPos($hWnd, $iX, $iY) 设置滚动起始点 ($ix,$iY) 在控件的左上角 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSel($hWnd, $iAnchor, $iActive[, $fHideSel = False]) 设置选择字符的高、低位置 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetSpaceUnit($sUnit) 设置水平和垂直空间计算单位,供 _GUICtrlRichEdit 函数的参数使用 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetTabStops($hWnd, $vTabStops [, $fRedraw = True]) 设置控件制表位 (需要: #include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetText($hWnd, $sText) 设置控件的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetUndoLimit($hWnd, $iLimit) 设置撤消队列可以存储的最大数量 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_SetZoom($hWnd, $iPercent) 设置控件缩放级别 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromFile($hWnd, $sFilespec) 从文件中设置控件的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamFromVar($hWnd, $sVar) 从变量设置控件中的文本 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToFile($hWnd, $sFilespec [, $fIncludeCOM=True [, $iOpts=0 [, $iCodePage = 0]]]) 控件的内容写入到文件 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_StreamToVar($hWnd [, $fRtf = True [, $fIncludeCOM=True [, $iOpts=0 [, $iCodePage = 0]]]]) 控件内容写入到变量 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlRichEdit_Undo($hWnd) 撤消控件的撤消队列中的最后编辑操作 (需要: #Include <GuiRichEdit.au3>)
_GUICtrlSlider_ClearSel($hWnd) 清除当前选择范围 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_ClearTics($hWnd) 移除滑块中当前刻度线 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_Create($hWnd, $iX, $iY [, $iWidth = 100 [, $iHeight = 20 [, $iStyle = 0x0001 [, $iExStyle = 0x00000000]]]]) 创建滑块控件 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_Destroy(ByRef $hWnd) 删除控件 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetBuddy($hWnd, $fLocation) 检索特定位置与平滑调节控件合作的窗口句柄 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRect($hWnd) 检索滑块通道矩形边界的大小和位置,返回数据数组. (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetChannelRectEx($hWnd) 检索滑块通道矩形边界的大小和位置,返回数据结构. (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetLineSize($hWnd) 检索滑动条的通道大小 (译注:此函数解释描述与 _GUICtrlSlider_GetPageSize 函数完全一样,次处依据示例脚本汉化)原文:Retrieves the number of logical positions the slider moves (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetLogicalTics($hWnd) 检索包含滑块刻度逻辑位置的数组 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetNumTics($hWnd) 检索滑块的刻度数 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetPageSize($hWnd) 检索滑块页面大小 (译注:此函数解释描述与 _GUICtrlSlider_GetLineSize 函数完全一样,次处依据示例脚本汉化)原文:Retrieves the number of logical positions the slider moves (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetPos($hWnd) 检索滑块逻辑位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetRange($hWnd) 检索滑块的最高和最低位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMax($hWnd) 检索滑块的最大位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetRangeMin($hWnd) 检索滑块的最低位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetSel($hWnd) 检索当前选择范围的起始和结束位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetSelEnd($hWnd) 检索当前选择范围的结束位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetSelStart($hWnd) 检索当前选择范围的起始位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbLength($hWnd) 检索滑块(指针)的长度 原文:Retrieves the length of the slider (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRect($hWnd) 检索滑块边界矩形的大小和位置,返回数据数组. (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetThumbRectEx($hWnd) 检索滑块边界矩形的大小和位置,返回数据结构. (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetTic($hWnd, $iTic) 检索刻度标记的逻辑位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetTicPos($hWnd, $iTic) 检索刻度标记的当前物理位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetToolTips($hWnd) 检索分配给滑块的工具提示控件句柄(如果存在时).(译注:当拖动滑块指针时,工具提示控件提示当前刻度位置值) (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_GetUnicodeFormat($hWnd) 检索控件的 Unicode 字符格式标志 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetBuddy($hWnd, $fLocation, $hBuddy) 指定滑块控件合作窗口 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetLineSize($hWnd, $iLineSize) 检索滑动条的通道大小 (此处依据示例脚本汉化)(译注:此函数解释描述与 _GUICtrlSlider_SetPageSize 函数完全一样)原文:Sets the number of logical positions the slider moves (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetPageSize($hWnd, $iPageSize) 检索滑动条的页面大小 (此处依据示例脚本汉化)(译注:此函数解释描述与 _GUICtrlSlider_SetLineSize 函数完全一样)原文:Sets the number of logical positions the slider moves (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetPos($hWnd, $iPosition) 设置当前滑块的逻辑位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetRange($hWnd, $iMinimum, $iMaximum) 设置滑块最低和最高逻辑位置范围 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMax($hWnd, $iMaximum) 设置滑块的最大逻辑位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetRangeMin($hWnd, $iMinimum) Sets the minimum logical position for the slider (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetSel($hWnd, $iMinimum, $iMaximum) 设置控件有效选择范围的开始和结束位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetSelEnd($hWnd, $iMaximum) 设置当前选择范围的逻辑结束位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetSelStart($hWnd, $iMinimum) 设置当前选择范围的逻辑起点位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetThumbLength($hWnd, $iLength) 设置滑块(指针)长度.原文:Sets the length of the slider (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetTic($hWnd, $iPosition) 设置滑块指定逻辑位置的刻度标记 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetTicFreq($hWnd, $iFreg) 设置滑块刻度间隔频率 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetTipSide($hWnd, $fLocation) 设置工具提示控件位置 (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetToolTips($hWnd, $hWndTT) 分配工具提示控件到滑块控件.(译注:当拖动滑块指针时,工具提示控件提示当前刻度位置值) (需要: #Include <GuiSlider.au3>)
_GUICtrlSlider_SetUnicodeFormat($hWnd, $fUnicode) 设置控件 Unicode 字符格式标志 (需要: #Include <GuiSlider.au3>)
_GUICtrlStatusBar_Create($hWnd[, $vPartEdge = -1[, $vPartText = ""[, $iStyles = -1[, $iExStyles = 0x00000000]]]]) 创建状态栏 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Destroy(ByRef $hWnd) 删除控件 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_EmbedControl($hWnd, $iPart, $hControl[, $iFit = 4]) 嵌入子控件 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBorders($hWnd) 检索水平/垂直边框的当前宽度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersHorz($hWnd) 检索当前水平边框宽度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersRect($hWnd) 检索当前矩形边框宽度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetBordersVert($hWnd) 检索当前垂直边框宽度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetCount($hWnd) 返回(状态栏)各部分数量 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetHeight($hWnd) 检索部件高度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetIcon($hWnd[, $iIndex = 0]) 检索部件图标 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetParts($hWnd) 检索部件的数量和界限 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRect($hWnd, $iPart) 检索部件边界矩形,返回数据数组. (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetRectEx($hWnd, $iPart) 检索部件边界矩形,返回数据结构. (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetText($hWnd, $iPart) 返回指定部分文本 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextFlags($hWnd, $iPart) 检索部件文本长度标志 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLength($hWnd, $iPart) 检索部件文本长度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTextLengthEx($hwnd, $iPart) 检索部件的 uFlag (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetTipText($hWnd, $iPart) 检索部件工具提示文本 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetUnicodeFormat($hWnd) 检索 Unicode 字符格式标志 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_GetWidth($hWnd, $iPart) 检索部件的宽度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_IsSimple($hWnd) 检查状态栏控件是否为简单模式 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_Resize($hWnd) 重新定义状态栏大小 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetBkColor($hWnd, $iColor) 设置背景颜色 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetIcon($hWnd, $iPart[, $hIcon = -1[, $sIconFile = ""]]) 设置部件图标 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetMinHeight($hWnd, $iMinHeight) 设置状态窗口绘图区域最低高度 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetParts($hWnd[, $iaParts = -1[, $iaPartWidth = 25]]) 设置部件数量与边框 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetSimple($hWnd, $fSimple = True) 指定是否显示简单文本状态窗口, 或显示所有窗口部件 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetText($hWnd, $sText = "", $iPart = 0, $iUFlag = 0) 设置状态窗口指定部件的文本 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetTipText($hWnd, $iPart, $sText) 设置部件的工具提示文本 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_SetUnicodeFormat($hWnd[, $fUnicode = True]) 设置 Unicode 字符格式标志 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlStatusBar_ShowHide($hWnd, $iState) 显示/隐藏状态栏控件 (需要: #Include <GuiStatusBar.au3>)
_GUICtrlTab_ActivateTab($hWnd, $iIndex) Activates a tab by its index (需要: #Include <GuiTab.au3>)
_GUICtrlTab_ClickTab($hWnd, $iIndex[, $sButton = "left"[, $fMove = False[, $iClicks = 1[, $iSpeed = 1]]]]) 点击一个标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_Create($hWnd, $iX, $iY[, $iWidth=150[, $iHeight=150[, $iStyle=0x00000040[, $iExStyle=0x00000000]]]]) 创建一个标签控件(TabControl) (需要: #Include <GuiTab.au3>)
_GUICtrlTab_DeleteAllItems($hWnd) 删除所有标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_DeleteItem($hWnd, $iIndex) 删除一个标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_DeselectAll($hWnd [, $fExclude = True]) 复位标签选项卡,清除任何被设置为按下的状态 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_Destroy(ByRef $hWnd) 删除控件 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_FindTab($hWnd, $sText[, $fInStr = False[, $iStart = 0]]) 通过指定的文本搜索一个标签. (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetCurFocus($hWnd) 返回控件中焦点标签的索引 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetCurSel($hWnd) 检测当前选择的标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRect($hWnd) 检索客户区显示的矩形,返回数据数组. (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetDisplayRectEx($hWnd) 检索客户区显示的矩形,返回数据结构. (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetExtendedStyle($hWnd) 检索当前正在使用的扩展样式 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetImageList($hWnd) 返回标签控件图像列表. (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetItem($hWnd, $iIndex) 返回一个Tab标签信息 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetItemCount($hWnd) 返回标签的数量 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetItemImage($hWnd, $iIndex) 检索标签图像索引 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetItemParam($hWnd, $iIndex) 检索标签的 Param 参数数据 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_GetItemRect($hWnd, $iIndex) 检索标签的边界矩形,返回数据数组. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemRectEx($hWnd, $iIndex) 检索标签的边界矩形,返回数据结构. (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemState($hWnd, $iIndex) 检索标签的状态 (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetItemText($hWnd, $iIndex) 返回一个标签控件的文本 (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetRowCount($hWnd) 检索当前标签行数量 (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetToolTips($hWnd) 检索控件关联的工具提示控件句柄 (需要: #include <GuiTab.au3>)
_GUICtrlTab_GetUnicodeFormat($hWnd) 检索控件的 Unicode 字符格式标志 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_HighlightItem($hWnd, $iIndex[, $fHighlight = True]) 设置标签项目高亮状态 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_HitTest($hWnd, $iX, $iY) 确定测试点位于控件何处 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_InsertItem($hWnd, $iIndex, $sText[, $iImage = -1[, $iParam = 0]]) 插入新标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_RemoveImage($hWnd, $iIndex) 删除控件图像列表的图像 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetCurFocus($hWnd, $iIndex) 设置指定标签的焦点 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetCurSel($hWnd, $iIndex) 选择标签 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetExtendedStyle($hWnd, $iStyle) 设置当前使用的扩展样式 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetImageList($hWnd, $hImage) 设置与标签控件关联的图像列表 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItem($hWnd, $iIndex[, $sText = -1[, $iState = -1[, $iImage = -1[, $iParam = -1]]]]) 设置标签选项卡的信息 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItemImage($hWnd, $iIndex, $iImage) 设置标签选项卡图像 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItemParam($hWnd, $iIndex, $iParam) 设置标签 param 数据 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItemSize($hWnd, $iWidth, $iHeight) 设置固定宽度制表符或所有者绘制控件的宽度和高度 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItemState($hWnd, $iIndex, $iState) 设置标签状态 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetItemText($hWnd, $iIndex, $sText) 设置标签文本 (需要: #Include <GuiTab.au3>)
_GUICtrlTab_SetMinTabWidth($hWnd, $iMinWidth) 设置标签项目的最小宽度 (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetPadding($hWnd, $iHorz, $iVert) 设置标签图标和标签文本周围的填充空间 (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetToolTips($hWnd, $hToolTip) 设置控件关联的工具提示控件 (需要: #include <GuiTab.au3>)
_GUICtrlTab_SetUnicodeFormat($hWnd, $fUnicode) 设置控件 Unicode 字符格式标志 (需要: #include <GuiTab.au3>)
_GUICtrlToolbar_AddBitmap($hWnd, $iButtons, $hInst, $iID) 添加图像到图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_AddButton($hWnd, $iID, $iImage [, $iString = 0 [, $iStyle = 0 [, $iState = 4 [, $iParam = 0]]]]) 添加按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_AddButtonSep($hWnd[, $iWidth = 6]) 添加一个分隔符 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_AddString($hWnd, $sString) 添加新字符串到工具栏的字符串池 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_ButtonCount($hWnd) 检索按钮数 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_CheckButton($hWnd, $iCommandID[, $fCheck = True]) 选中或取消选中某个按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickAccel($hWnd, $cAccel[, $sButton = "left"[, $fMove = False[, $iClicks = 1[, $iSpeed = 1]]]]) 使用快捷键点击特定按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickButton($hWnd, $iCommandID[, $sButton = "left"[, $fMove = False[, $iClicks = 1[, $iSpeed = 1]]]]) 点击特定按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_ClickIndex($hWnd, $iIndex[, $sButton = "left"[, $fMove = False[, $iClicks = 1[, $iSpeed = 1]]]]) 使用索引点击特定按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_CommandToIndex($hWnd, $iCommandID) 检索指定命令标识符相关联的按钮索引 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_Create($hWnd[, $iStyle = 0x00000800[, $iExStyle = 0x00000000]]) 创建一个工具栏控件 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_Customize($hWnd) 显示自定义工具栏对话框 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_DeleteButton($hWnd, $iCommandID) 删除工具栏按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_Destroy(ByRef $hWnd) 删除控件 (需要: #include <GuiToolbar.au3>)
_GUICtrlToolbar_EnableButton($hWnd, $iCommandID[, $fEnable = True]) 启用或禁用指定按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_FindToolbar($hWnd, $sText) 查找一个指定工具栏 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetAnchorHighlight($hWnd) 检索定位高亮设置 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetBitmapFlags($hWnd) 检索位图类型标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonBitmap($hWnd, $iCommandID) 检索按钮相关位图的索引 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonInfo($hWnd, $iCommandID) 检索按钮信息,返回数据数组. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonInfoEx($hWnd, $iCommandID) 检索按钮信息,返回数据结构. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonParam($hWnd, $iCommandID) 检索按钮参数值 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonRect($hWnd, $iCommandID) 检索按钮的矩形,返回数据数组. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonRectEx($hWnd, $iCommandID) 检索按钮的矩形,返回数据结构. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonSize($hWnd) 检索当前按钮宽度和高度的像素值 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonState($hWnd, $iCommandID) 检索指定按钮的状态信息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonStyle($hWnd, $iCommandID) 检索按钮的样式标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetButtonText($hWnd, $iCommandID) 检索按钮的显示文本 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetColorScheme($hWnd) 检索配色方案信息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetDisabledImageList($hWnd) 检索按钮禁用状态的图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetExtendedStyle($hWnd) 检索扩展样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetHotImageList($hWnd) 检索热按钮状态图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetHotItem($hWnd) 检索热项目索引 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetImageList($hWnd) 检索默认(常规)状态图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetInsertMark($hWnd) 检索当前插入标记 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetInsertMarkColor($hWnd) 检索绘制插入标记的颜色 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetMaxSize($hWnd) 检索所有可见按钮和分隔符的总大小 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetMetrics($hWnd) 检索工具栏控件规格 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetPadding($hWnd) 检索水平与垂直填充 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetRows($hWnd) 返回按钮排(行)数 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetString($hWnd, $iIndex) 从字符串池得到字符串 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyle($hWnd) 检索工具栏的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleAltDrag($hWnd) 检索控件是否具有按钮可以拖动样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleCustomErase($hWnd) 检索控件是否具有生成 NM_CUSTOMDRAW 通知消息的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleFlat($hWnd) 检索控件是否为平面控件样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleList($hWnd) 检索控件是否为按钮文本在位图右边的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleRegisterDrop($hWnd) 检索控件是否具有生成 TBN_GETOBJECT 通知消息的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleToolTips($hWnd) 检索控件是否为具有工具提示控件的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleTransparent($hWnd) 检索控件是否为透明的样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetStyleWrapable($hWnd) 检索控件是否具有换行样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetTextRows($hWnd) 检索按钮显示文本行的最大行数 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetToolTips($hWnd) 返回 ToolTip 控件句柄. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_GetUnicodeFormat($hWnd) 检索 Unicode 字符格式标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_HideButton($hWnd, $iCommandID[, $fHide = True]) 隐藏或显示指定的按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_HighlightButton($hWnd, $iCommandID[, $fHighlight = True]) 设置按钮高亮状态 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_HitTest($hWnd, $iX, $iY) 确定测试点的位置 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IndexToCommand($hWnd, $iIndex) 检索按钮相关的命令标识符 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_InsertButton($hWnd, $iIndex, $iID, $iImage[, $sText = ""[, $iStyle = 0[, $iState = 4[, $iParam = 0]]]]) 插入按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_InsertMarkHitTest($hWnd, $iX, $iY) 检索点的插入标记信息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonChecked($hWnd, $iCommandID) 检索按钮是否被选中 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonEnabled($hWnd, $iCommandID) 检索按钮是否启用 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonHidden($hWnd, $iCommandID) 检索按钮是否隐藏 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonHighlighted($hWnd, $iCommandID) 检索按钮是否高亮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonIndeterminate($hWnd, $iCommandID) 检索按钮是否为不确定状态 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_IsButtonPressed($hWnd, $iCommandID) 检索按钮是否被按下 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_LoadBitmap($hWnd, $sFileName) 从文件添加位图的图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_LoadImages($hWnd, $iBitMapID) 加载系统定义的按钮图像到工具栏控件的图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_MapAccelerator($hWnd, $cAccel) 检索按钮对应的快捷键 ID (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_MoveButton($hWnd, $iOldPos, $iNewPos) 使用索引移动按钮的位置 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_PressButton($hWnd, $iCommandID[, $fPress = True]) 按压或释放指定的按钮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetAnchorHighlight($hWnd, $fAnchor) 设置定位高亮 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetBitmapSize($hWnd, $iWidth, $iHeight) 设置工具栏位图图像的大小 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonBitMap($hWnd, $iCommandID, $iIndex) 设置按钮相关的位图索引 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonInfo($hWnd, $iCommandID[, $iImage = -3[, $iState = -1[, $iStyle = -1[, $iWidth = -1[, $iParam = -1]]]]]) 设置按钮扩展信息,使用参数. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonInfoEx($hWnd, $iCommandID, $tButton) 设置按钮扩展信息,使用数据结构. (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonParam($hWnd, $iCommandID, $iParam) 设置按钮参数值 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonSize($hWnd, $iHeight, $iWidth) 设置工具栏按钮的大小 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonState($hWnd, $iCommandID, $iState) 设置按钮的状态信息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonStyle($hWnd, $iCommandID, $iStyle) 设置按钮的样式标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonText($hWnd, $iCommandID, $sText) 设置按钮的显示文本 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetButtonWidth($hWnd, $iMin, $iMax) 设置工具栏按钮宽度最小和最大值 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetCmdID($hWnd, $iIndex, $iCommandID) 设置工具栏按钮命令标识符 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetColorScheme($hWnd, $iHighlight, $iShadow) 设置配色方案信息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetDisabledImageList($hWnd, $hImageList) 设置禁用状态图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetDrawTextFlags($hWnd, $iMask, $iDTFlags) 设置工具栏文本绘制标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetExtendedStyle($hWnd, $iStyle) 设置控件扩展样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetHotImageList($hWnd, $hImageList) 设置热按钮状态图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetHotItem($hWnd, $iIndex) 设置热项目 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetImageList($hWnd, $hImageList) 设置默认(常规)状态按钮的图像列表 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetIndent($hWnd, $iIndent) 设置第一按钮缩进 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetIndeterminate($hWnd, $iCommandID[, $fState = True]) 设置或清除按钮的不确定状态 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetInsertMark($hWnd, $iButton[, $iFlags = 0]) 设置工具栏当前插入标记 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetInsertMarkColor($hWnd, $iColor) 设置绘制插入标记的颜色 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetMaxTextRows($hWnd, $iMaxRows) 设置显示按钮文本的最大行数 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetMetrics($hWnd, $iXPad, $iYPad, $iXSpacing, $iYSpacing) 检索工具栏控件规格 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetPadding($hWnd, $iCX, $iCY) 设置控件填充 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetParent($hWnd, $hParent) 设置窗口控件发送通知消息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetRows($hWnd, $iRows[, $fLarger = True]) 设置按钮行数 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyle($hWnd, $iStyle) 设置控件样式 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleAltDrag($hWnd [, $fState = True]) 设置控件按钮是否允许被拖动 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleCustomErase($hWnd[, $fState = True]) 设置控件是否生成 NM_CUSTOMDRAW 通知消息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleFlat($hWnd, $fState) 设置控件是否为平面类型 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleList($hWnd, $fState) 设置按钮文本是否在位图的右边 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleRegisterDrop($hWnd, $fState) 设置控件是否生成 TBN_GETOBJECT 通知消息 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleToolTips($hWnd, $fState) 设置控件是否有工具提示 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleTransparent($hWnd, $fState) 设置控件是否透明 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetStyleWrapable($hWnd, $fState) 设置控件按钮是否 wrapable(换行) (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetToolTips($hWnd, $hToolTip) 设置工具栏关联工具提示控件 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetUnicodeFormat($hWnd, $fUnicode = False) 设置 Unicode 字符格式标志 (需要: #Include <GuiToolBar.au3>)
_GUICtrlToolbar_SetWindowTheme($hWnd, $sTheme) 设置可视化样式(系统主题) (需要: #Include <GuiToolBar.au3>)
_GUICtrlTreeView_Add($hWnd, $hSibling, $sText[, $iImage = -1[, $iSelImage = -1]]) 添加主项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChild($hWnd, $hParent, $sText [, $iImage = -1 [, $iSelImage = -1]]) 添加子项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_AddChildFirst($hWnd, $hParent, $sText[, $iImage = -1[, $iSelImage = -1]]) 添加第一子项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_AddFirst($hWnd, $hSibling, $sText [, $iImage = -1 [, $iSelImage = -1]]) 添加第一主项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_BeginUpdate($hWnd) 开始控件更新,直到 EndUpdate 函数被调用 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_ClickItem($hWnd, $hItem[, $sButton = "left"[, $fMove = False[, $iClicks = 1[, $iSpeed = 0]]]]) 点击项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_Create($hWnd, $iX, $iY[, $iWidth=150[, $iHeight=150[, $iStyle=0x00000037[, $iExStyle=0x00000000]]]]) 创建一个树形查看(TreeView)控件 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateDragImage($hWnd, $hItem) 创建项目拖位图 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_CreateSolidBitMap($hWnd, $iColor, $iWidth, $iHeight) 创建单色位图 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_Delete($hWnd[, $hItem = 0]) 删除项目及其所有子项 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteAll($hWnd) 从树形查看(Tree-View)控件移除所有项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_DeleteChildren($hWnd, $hItem) 删除项目的全部子项 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_Destroy(ByRef $hWnd) 删除控件 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRect($hWnd, $hItem [, $fTextOnly = False]) 返回树项目矩形,返回数据数组. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_DisplayRectEx($hWnd, $hItem[, $fTextOnly = False]) 返回树项目矩形,返回数据结结构. (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_EditText($hWnd, $hItem) 开始就地编辑指定项的文本 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EndEdit($hWnd, $fCancel = False) 结束项目的文本编辑 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_EndUpdate($hWnd) 停止控件更新并关闭 BeginUpdate 函数 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_EnsureVisible($hWnd, $hItem) 确保项目可见,展开父项目或必要时滚动项目. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Expand($hWnd[, $hItem = 0[, $fExpand = True]]) 展开或折叠父项目相关的子项列表 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_ExpandedOnce($hWnd, $hItem) 检索项目的子项列表是否至少展开一次 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItem($hWnd, $sText [, $fInStr = False [, $hStart = 0]]) 检索指定文本的项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_FindItemEx($hWnd, $sPath [, $hStart = 0]) 搜索指定树目录路径的项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBkColor($hWnd) 返回文本背景色 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetBold($hWnd, $hItem) 检索项目文本是否为粗体样式 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChecked($hWnd, $hItem) 检索项目复选框是否选中 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildCount($hWnd, $hItem) 检索父项的子项数 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetChildren($hWnd, $hItem) 检索项目是否有子项 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCount($hWnd) 返回项目总数 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetCut($hWnd, $hItem) 检索项目是否有剪切和粘贴操作 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetDropTarget($hWnd, $hItem) 检索项目是否为拖放目标 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetEditControl($hWnd) 检索项目文本编辑控件句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetExpanded($hWnd, $hItem) 检索项目是否展开 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstChild($hWnd, $hItem) 检索指定项目的第一个子项 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstItem($hWnd) 检索顶层或绝对第一项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFirstVisible($hWnd) 检索第一可见项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetFocused($hWnd, $hItem) 检索项目是否具有焦点 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetHeight($hWnd) 检索当前每个项目的高度 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageIndex($hWnd, $hItem) 检索正常状态图像索引 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetImageListIconHandle($hWnd, $iIndex) 检索图像列表句柄 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetIndent($hWnd) 检索子项相对父项目的缩进像素值 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetInsertMarkColor($hWnd) 检索插入标记颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetISearchString($hWnd) 检索增量搜索字符串 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemByIndex($hWnd, $hItem, $iIndex) 检索子项在项目列表中的位置 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemHandle($hWnd [, $hItem = 0]) 返回项目句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetItemParam($hWnd [, $hItem = 0]) 检索项目的特定应用值 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLastChild($hWnd, $hItem) 检索指定项目的最后子项 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetLineColor($hWnd) 返回线颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNext($hWnd, $hItem) 检索调用项目的下一个项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextChild($hWnd, $hItem) 检索同级别的下一个项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextSibling($hWnd, $hItem) 检索同级别的下一个项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNextVisible($hWnd, $hItem) 检索指定项目的下一个可见项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetNormalImageList($hWnd) 返回正常(常规)图像列表 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentHandle($hWnd [, $hItem = 0]) 检索父项目句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetParentParam($hWnd, $hItem = 0) 检索项目的父控件 ID / Param(参数)  (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrev($hWnd, $hItem) 检索调用项目的上一个项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevChild($hWnd, $hItem) 检索指定项目的前一子项 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevSibling($hWnd, $hItem) 检索同级别的上一项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetPrevVisible($hWnd, $hItem) 检索第一个可见项之前的项目 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetScrollTime($hWnd) 检索最大滚动时间 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelected($hWnd, $hItem) 检索项目是否选中 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelectedImageIndex($hWnd, $hItem) 检索选中项目的图像在图像列表中的索引 (需要: #Include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSelection($hWnd) 检索当前选定的项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetSiblingCount($hWnd, $hItem) 检索项目的同级项目数 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetState($hWnd [, $hItem = 0]) 检索项目状态 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageIndex($hWnd, $hItem) 检索项目的状态图像索引 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetStateImageList($hWnd) 检索状态图像列表句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetText($hWnd [, $hItem = 0]) 检索项目文本 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTextColor($hWnd) 返回文本颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetToolTips($hWnd) 得到子工具提示(ToolTip)控件句柄. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetTree($hWnd, $hItem) 检索项目及其子项全部文本 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetUnicodeFormat($hWnd) 检索 Unicode 字符格式标志 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisible($hWnd, $hItem) 检索项目在当前控件视图中是否可见 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_GetVisibleCount($hWnd) 检索控件中显示完全可见的项目最大数 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTest($hWnd, $iX, $iY) 检索测试点位置相对于控件的信息,返回结果代码. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestEx($hWnd, $iX, $iY) 检索测试点位置相对于控件的信息,返回数据结构. (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_HitTestItem($hWnd, $iX, $iY) 检索指定坐标的项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Index($hWnd, $hItem) 检索项目在列表的位置 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_InsertItem($hWnd, $sItem_Text [, $hItem_Parent = 0 [, $hItem_After = 0 [, $iImage = -1 [, $iSelImage = -1]]]]) 插入项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsFirstItem($hWnd, $hItem) 检索项目是否为树的第一项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_IsParent($hWnd, $hParent, $hItem) 检索某项目是否为另一个项目的父项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Level($hWnd, $hItem) 检索项目缩进级别 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItem($hWnd, $hItem [, $iFlag=0]) 选中项目,并滚动到视图或刷新项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SelectItemByIndex($hWnd, $hItem, $iIndex) 选择指定父列表索引的项目 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBkColor($hWnd, $vRGBColor) 设置背景色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetBold($hWnd, $hItem [, $fFlag = True]) 设置项目的粗体文本样式 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChecked($hWnd, $hItem [, $fCheck = True]) 设置项目复选框选中 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCheckedByIndex($hWnd, $hItem, $iIndex [, $fCheck = True]) 设置指定索引的项目复选框选中 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetChildren($hWnd, $hItem [, $fFlag = True]) 设置项目的子项标志 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetCut($hWnd, $hItem [, $fFlag = True]) 设置项目的剪切和粘贴操作 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetDropTarget($hWnd, $hItem [, $fFlag = True]) 设置项目为拖放目标 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetFocused($hWnd, $hItem [, $fFlag = True]) 设置项目的焦点 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetHeight($hWnd, $iHeight) 设置每个项目的高度 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIcon($hWnd [, $hItem = 0 [, $sIconFile ="" [, $iIconID = 0 [, $iImageMode = 6]]]]) 设置项目图标 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetImageIndex($hWnd, $hItem, $iIndex) 设置显示项目正常状态的图标索引 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetIndent($hWnd, $iIndent) 设置树视图控件的缩进宽度 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMark($hWnd, $hItem [, $fAfter = True]) 设置插入标记 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetInsertMarkColor($hWnd, $iColor) 设置插入标记颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemHeight($hWnd, $hItem, $iIntegral) 设置项目高度 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetItemParam($hWnd, $hItem, $iParam) 设置项目的关联值 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetLineColor($hWnd, $vRGBColor) 设置线条颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetNormalImageList($hWnd, $hImageList) 设置控件正常状态的图像列表 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetScrollTime($hWnd, $iTime) 设置最大滚动时间 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelected($hWnd, $hItem [, $fFlag = True]) 设置项目的选中状态 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetSelectedImageIndex($hWnd, $hItem, $iIndex) 设置选中状态的图像索引 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetState($hWnd, $hItem [, $iState = 0 [, $iSetState = 0]]) 设置项目的状态 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageIndex($hWnd, $hItem, $iIndex) 设置项目状态图像的图像列表索引 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetStateImageList($hWnd, $hImageList) 设置控件的状态图像列表 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetText($hWnd [, $hItem = 0 [, $sText = ""]]) 设置项目文本 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetTextColor($hWnd, $vRGBColor) 设置文字颜色 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetToolTips($hWnd, $hToolTip) 设置工具提示子控件句柄 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_SetUnicodeFormat($hWnd [, $iFormat = True]) 设置 Unicode 字符格式标志 (需要: #include <GuiTreeView.au3>)
_GUICtrlTreeView_Sort($hWnd) 项目排序 (需要: #include <GuiTreeView.au3>)
_GUIImageList_Add($hWnd, $hImage[, $hMask=0]) 添加图像到图像列表 (需要: #Include <GuiImageList.au3>)
_GUIImageList_AddBitmap($hWnd, $sImage[, $sMask=""]) 添加位图到图像列表 (需要: #Include <GuiImageList.au3>)
_GUIImageList_AddIcon($hWnd, $sFile [, $iIndex=0 [, $fLarge = False]]) 添加图标到图像列表 (需要: #include <GuiImageList.au3>)
_GUIImageList_AddMasked($hWnd, $hImage[, $iMask=0]) 添加图像到图像列表, 生成指定位图的掩码 (需要: #Include <GuiImageList.au3>)
_GUIImageList_BeginDrag($hWnd, $iTrack, $iXHotSpot, $iYHotSpot) 开始拖动图像 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Copy($hWnd, $iSource, $iDestination) 源图像复制到目标图像索引 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Create([$iCX=16[, $iCY=16[, $iColor=4[, $iOptions=0[, $iInitial=4[, $iGrow=4]]]]]]) 创建 ImageList 控件 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Destroy($hWnd) 销毁图像列表. (需要: #Include <GuiImageList.au3>)
_GUIImageList_DestroyIcon($hIcon) 销毁图标并清理图标占用的任何内存. (需要: #Include <GuiImageList.au3>)
_GUIImageList_DragEnter($hWnd, $iX, $iY) 指定显示拖动图像的窗口位置 (需要: #Include <GuiImageList.au3>)
_GUIImageList_DragLeave($hWnd) 解锁指定窗口和隐藏拖动图像,使窗口更新 (需要: #Include <GuiImageList.au3>)
_GUIImageList_DragMove($iX, $iY) 拖放操作过程中移动拖放图像 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Draw($hWnd, $iIndex, $hDC, $iX, $iY[, $iStyle=0]) 在指定的设备环境中绘制图像列表项目 (需要: #Include <GuiImageList.au3>)
_GUIImageList_DrawEx($hWnd, $iIndex, $hDC, $iX, $iY[, $iDX = 0[, $iDY = 0[, $iRGBBk = 0xFFFFFFFF[, $iRGBFg = 0xFFFFFFFF[, $iStyle=0]]]]]) 在指定的设备环境中绘制图像列表项目 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Duplicate($hWnd) 复制现有图像列表 (需要: #Include <GuiImageList.au3>)
_GUIImageList_EndDrag() 结束拖动操作 (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetBkColor($hWnd) 返回图像列表当前背景颜色. (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetIcon($hWnd, $iIndex[, $iStyle = 0]) 创建来自图像和图像列表掩码的图标 (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetIconHeight($hWnd) 检索图像列表中的图像高度 (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetIconSize($hWnd) 检索图像列表中图像的尺寸,返回数据数组. (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetIconSizeEx($hWnd) 检索图像列表中图像的尺寸,返回数据结构. (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetIconWidth($hWnd) 检索图像列表中图像的宽度 (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetImageCount($hWnd) 返回图像列表中图像数量 (需要: #Include <GuiImageList.au3>)
_GUIImageList_GetImageInfoEx($hWnd, $iIndex) 返回关于图像的信息 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Remove($hWnd[, $iIndex = -1]) 删除图片列表中的图像 (需要: #Include <GuiImageList.au3>)
_GUIImageList_ReplaceIcon($hWnd, $iIndex, $hIcon) 替换图标的图像或光标 (需要: #Include <GuiImageList.au3>)
_GUIImageList_SetBkColor($hWnd, $iClrBk) 设置图像列表背景颜色 (需要: #Include <GuiImageList.au3>)
_GUIImageList_SetIconSize($hWnd, $iCX, $iCY) 设置图像列表中的图像尺寸和删除图像列表中的全部图像 (需要: #Include <GuiImageList.au3>)
_GUIImageList_SetImageCount($hWnd, $iNewCount) 调整现有图像列表的大小 (需要: #Include <GuiImageList.au3>)
_GUIImageList_Swap($hWnd, $iSource, $iDestination) 交换两个图像的位置(译注:原解释语句与 _GUIImageList_Copy 函数完全一样,此处臆测翻译) (需要: #Include <GuiImageList.au3>)
_GUIScrollBars_EnableScrollBar($hWnd[, $wSBflags = $SB_BOTH[, $wArrows = $ESB_ENABLE_BOTH]]) 启用/禁用滚动控件 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarInfoEx($hWnd, $idObject) 检索指定滚动控件信息 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRect($hWnd, $idObject) 检索滚动控件坐标 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarRGState($hWnd, $idObject) 检索滚动控件组件的状态 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYLineButton($hWnd, $idObject) 检索滚动控件高度(相对于水平)或宽度(相对于垂直) (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbBottom($hWnd, $idObject) 检索滚动条底部(相当于垂直)或右侧(相当于水平)的位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollBarXYThumbTop($hWnd, $idObject) 检索滚动条顶部(相当于垂直)或左侧(相当于水平)的位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfo($hWnd, $fnBar, ByRef $tSCROLLINFO) 检索滚动控件的参数,使用数据结构. (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoEx($hWnd, $fnBar) 检索滚动控件的参数,返回数据结构. (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMax($hWnd, $fnBar) 检索最大滚动位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoMin($hWnd, $fnBar) 检索最小滚动位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPage($hWnd, $fnBar) 检索页面大小 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoPos($hWnd, $fnBar) 检索滚动框的位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollInfoTrackPos($hWnd, $fnBar) 检索滚动框用户拖动时的即时位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollPos($hWnd, $nBar) 检索指定滚动框内滚动条的当前位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_GetScrollRange($hWnd, $nBar) 检索滚动条当前最低和最高滚动位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_Init($hWnd[, $iHMax = -1[, $ivMax = -1]]) 初始化滚动控件窗口 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_ScrollWindow($hWnd, $iXAmount, $iYAmount) 滚动窗口客户区的内容 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfo($hWnd, $fnBar, $tSCROLLINFO[, $fRedraw = True]) 设置滚动控件参数 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMax($hWnd, $fnBar, $nMax) 设置最大滚动位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoMin($hWnd, $fnBar, $nMin) 设置最小滚动位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPage($hWnd, $fnBar, $nPage) 设置页面大小 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollInfoPos($hWnd, $fnBar, $nPos) 设置指定滚动控件内滚动框的位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_SetScrollRange($hWnd, $nBar, $nMinPos, $nMaxPos) 设置滚动条的最小和最大位置 (需要: #Include <GuiScrollBars.au3>)
_GUIScrollBars_ShowScrollBar($hWnd, $nBar[, $fShow = True]) 显示或隐藏指定的滚动控件 (需要: #Include <GuiScrollBars.au3>)
_GUIToolTip_Activate($hWnd [, $fActivate = True]) 激活或者取消激活一个控件 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_AddTool($hTool, $hWnd, $sText[, $iID = 0[, $iLeft = 0[, $iTop = 0[, $iRight = 0[, $iBottom = 0[, $iFlags = 8[, $iParam = 0]]]]]]]) 注册工具提示控件 (需要: #Include <GuiToolTip.au3>)
_GUIToolTip_AdjustRect($hWnd, ByRef $tRect [, $fLarger = True]) 依据窗口矩形计算文本显示的矩形 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_BitsToTTF($iFlags) 编码用户位标志到 $TTF_ flags (需要: #Include <GuiToolTip.au3>)
_GUIToolTip_Create($hWnd [, $iStyle = 0x00000003]) 创建工具提示控件 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_DelTool($hWnd, $hTool [, $iID = 0]) 移除一个工具(提示) (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Destroy(ByRef $hWnd) 删除工具提示(ToolTip)控件 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_EnumTools($hWnd, $iIndex) 检索当前提示工具信息 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleHeight($hWnd, $hTool, $iID [, $iFlags = 48]) 检索工具提示控件高度 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleSize($hWnd, $hTool, $iID [, $iFlags = 0x000000A0]) 检索提示控件的宽度和高度 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetBubbleWidth($hWnd, $hTool, $iID [, $iFlags = 48]) 返回工具提示控件的宽度 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetCurrentTool($hWnd) 检索当前工具信息 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetDelayTime($hWnd, $iDuration) 检索原始, 弹出或重绘的持续时间 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMargin($hWnd) 检索顶部,左侧,底部和右侧的边距 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMarginEx($hWnd) 检索顶部,左侧,底部和右侧的边距 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetMaxTipWidth($hWnd) 检索工具提示窗口的最大宽度 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetText($hWnd, $hTool, $iID) 返回文本 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipBkColor($hWnd) 返回工具提示背景色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTipTextColor($hWnd) 返回文本颜色. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleBitMap($hWnd) 返回标题位图图标. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetTitleText($hWnd) 得到工具提示(tooltip)标题文本 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolCount($hWnd) 检索工具计数 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_GetToolInfo($hWnd, $hTool, $iID) 检索特定工具的信息 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_HitTest($hWnd, $hTool, $iX, $iY) 检索工具控件保留的工具提示信息 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_NewToolRect($hWnd, $hTool, $iID, $iLeft, $iTop, $iRight, $iBottom) 设置提示控件新的边界矩形 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_Pop($hWnd) 从控件移除显示的工具提示(ToolTip) (需要: #include <GuiToolTip.au3>)
_GUIToolTip_PopUp($hWnd) 弹出显示工具提示(ToolTip)于最后鼠标消息所在坐标. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetDelayTime($hWnd, $iDuration, $iTime) 设置原始, 弹出或重绘的持续时间 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetMargin($hWnd, $iLeft, $iTop, $iRight, $iBottom) 设置顶部,左侧,底部和右侧边距 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetMaxTipWidth($hWnd, $iWidth) 设置工具提示(ToolTip)窗口最大宽度 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipBkColor($hWnd, $iColor) 设置背景色 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTipTextColor($hWnd, $iColor) 设置文本颜色 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetTitle($hWnd, $sTitle [, $iIcon = 0]) 添加标准图标和标题字符串 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_SetToolInfo($hWnd, $sText[, $iID = 0[, $iLeft = 0[, $iTop = 0[, $iRight = 0[, $iBottom = 0[, $iFlags = 8[, $iParam = 0]]]]]]]) 设置工具的信息 (需要: #Include <GuiToolTip.au3>)
_GUIToolTip_SetWindowTheme($hWnd, $sStyle) 设置可视化样式 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_ToolExists($hWnd) 确定工具是否存在. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_ToolToArray($hWnd, ByRef $tToolInfo, $iError) 传输工具信息结构到数组 (需要: #Include <GuiToolTip.au3>)
_GUIToolTip_TrackActivate($hWnd [, $fActivate = True [, $hTool = 0 [, $iID = 0]]]) 激活或停用工具提示跟踪 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_TrackPosition($hWnd, $iX, $iY) 设置跟踪工具提示的位置 (需要: #include <GuiToolTip.au3>)
_GUIToolTip_TTFToBits($iFlags) 解码 $TTF_flags 到用户位标志. (需要: #Include <GuiToolTip.au3>)
_GUIToolTip_Update($hWnd) 强制使工具提示(tooltip)重绘. (需要: #include <GuiToolTip.au3>)
_GUIToolTip_UpdateTipText($hWnd, $hTool, $iID, $sText) 设置工具提示文本 (需要: #include <GuiToolTip.au3>)
_HexToString($strHex) 转换一个十六进制字符串到字符串. (需要: #Include <String.au3>)
_IEAction ( ByRef $o_object, $s_action ) 在浏览器中执行预定义的一些简单操作. (需要: #include <IE.au3> )
_IEAttach ( $s_string [, $s_mode = "Title" [, $i_instance = 1]] ) 附加到指定的 Internet Explorer 实例,基于您所选择的模式按照字符串/子字符串匹配. (需要: #include <IE.au3> )
_IEBodyReadHTML ( ByRef $o_object ) 返回文档中 &lt;body&gt; 标记中的HTML. (需要: #include <IE.au3> )
_IEBodyReadText ( ByRef $o_object ) 返回文档中 &lt;body&gt; 标记中的文本. (需要: #include <IE.au3> )
_IEBodyWriteHTML ( ByRef $o_object, $s_html ) 替换文档中 &lt;body&gt; 标记中的HTML. (需要: #include <IE.au3> )
_IECreate ( [$s_Url = "about:blank" [, $f_tryAttach = 0 [, $f_visible = 1 [, $f_wait = 1 [, $f_takeFocus = 1]]]]] ) 创建一个 Internet Explorer 浏览器窗口. (需要: #include <IE.au3> )
_IECreateEmbedded ( ) 创建一个适合于嵌入AutoIt图形化界面 (GUI)的web浏览器对象,此图形化界面由GuiCtrlCreateObj()生成. (需要: #include <IE.au3> )
_IEDocGetObj ( ByRef $o_object ) 给定任意的DOM对象,返回相关文档对象的引用. (需要: #include <IE.au3> )
_IEDocInsertHTML ( ByRef $o_object, $s_string [, $s_where = "beforeend"] ) 在一个元素内部或者周围插入HTML代码. (需要: #include <IE.au3> )
_IEDocInsertText ( ByRef $o_object, $s_string [, $s_where = "beforeend"] ) 在元素内部或周围插入文本. (需要: #include <IE.au3> )
_IEDocReadHTML ( ByRef $o_object ) 返回整个文档的HTML源代码. (需要: #include <IE.au3> )
_IEDocWriteHTML ( ByRef $o_object, $s_html ) 替换整个网页(文档)的HTML代码. (需要: #include <IE.au3> )
_IEErrorHandlerDeRegister ( ) 禁用一个注册的自定义COM错误句柄 (需要: #include <IE.au3> )
_IEErrorHandlerRegister ( [$s_functionName = "__IEInternalErrorHandler"] ) 注册并使用一个自定义COM错误处理程序. (需要: #include <IE.au3> )
_IEErrorNotify ( [$f_notify = -1] ) 设定ie.au3是否自动报告提醒和错误(到控制台). (需要: #include <IE.au3> )
_IEFormElementCheckBoxSelect ( ByRef $o_object, $s_string [, $s_name = "" [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]]] ) 设定指定表单元素的值. (需要: #include <IE.au3> )
_IEFormElementGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回指定表单中所有表单元素的集合对象变量. (需要: #include <IE.au3> )
_IEFormElementGetObjByName ( ByRef $o_object, $s_name [, $i_index = 0] ) 返回指定名称的表单元素的对象. (需要: #include <IE.au3> )
_IEFormElementGetValue ( ByRef $o_object ) 返回指定表单元素的值. (需要: #include <IE.au3> )
_IEFormElementOptionSelect ( ByRef $o_object, $s_string [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]] ) 设置指定表单元素的值. (需要: #include <IE.au3> )
_IEFormElementRadioSelect ( ByRef $o_object, $s_string , $s_name [, $f_select = 1 [, $s_mode = "byValue" [, $f_fireEvent = 1]]] ) 设置指定表单元素的值. (需要: #include <IE.au3> )
_IEFormElementSetValue ( ByRef $o_object, $s_newvalue [, $f_fireEvent = 1] ) 设置指定表单元素的值. (需要: #include <IE.au3> )
_IEFormGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回文档内代表表单的对象变量集或按索引的单一表单. (需要: #include <IE.au3> )
_IEFormGetObjByName ( ByRef $o_object, $s_name [, $i_index = 0] ) 返回指定名称的表单对象的引用. (需要: #include <IE.au3> )
_IEFormImageClick ( ByRef $o_object, $s_linkText [, $s_mode = "src" [, $i_index = 0 [, $f_wait = 1]]] ) 模拟对&lt;input type=image&gt;进行鼠标点击. 按子字符串匹配替换文本, 名称源(src标记). (需要: #include <IE.au3> )
_IEFormReset ( ByRef $o_object ) 重置指定表单为默认设置. (需要: #include <IE.au3> )
_IEFormSubmit ( ByRef $o_object [, $f_wait = 1] ) 提交指定表单. (需要: #include <IE.au3> )
_IEFrameGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回包含框架集中的框架或普通页面上的浮动框架或按索引的单一框架或浮动框架的对象集合. (需要: #include <IE.au3> )
_IEFrameGetObjByName ( ByRef $o_object, $s_name ) 按名称返回框架或浮动框架对象的引用. (需要: #include <IE.au3> )
_IEGetObjById ( ByRef $o_object, $s_Id) 按标识或名称返回对象变量. (需要: #include <IE.au3> )
_IEGetObjByName ( ByRef $o_object, $s_Id [, $i_index = 0] ) 按名称或标识返回对象变量. (需要: #include <IE.au3> )
_IEHeadInsertEventScript ( ByRef $o_object, $s_htmlFor, $s_event, $s_script ) 在文档Head标签内插入Javascript代码. (需要: #include <IE.au3> )
_IEImgClick ( ByRef $o_object, $s_linkText [, $s_mode = "src" [, $i_index = 0 [, $f_wait = 1]]] ) 模拟鼠标点击一个图像. 由匹配可选文本, 名称或源的子串匹配. (需要: #include <IE.au3> )
_IEImgGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回一个文档内IMG标签的对象变量集合. (需要: #include <IE.au3> )
_IEIsFrameSet ( ByRef $o_object ) 检查指定窗口是否含有一个框架集(FrameSet). (需要: #include <IE.au3> )
_IELinkClickByIndex ( ByRef $o_object, $i_index [, $f_wait = 1] ) 模拟鼠标点击一个索引链接(在源码内的顺序从0开始). (需要: #include <IE.au3> )
_IELinkClickByText ( ByRef $o_object, $s_linkText [, $i_index = 0[, $f_wait = 1]] ) 模拟鼠标点击带有与所提供字符串相匹配的文本子串的链接. (需要: #include <IE.au3> )
_IELinkGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回包含文档中全部链接的集合对象或按索引的单一链接. (需要: #include <IE.au3> )
_IELoadWait ( ByRef $o_object [, $i_delay = 0 [, $i_timeout = -1]] ) 在网页内容加载完全之后返回. (需要: #include <IE.au3> )
_IELoadWaitTimeout ( [$i_timeout = -1] ) 获取和设置当前_IELoadWait在超时前尝试的毫秒值. (需要: #include <IE.au3> )
_IENavigate ( ByRef $o_object, $s_url [, $f_wait = 1] ) 直接在一个存在的浏览器窗口打开指定的URL地址. (需要: #include <IE.au3> )
_IEPropertyGet ( ByRef $o_object, $s_property ) 返回浏览器或者 DOM 元素的一个选定的属性. (需要: #include <IE.au3> )
_IEPropertySet ( ByRef $o_object, $s_property, $newvalue ) 设置浏览器或者DOM元素的一个选择的属性. (需要: #include <IE.au3> )
_IEQuit ( ByRef $o_object ) 关闭浏览器并移除相关的对象. (需要: #include <IE.au3> )
_IETableGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回用以代表文档中所有表或按索引的单一表的对象变量集合. (需要: #include <IE.au3> )
_IETableWriteToArray ( ByRef $o_object [, $f_transpose] ) 将表内容读取到数组. (需要: #include <IE.au3> )
_IETagNameAllGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回在对象中指定标签名称的所有元素的对象集合. (需要: #include <IE.au3> )
_IETagNameGetCollection ( ByRef $o_object, $s_TagName [, $i_index = -1] ) 返回一个对象中按标记名称或单元素索引的所有元素的对象集合. (需要: #include <IE.au3> )
_IE_Example ( [$s_module = "basic"] ) 显示一个已预载入文档的新浏览器窗口,用于IE.au3中的例子或者您自己的测试. (需要: #include <IE.au3> )
_IE_Introduction ( [$s_module = "basic"] ) 在新浏览器窗口中显示一个关于 IE.au3 的介绍信息 (需要: #include <IE.au3> )
_IE_VersionInfo ( ) 返回一个包含 IE.au3 版本信息的数组. (需要: #include <IE.au3> )
_Iif($fTest, $vTrueVal, $vFalseVal) 执行表达式的布尔测试. (需要: #Include <Misc.au3>)
_INetExplorerCapable ( $s_IEString ) 将字符串转换为IE(Internet Explorer)浏览器的有效行 (需要: #include <INet.au3>)
_INetGetSource($s_URL [, $bString = 'True']) 获取 URL 源且不写临时文件. (需要: #include <Inet.au3>)
_INetMail ( $s_MailTo, $s_MailSubject, $s_MailBody ) 打开默认用户与给定地址的邮件客户端, 主题, 邮件的正文. (需要: #include <INet.au3>)
_INetSmtpMail($s_SmtpServer, $s_FromName, $s_FromAddress, $s_ToAddress [,$s_Subject [,$as_Body [,$s_helo [,$s_first [,$b_trace]]]]]) 发送一封电子邮件，不使用外部电子邮件程序. (需要: #include <Inet.au3>)
_IsPressed($sHexKey [, $vDLL = 'user32.dll']) 检查一个按键是否被按下 (需要: #include <Misc.au3>)
_MathCheckDiv ( $i_NumA, $i_NumB ) 检查 NumA 是否可被 NumB 整除 (需要: #include <Math.au3>)
_Max ( $nNum1, $nNum2 ) 确定两数中的较大数. (需要: #include <Math.au3>)
_MemGlobalAlloc($iBytes[, $iFlags = 0]) 从堆栈分配指定的字节数 (需要: #Include <Memory.au3>)
_MemGlobalFree($hMem) 释放全局内存对象并使其句柄无效 (需要: #Include <Memory.au3>)
_MemGlobalLock($hMem) 锁定全局内存对象,并返回内存块的第一字节指针 (需要: #Include <Memory.au3>)
_MemGlobalSize($hMem) 检索指定全局内存对象的当前大小 (需要: #Include <Memory.au3>)
_MemGlobalUnlock($hMem) 递减与 GMEM_MOVEABLE 分配相关的内存对象的锁定计数 (需要: #Include <Memory.au3>)
_MemMoveMemory($pSource, $pDest, $iLength) 向前或向后移动存储器,对齐或不对齐 (需要: #Include <Memory.au3>)
_MemVirtualAlloc($pAddress, $iSize, $iAllocation, $iProtect) 保留或提交调用进程的虚拟地址空间页面区域 (需要: #Include <Memory.au3>)
_MemVirtualAllocEx($hProcess, $pAddress, $iSize, $iAllocation, $iProtect) 在一个指定进程的虚拟地址空间储备内存区域 (需要: #Include <Memory.au3>)
_MemVirtualFree($pAddress, $iSize, $iFreeType) 在进程的虚拟地址空间释放页面区域 (需要: #Include <Memory.au3>)
_MemVirtualFreeEx($hProcess, $pAddress, $iSize, $iFreeType) 在进程的虚拟地址空间释放页面区域 (需要: #Include <Memory.au3>)
_Min ( $nNum1, $nNum2 ) 确定两数中的较小数 (需要: #include <Math.au3>)
_MouseTrap([$iLeft = 0 [, $iTop = 0 [, $iRight = 0 [, $iBottom = 0]]]]) 限制鼠标移动到指定的座标. (需要: #Include <Misc.au3>)
_NamedPipes_CallNamedPipe($sPipeName, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize, ByRef $iRead [, $iTimeOut = 0]) 执行命名管道读/写操作 (需要: #Include <NamedPipes.au3>)
_NamedPipes_ConnectNamedPipe($hNamedPipe[, $pOverlapped = 0]) 允许命名管道服务器进程等待客户端连接 (需要: #Include <NamedPipes.au3>)
_NamedPipes_CreateNamedPipe($sName[, $iAccess = 2[, $iFlags = 2[, $iACL = 0[, $iType = 1[, $iRead = 1[, $iWait = 0[, $iMaxInst = 25[, $iOutBufSize = 4096[, $iInpBufSize = 4096[, $iDefTimeout = 5000[, $pSecurity = 0]]]]]]]]]]]) 创建一个命名管道接口(instance) (需要: #Include <NamedPipes.au3>)
_NamedPipes_CreatePipe(ByRef $hReadPipe, ByRef $hWritePipe [, $tSecurity = 0 [, $iSize = 0]]) 创建一个匿名管道 (需要: #Include <NamedPipes.au3>)
_NamedPipes_DisconnectNamedPipe($hNamedPipe) 从客户端进程断开服务器端命名管道实例 (需要: #Include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeHandleState($hNamedPipe) 检索指定命名管道的状态信息 (需要: #Include <NamedPipes.au3>)
_NamedPipes_GetNamedPipeInfo($hNamedPipe) 检索有关指定命名管道的信息 (需要: #Include <NamedPipes.au3>)
_NamedPipes_PeekNamedPipe($hNamedPipe) 从管道复制数据到缓冲区,且不从管道中删除该数据 (需要: #Include <NamedPipes.au3>)
_NamedPipes_SetNamedPipeHandleState($hNamedPipe, $iRead, $iWait [, $iBytes = 0 [, $iTimeOut = 0]]) 设置指定的命名管道读模式和阻塞模式 (需要: #Include <NamedPipes.au3>)
_NamedPipes_TransactNamedPipe($hNamedPipe, $pInpBuf, $iInpSize, $pOutBuf, $iOutSize [, $pOverlapped = 0]) 在网络运行中读取和写入命名管道 (需要: #Include <NamedPipes.au3>)
_NamedPipes_WaitNamedPipe($sPipeName [, $iTimeOut = 0]) 等待命名管道实例可用 (需要: #Include <NamedPipes.au3>)
_Net_Share_ConnectionEnum($sServer, $sQualifier) 列出共享资源的所有连接 (需要: #Include <NetShare.au3>)
_Net_Share_FileClose($sServer, $iFileID) 强制关闭资源 (需要: #Include <NetShare.au3>)
_Net_Share_FileEnum([$sServer = ""[, $sBaseName = ""[, $sUserName = ""]]]) 返回服务器上打开的文件信息 (需要: #Include <NetShare.au3>)
_Net_Share_FileGetInfo($sServer, $iFileID) 检索服务器特定资源的信息 (需要: #Include <NetShare.au3>)
_Net_Share_PermStr($iPerm) 返回资源权限的字符串表示形式 (需要: #Include <NetShare.au3>)
_Net_Share_ResourceStr($iResource) 返回字符串表示的资源 (需要: #Include <NetShare.au3>)
_Net_Share_SessionDel([$sServer = "" [, $sClientName = "" [, $sUserName = ""]]]) 结束服务器和工作站之间的网络会话 (需要: #Include <NetShare.au3>)
_Net_Share_SessionEnum([$sServer = ""[, $sClientName = ""[, $sUserName = ""]]]) 提供有关服务器上建立的会话 (需要: #Include <NetShare.au3>)
_Net_Share_SessionGetInfo($sServer, $sClientName, $sUserName) 检索服务器和工作站之间建立会话的信息 (需要: #Include <NetShare.au3>)
_Net_Share_ShareAdd($sServer, $sShare, $iType, $sPath [, $sComment = "" [, $iMaxUses = -1]]) 共享服务器资源 (需要: #Include <NetShare.au3>)
_Net_Share_ShareCheck($sServer, $sShare) 检查是否有服务器共享设备 (需要: #include <NetShare.au3>)
_Net_Share_ShareDel($sServer, $sShare) 删除服务器共享资源列表的共享名 (需要: #Include <NetShare.au3>)
_Net_Share_ShareEnum([$sServer = ""]) 检索服务器上资源共享的信息 (需要: #Include <NetShare.au3>)
_Net_Share_ShareGetInfo($sServer, $sShare) 检索特定服务器上共享资源的信息 (需要: #Include <NetShare.au3>)
_Net_Share_ShareSetInfo($sServer, $sShare, $sComment, $iMaxUses) 共享服务器资源 (需要: #Include <NetShare.au3>)
_Net_Share_StatisticsGetSvr([$sServer = ""]) 检索服务器操作统计 (需要: #Include <NetShare.au3>)
_Net_Share_StatisticsGetWrk([$sWorkStation = ""]) 检索工作站操作统计 (需要: #Include <NetShare.au3>)
_Now() 按PC格式返回当前日期与时间. (需要: #Include <Date.au3>)
_NowCalc() 以 YYYY/MM/DD HH:MM:SS 格式返回当前日期和时间. (需要: #Include <Date.au3>)
_NowCalcDate() 返回当前日期,格式为YYYY/MM/DD(年/月/日). (需要: #Include <Date.au3>)
_NowDate() 按PC格式返回当前日期. (需要: #Include <Date.au3>)
_NowTime([$sType = 3]) 按PC格式返回当前日期. (需要: #Include <Date.au3>)
_PathFull($sRelativePath [, $sBasePath = @WorkingDir]) 根据您提供的相对路径创建一个路径,返回新创建的绝对路径 (需要: #Include <File.au3>)
_PathGetRelative($sFrom, $sTo) 返回一个目录的相对路径 (需要: #Include <File.au3>)
_PathMake($szDrive, $szDir, $szFName, $szExt) 创建包括驱动器、目录、文件名和扩展名的路径. 不是所有部分必须具备. (需要: #include <File.au3>)
_PathSplit($szPath, ByRef $szDrive, ByRef $szDir, ByRef $szFName, ByRef $szExt) 完整路径拆分为驱动器、目录、文件名和扩展名. 缺少部分由空字符串代替. (需要: #Include <File.au3>)
_ProcessGetName ( $iPID ) 返回包含特定进程标识符名称的字符串. (需要: #include <Process.au3>)
_ProcessGetPriority ($i_PID) 获取打开进程的优先级 (需要: #include <Process.au3>)
_Radian ( $nDegrees ) 度转换为弧度. (需要: #include <Math.au3>)
_ReplaceStringInFile($szFileName, $szSearchString, $szReplaceString [, $fCaseness = 0 [, $fOccurance = 1]]) 替换文本文件的字符串(二进制文件将无法正常工作!) (需要: #Include <File.au3>)
_RunDOS ( $sCommand ) 在一个隐藏的命令窗口中执行一个 DOS 命令. (需要: #include <Process.au3>)
_ScreenCapture_Capture([$sFileName = "" [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $fCursor = True]]]]]]) 捕捉某一屏幕区域 (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_CaptureWnd($sFileName, $hWnd [, $iLeft = 0 [, $iTop = 0 [, $iRight = -1 [, $iBottom = -1 [, $fCursor = True]]]]]) 捕获指定窗口或者控件ID的屏幕快照 (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_SaveImage($sFileName, $hBitmap [, $fFreeBmp = True]) 保存一个图像到文件 (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_SetBMPFormat($iFormat) 设置BMP屏幕截图位(bit)格式 (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_SetJPGQuality($iQuality) 设置质量水平,将用于屏幕捕获的 JPEG (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_SetTIFColorDepth($iDepth) 设置颜色深度, 用于屏幕捕捉的 TIFF (需要: #Include <ScreenCapture.au3>)
_ScreenCapture_SetTIFCompression($iCompress) 设置TIFF屏幕截图压缩 (需要: #Include <ScreenCapture.au3>)
_Security__AdjustTokenPrivileges($hToken, $fDisableAll, $pNewState, $iBufferLen [, $pPrevState = 0 [, $pRequired = 0]]) 启用或禁用指定的访问令牌权限 (需要: #include <Security.au3>)
_Security__CreateProcessWithToken($hToken, $iLogonFlags, $sCommandLine, $iCreationFlags, $sCurDir, $tSTARTUPINFO, $tPROCESS_INFORMATION) Creates a new process and its primary thread running in the security context of the specified token (需要: #include <Security.au3>)
_Security__DuplicateTokenEx($hExistingToken, $iDesiredAccess, $iImpersonationLevel, $iTokenType) Creates a new access token that duplicates an existing token (需要: #include <Security.au3>)
_Security__GetAccountSid($sAccount [, $sSystem = ""]) 检索帐户的安全标识符(SID) (需要: #include <Security.au3>)
_Security__GetLengthSid($pSID) 以字节为单位返回一个有效的SID长度 (需要: #include <Security.au3>)
_Security__GetTokenInformation($hToken, $iClass) 检索访问令牌信息指定的类型 (需要: #include <Security.au3>)
_Security__ImpersonateSelf([$iLevel = $SECURITYIMPERSONATION]) 获取访问令牌模拟调用进程的安全环境 (需要: #include <Security.au3>)
_Security__IsValidSid($pSID) 验证一个 SID 是否有效 (需要: #include <Security.au3>)
_Security__LookupAccountName($sAccount [, $sSystem = ""]) 检索帐户安全标识符(SID)和域的名称 (需要: #include <Security.au3>)
_Security__LookupAccountSid($vSID [, $sSystem = ""]) 检索帐户的 SID 名称 (需要: #include <Security.au3>)
_Security__LookupPrivilegeValue($sSystem, $sName) 检索本地唯一标识符的特权(LUID)值 (需要: #include <Security.au3>)
_Security__OpenProcessToken($hProcess, $iAccess) 返回调用进程的进程句柄 (需要: #include <Security.au3>)
_Security__OpenThreadToken($iAccess [, $hThread = 0 [, $fOpenAsSelf = False]]) 打开与线程相关访问令牌 (需要: #include <Security.au3>)
_Security__OpenThreadTokenEx($iAccess [, $hThread = 0 [, $fOpenAsSelf = False]]) 打开与线程相关访问令牌, 如果有需要, 模拟客户端的安全环境 (需要: #include <Security.au3>)
_Security__SetPrivilege($hToken, $sPrivilege, $fEnable) 启用或禁用本地令牌特权 (需要: #include <Security.au3>)
_Security__SetTokenInformation($hToken, $iTokenInformation, $vTokenInformation, $iTokenInformationLength) Sets various types of information for a specified access token (需要: #include <Security.au3>)
_Security__SidToStringSid($pSID) 转换二进制 SID 为字符串 (需要: #Include <Security.au3>)
_Security__SidTypeStr($iType) 转换一个SID类型到字符串类型. (需要: #include <Security.au3>)
_Security__StringSidToSid($sSID) 转换字符串 SID 为二进制 SID (需要: #include <Security.au3>)
_SendMessage($hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lparam"]]]]]]) 包装常用 DLL 调用 (需要: #Include <SendMessage.au3>)
_SendMessageA($hWnd, $iMsg [, $wParam = 0 [, $lParam = 0 [, $iReturn = 0 [, $wParamType = "wparam" [, $lParamType = "lparam" [, $sReturnType = "lparam"]]]]]]) 包装常用 DLL 调用 (强制 Ansi 调用) (需要: #Include <SendMessage.au3>)
_SetDate($iDay [, $iMonth = 0 [, $iYear = 0]]) 设置系统的当前日期 (需要: #Include <Date.au3>)
_SetTime($iHour, $iMinute [, $iSecond = 0]) 设置系统的当前时间 (需要: #Include <Date.au3>)
_Singleton($sOccurenceName [, $iFlag = 0]) 执行一个设计范例,其中只有一个实例脚本可能正在运行. (需要: #Include <Misc.au3>)
_SoundClose ( $aSnd_id ) 关闭 _SoundOpen 打开的声音. (需要: #include <Sound.au3>)
_SoundLength ( $aSnd_id [, $iMode ] ) 返回声音文件的长度. (需要: #include <Sound.au3>)
_SoundOpen ( $sFile ) 打开一个声音文件,用于其它 _Sound 函数. (需要: #include <Sound.au3>)
_SoundPause ( $aSnd_id ) 暂停一个播放中的声音. (需要: #include <Sound.au3>)
_SoundPlay($aSnd_id [, $iWait]) 播放一个声音文件. (需要: #include <Sound.au3>)
_SoundPos ( $aSnd_id [, $iMode ] ) 返回声音的当前坐标. (需要: #include <Sound.au3>)
_SoundResume ( $aSnd_id ) 恢复暂停的声音 (需要: #include <Sound.au3>)
_SoundSeek (ByRef $aSnd_id, $iHour, $iMin, $iSec ) 寻道指定位置的声音  (需要: #include <Sound.au3>)
_SoundStatus ( $aSnd_id ) 返回声音的状态 (需要: #include <Sound.au3>)
_SoundStop (ByRef $aSnd_id ) 停止播放声音. (需要: #include <Sound.au3>)
_SQLite_Changes ( [ $hDB ] ) 返回最后执行操作对数据库影响的行数 (需要: #include <SQLite.au3>)
_SQLite_Close ( [ $hDB ] ) 关闭一个打开的 SQLite 数据库. (需要: #include <SQLite.au3>)
_SQLite_Display2DResult ( $aResult [, $iCellWidth = 0 [, $bReturn = 0 ]] ) 返回或打印一个格式化后的二维数组视图到控制台 (需要: #include <SQLite.au3>)
_SQLite_Encode ( $vData ) 二进制编码一个字符串,数字或二进制数据作为用于 SQLite 查询的BLOB来源. (需要: #include <SQLite.au3>)
_SQLite_ErrCode ( [ $hDB ] ) 返回最后一个错误代码 (数字) (需要: #include <SQLite.au3>)
_SQLite_ErrMsg ( [ $hDB ] ) 返回最近调用 sqlite3_* API 的英文错误条件描述的字符串 (需要: #include <SQLite.au3>)
_SQLite_Escape ( $sString ) Escapes a string or number for use as TEXT in SQLite statements (需要: #include <SQLite.au3>)
_SQLite_Exec ( $hDB, $sSQL [, $sCallBack ] ) 执行 SQLite 查询,不处理结果. (需要: #include <SQLite.au3>)
_SQLite_FastEncode ( $vData ) Fast encodes binary data (exclusively) for use in SQLite statements (需要: #include <SQLite.au3>)
_SQLite_FastEscape ( $sString ) Fast escapes a string or number for use as TEXT in SQLite statements (需要: #include <SQLite.au3>)
_SQLite_FetchData($hQuery, ByRef $aRow [, $fBinary = False [, $fDoNotFinalize = False]]) 提取 _SQLite_Query() 查询的一行数据 (需要: #include <SQLite.au3>)
_SQLite_FetchNames ( $hQuery, ByRef $aNames ) 读出 _SQLite_Query() 查询的列名 (需要: #include <SQLite.au3>)
_SQLite_GetTable ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 ] ) 传递一个一维数组,其中包含执行查询的表名和数据. (需要: #include <SQLite.au3>)
_SQLite_GetTable2d ( $hDB, $sSQL, ByRef $aResult, ByRef $iRows, ByRef $iColumns [, $iCharSize = -1 [, $fSwichDimensions = False ]] ) 传递一个 2 维数组,其中包含执行查询的列名称和数据 (需要: #include <SQLite.au3>)
_SQLite_LastInsertRowID ( [ $hDB ] ) 返回在本次连接中数据库中最新插入的列 ID (需要: #include <SQLite.au3>)
_SQLite_LibVersion ( ) 返回SQLite库的版本号 (需要: #include <SQLite.au3>)
_SQLite_Open ( [ $sDatabase_Filename = ":memory:" [,$iAccessMode [,$iEncoding ]]] ) 打开或创建 SQLite 数据库. (需要: #include <SQLite.au3>)
_SQLite_Query ( $hDB, $sSQL, ByRef $hQuery ) 准备 SQLite 查询 (需要: #include <SQLite.au3>)
_SQLite_QueryFinalize ( $hQuery ) 确定 _SQLite_Query() 查询. 查询被中断. (需要: #include <SQLite.au3>)
_SQLite_QueryReset ( $hQuery ) 重置 _SQLite_Query() 查询 (需要: #include <SQLite.au3>)
_SQLite_QuerySingleRow ( $hDB, $sSQL, ByRef $aRow ) 读出指定查询结果的第一行. (需要: #include <SQLite.au3>)
_SQLite_SafeMode ( $fSafeModeState ) 禁用或启用安全模式 (需要: #include <SQLite.au3>)
_SQLite_SetTimeout ( [ $hDB = -1 [, $iTimeout = 1000 ]] ) 为忙碌的处理程序设置超时 (需要: #include <SQLite.au3>)
_SQLite_Shutdown ( ) 卸载 SQLite.dll (需要: #include <SQLite.au3>)
_SQLite_SQLiteExe($sDatabaseFile, $sInput, ByRef $sOutput [, $sSQLiteExeFilename = "SQLite3.exe" [, $fDebug = False]]) 在 SQLite3.exe 中执行命令 (需要: #include <SQLite.au3>)
_SQLite_Startup([$sDll_Filename = "sqlite3.dll" [, $bUTF8ErrorMsg = False [, $bForceLocal = 0 [, $sPrintCallback = __SQLite_ConsoleWrite()]]]]) 加载 SQLite3.dll (需要: #include <SQLite.au3>)
_SQLite_TotalChanges ( [ $hDB ] ) 返回所有从连接开始到现在发生改变的数量(包括通过触发器和外部键) (需要: #include <SQLite.au3>)
_StringBetween($s_String, $s_Start, $s_End [, $v_Case = -1]) 返回字符串中开始位置和结束位置中间的字符串. (需要: #Include <String.au3>)
_StringEncrypt($i_Encrypt, $s_EncryptText, $s_EncryptPassword [, $i_EncryptLevel = 1]) 一个基于 RC4 字符串加密的函数. (需要: #Include <String.au3>)
_StringExplode($sString, $sDelimiter [, $iLimit] ) 指定分隔符将字符串拆分为子字符串, 以 PHP 分解 v5 形式. (需要: #Include <String.au3>)
_StringInsert($s_String, $s_InsertString, $i_Position) 插入一个字符串到另外一个字符串中. (需要: #Include <String.au3>)
_StringProper($s_String) 转换首字母为大写,其余字母为小写.等同于 Excel 中的 Proper 函数 (需要: #Include <String.au3>)
_StringRepeat($sString, $iRepeatCount) 按指定次数重复字符串. (需要: #Include <String.au3>)
_StringReverse($s_String) 反转指定字符串的内容. (需要: #Include <String.au3>)
_StringToHex($strChar) 转换一个字符串到十六进制字符串. (需要: #Include <String.au3>)
_TCPIpToName($sIp [,$iOption = 0 [, $hDll_Ws2_32 = "Ws2_32.dll"]]) 解析一个IP地址到主机名称 (需要: #include <Inet.au3>)
_TempFile([$s_DirectoryName = @TempDir [, $s_FilePrefix = "~" [, $s_FileExtension = ".tmp" [, $i_RandomLength = 7]]]]) 为临时文件创建名称,且保证不存在同名文件. (需要: #Include <File.au3>)
_TicksToTime($iTicks, ByRef $iHours, ByRef $iMins, ByRef $iSecs) 指定刻度量转换到时、分、秒. (需要: #Include <Date.au3>)
_Timer_Diff($iTimeStamp) 返回先前调用 _Timer_Init 的时间差 (需要: #Include <Timers.au3>)
_Timer_GetIdleTime() 返回最后一次用户活动的标记数(即键盘/鼠标) (需要: #Include <Timers.au3>)
_Timer_GetTimerID($iwParam) 从 $iwParam 返回计时器ID (需要: #Include <Timers.au3>)
_Timer_Init() 返回时间戳 (毫秒). (需要: #Include <Timers.au3>)
_Timer_KillAllTimers($hWnd) 销毁所有的计时器 (需要: #Include <Timers.au3>)
_Timer_KillTimer($hWnd, $iTimerID) 销毁指定的计时器 (需要: #Include <Timers.au3>)
_Timer_SetTimer($hWnd [, $iElapse = 250 [, $sTimerFunc = "" [, $iTimerID = -1]]]) 创建具有指定超时值的计时器 (需要: #Include <Timers.au3>)
_TimeToTicks([$iHours = @HOUR[, $iMins = @MIN[, $iSecs = @SEC]]]) 转换指定的小时、分钟、秒到刻度量. (需要: #Include <Date.au3>)
_VersionCompare($sVersion1, $sVersion2) 比较两个同等文件的版本 (需要: #Include <Misc.au3>)
_viClose ( $h_session ) 关闭连接到装置/设备的 VISA (需要: #include <Visa.au3>)
_viExecCommand ( $h_session, $s_command [, $i_timeout_ms = -1] ) Send a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP) (需要: #include <Visa.au3>)
_viFindGpib ( ByRef $a_descriptor_list, ByRef $a_idn_list [, $f_show_search_results = 0] ) 通过 VISA 卡接口(GPIB接口/ TCP协议)发送命令或查询到仪器或设备 (需要: #include <Visa.au3>)
_viGpibBusReset ( ) GPIB 总线“复位”:使用此函数获取 GPIB 总线某种原因的滞留. 调用这个函数可能会幸运地解决问题 (需要: #include <Visa.au3>)
_viGTL ( $h_session ) 转至本地模式:仪器接受此命令将退出“远程控制模式”,进入“本地模式”. 如果仪器已在“本地模式”这将被忽略. 一般说来,如果仪器不支持此命令将仅仅停留在“远程控制模式” (需要: #include <Visa.au3>)
_viInteractiveControl ([$s_command_save_filename = ""]) 互动 VISA 控制,以测试 SCPI 命令. (需要: #include <Visa.au3>)
_viOpen ( $s_visa_address [, $s_visa_secondary_address = 0] ) 打开 VISA 连接到仪器/设备 (需要: #include <Visa.au3>)
_viSetAttribute ( $h_session, $i_attribute, $i_value ) 设置任意 VISA 属性,也可以由 _viSetTimeout 调用来设置其他 VISA 的具体属性. 欲了解更多信息,请阅读 VISA 文档及 VISA 属性列表及其相应值 values. (需要: #include <Visa.au3>)
_viSetTimeout ( $h_session, $i_timeout_ms ) 设置 VISA 超时时间的毫秒值 (需要: #include <Visa.au3>)
_WeekNumberISO([$iYear = @YEAR[, $iMonth = @MON[, $iDay = @MDAY]]]) 计算给定日期的周数(年度的第几周). (需要: #Include <Date.au3>)
_WinAPI_AttachConsole ([$iProcessID = -1]) Attaches the calling process to the console of the specified process (Requires: #include <WinAPI.au3>)
_WinAPI_AttachThreadInput ($iAttach, $iAttachTo, $fAttach) Attaches the input processing mechanism of one thread to that of another thread (Requires: #include <WinAPI.au3>)
_WinAPI_Beep ($iFreq = 500, $iDuration = 1000) Generates simple tones on the speaker (Requires: #include <WinAPI.au3>)
_WinAPI_BitBlt($hDestDC, $iXDest, $iYDest, $iWidth, $iHeight, $hSrcDC, $iXSrc, $iYSrc, $iROP) 执行彩色数据位块传输 (需要: #Include <WinAPI.au3>)
_WinAPI_CallNextHookEx ($hhk, $iCode, $wParam, $lParam) Passes the hook information to the next hook procedure in the current hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_CallWindowProc ($lpPrevWndFunc, $hWnd, $Msg, $wParam, $lParam) Passes the hook information to the next hook procedure in the current hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_ClientToScreen ($hWnd, ByRef $tPoint) Converts the client coordinates of a specified point to screen coordinates (Requires: #include <WinAPI.au3>)
_WinAPI_CloseHandle ($hObject) Closes an open object handle (Requires: #include <WinAPI.au3>)
_WinAPI_CombineRgn ($hRgnDest, $hRgnSrc1, $hRgnSrc2, $iCombineMode) Combines two regions and stores the result in a third region (Requires: #include <WinAPI.au3>)
_WinAPI_CommDlgExtendedError () Returns a common dialog box error string. This string indicates the most recent error to occur during the execution of one of the common dialog box functions. (Requires: #include <WinAPI.au3>)
_WinAPI_CopyIcon ($hIcon) Copies the specified icon from another module (Requires: #include <WinAPI.au3>)
_WinAPI_CreateBitmap ($iWidth, $iHeight [, $iPlanes = 1 [, $iBitsPerPel = 1 [, $pBits = 0]]]) Creates a bitmap with the specified width, height, and color format (Requires: #include <WinAPI.au3>)
_WinAPI_CreateCompatibleBitmap ($hDC, $iWidth, $iHeight) Creates a bitmap compatible with the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_CreateCompatibleDC ($hDC) Creates a memory device context compatible with the specified device (Requires: #include <WinAPI.au3>)
_WinAPI_CreateEvent ([$pAttributes = 0 [, $fManualReset = True [, $fInitialState = True [, $sName = ""]]]]) Creates or opens a named or unnamed event object (Requires: #include <WinAPI.au3>)
_WinAPI_CreateFile ($sFileName, $iCreation [, $iAccess = 4 [, $iShare = 0 [, $iAttributes = 0 [, $pSecurity = 0]]]]) Creates or opens a file or other device (Requires: #include <WinAPI.au3>)
_WinAPI_CreateFont($nHeight, $nWidth[, $nEscape = 0 [, $nOrientn = 0 [, $fnWeight = $FW_NORMAL [, $bItalic = False[, $bUnderline = False [, $bStrikeout = False [, $nCharset = $DEFAULT_CHARSET [, $nOutputPrec = $OUT_DEFAULT_PRECIS [, $nClipPrec = $CLIP_DEFAULT_PRECIS [, $nQuality = $DEFAULT_QUALITY [, $nPitch = 0 [, $szFace = 'Arial']]]]]]]]]]]]) 创建一个带有指定字符的逻辑字体,注:characteristics有字符的意思也有特性的意思(可能翻译错误). (需要: #Include <WinAPI.au3>)
_WinAPI_CreateFontIndirect ($tLogFont) Creates a logical font that has specific characteristics (Requires: #include <WinAPI.au3>)
_WinAPI_CreatePen ($iPenStyle, $iWidth, $nColor) Creates a logical pen that has the specified style, width, and color. (Requires: #include <WinAPI.au3>)
_WinAPI_CreateProcess ($sAppName, $sCommand, $pSecurity, $pThread, $fInherit, $iFlags, $pEnviron, $sDir, $pStartupInfo, $pProcess) Creates a new process and its primary thread (Requires: #include <WinAPI.au3>)
_WinAPI_CreateRectRgn($iLeftRect, $iTopRect, $iRightRect, $iBottomRect) 创建矩形 (需要: #Include <WinAPI.au3>)
_WinAPI_CreateRoundRectRgn($iLeftRect, $iTopRect, $iRightRect, $iBottomRect, $iWidthEllipse, $iHeightEllipse) 创建圆角矩形 (需要: #Include <WinAPI.au3>)
_WinAPI_CreateSolidBitmap($hWnd, $iColor, $iWidth, $iHeight [, $bRGB = 1]) 创建单色位图 (需要: #Include <WinAPI.au3>)
_WinAPI_CreateSolidBrush ($nColor) Creates a logical brush that has the specified solid color (Requires: #include <WinAPI.au3>)
_WinAPI_CreateWindowEx($iExStyle, $sClass, $sName, $iStyle, $iX, $iY, $iWidth, $iHeight, $hParent [, $hMenu = 0 [, $hInstance = 0 [, $pParam = 0]]]) 创建重叠,弹出,或子窗口 (需要: #Include <WinAPI.au3>)
_WinAPI_DefWindowProc ($hWnd, $iMsg, $iwParam, $ilParam) Call the default window procedure to provide default processing (Requires: #include <WinAPI.au3>)
_WinAPI_DeleteDC ($hDC) Deletes the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_DeleteObject ($hObject) Deletes a logical pen, brush, font, bitmap, region, or palette (Requires: #include <WinAPI.au3>)
_WinAPI_DestroyIcon ($hIcon) Destroys an icon and frees any memory the icon occupied (Requires: #include <WinAPI.au3>)
_WinAPI_DestroyWindow ($hWnd) Destroys the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_DrawEdge ($hDC, $ptrRect, $nEdgeType, $grfFlags) Draws one or more edges of rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_DrawFrameControl ($hDC, $ptrRect, $nType, $nState) Draws a frame control of the specified type and style (Requires: #include <WinAPI.au3>)
_WinAPI_DrawIcon ($hDC, $iX, $iY, $hIcon) Draws an icon or cursor into the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_DrawIconEx($hDC, $iX, $iY, $hIcon [, $iWidth = 0 [, $iHeight = 0 [, $iStep = 0 [, $hBrush = 0 [, $iFlags = 3]]]]]) 绘制图标或光标到指定的设备环境 (需要: #Include <WinAPI.au3>)
_WinAPI_DrawLine($hDC, $iX1, $iY1, $iX2, $iY2) 绘制一条线 (需要: #Include <WinAPI.au3>)
_WinAPI_DrawText ($hDC, $sText, ByRef $tRect, $iFlags) Draws formatted text in the specified rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_DuplicateHandle($hSourceProcessHandle, $hSourceHandle, $hTargetProcessHandle, $iDesiredAccess, $fInheritHandle, $iOptions) 复制对象句柄 (需要: #include <WinAPI.au3>)
_WinAPI_EnableWindow ($hWnd [, $fEnable = True]) Enables or disables mouse and keyboard input to the specified window or control (Requires: #include <WinAPI.au3>)
_WinAPI_EnumDisplayDevices ($sDevice, $iDevNum) Obtains information about the display devices in a system (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindows ([$fVisible = True [, $hwnd = Default]]) Enumerates all windows (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindowsPopup () Enumerates popup windows (Requires: #include <WinAPI.au3>)
_WinAPI_EnumWindowsTop () Enumerates all top level windows (Requires: #include <WinAPI.au3>)
_WinAPI_ExpandEnvironmentStrings ($sString) Expands environment variable strings and replaces them with their defined values (Requires: #include <WinAPI.au3>)
_WinAPI_ExtractIconEx ($sFile, $iIndex, $pLarge, $pSmall, $iIcons) Creates an array of handles to large or small icons extracted from a file (Requires: #include <WinAPI.au3>)
_WinAPI_FatalAppExit ($sMessage) Displays a message box and terminates the application (Requires: #include <WinAPI.au3>)
_WinAPI_FillRect ($hDC, $ptrRect, $hBrush) Fills a rectangle by using the specified brush (Requires: #include <WinAPI.au3>)
_WinAPI_FindExecutable ($sFileName [, $sDirectory = ""]) Retrieves the name of the executable file associated with the specified file name (Requires: #include <WinAPI.au3>)
_WinAPI_FindWindow ($sClassName, $sWindowName) Retrieves the handle to the top-level window whose class name and window name match (Requires: #include <WinAPI.au3>)
_WinAPI_FlashWindow ($hWnd [, $fInvert = True]) Flashes the specified window one time (Requires: #include <WinAPI.au3>)
_WinAPI_FlashWindowEx ($hWnd [, $iFlags = 3 [, $iCount = 3 [, $iTimeout = 0]]]) Flashes the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_FloatToInt ($nFloat) Returns a 4 byte float as an integer value (Requires: #include <WinAPI.au3>)
_WinAPI_FlushFileBuffers ($hFile) Flushes the buffers of a specified file and causes all buffered data to be written (Requires: #include <WinAPI.au3>)
_WinAPI_FormatMessage($iFlags, $pSource, $iMessageID, $iLanguageID, ByRef $pBuffer, $iSize, $vArguments) 格式化消息字符串 (需要: #Include <WinAPI.au3>)
_WinAPI_FrameRect ($hDC, $ptrRect, $hBrush) Draws a border around the specified rectangle by using the specified brush (Requires: #include <WinAPI.au3>)
_WinAPI_FreeLibrary ($hModule) Decrements the reference count of the loaded dynamic-link library (DLL) module (Requires: #include <WinAPI.au3>)
_WinAPI_GetAncestor ($hWnd [, $iFlags = 1]) Retrieves the handle to the ancestor of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetAsyncKeyState ($iKey) Determines whether a key is up or down at the time the function is called (Requires: #include <WinAPI.au3>)
_WinAPI_GetBkMode ($hDC) Returns the current background mix mode for a specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_GetClassName ($hWnd) Retrieves the name of the class to which the specified window belongs (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientHeight ($hWnd) Retrieves the height of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientRect ($hWnd) Retrieves the coordinates of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetClientWidth ($hWnd) Retrieves the width of a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentProcess () Returns the process handle of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentProcessID () Returns the process identifier of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentThread () Retrieves a pseudo handle for the calling thread. (Requires: #include <WinAPI.au3>)
_WinAPI_GetCurrentThreadId () Returns the thread identifier of the calling thread (Requires: #include <WinAPI.au3>)
_WinAPI_GetCursorInfo () Retrieves information about the global cursor (Requires: #include <WinAPI.au3>)
_WinAPI_GetDC ($hWnd) Retrieves a handle of a display device context for the client area a window (Requires: #include <WinAPI.au3>)
_WinAPI_GetDesktopWindow () Returns the handle of the Windows desktop window (Requires: #include <WinAPI.au3>)
_WinAPI_GetDeviceCaps ($hDC, $iIndex) Retrieves device specific information about a specified device (Requires: #include <WinAPI.au3>)
_WinAPI_GetDIBits ($hDC, $hBmp, $iStartScan, $iScanLines, $pBits, $pBI, $iUsage) Retrieves the bits of the specified bitmap and copies them into a buffer as a DIB (Requires: #include <WinAPI.au3>)
_WinAPI_GetDlgCtrlID ($hWnd) Returns the identifier of the specified control (Requires: #include <WinAPI.au3>)
_WinAPI_GetDlgItem ($hWnd, $iItemID) Retrieves the handle of a control in the specified dialog box (Requires: #include <WinAPI.au3>)
_WinAPI_GetFileSizeEx ($hFile) Retrieves the size of the specified file (Requires: #include <WinAPI.au3>)
_WinAPI_GetFocus () Retrieves the handle of the window that has the keyboard focus (Requires: #include <WinAPI.au3>)
_WinAPI_GetForegroundWindow () Returns the handle of the foreground window (Requires: #include <WinAPI.au3>)
_WinAPI_GetGuiResources ([$iflag = 1 [, $hProcess = -1]]) Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process (Requires: #include <WinAPI.au3>)
_WinAPI_GetIconInfo ($hIcon) Retrieves information about the specified icon or cursor (Requires: #include <WinAPI.au3>)
_WinAPI_GetLastError () Returns the calling thread's lasterror code value (Requires: #include <WinAPI.au3>)
_WinAPI_GetLastErrorMessage () Returns the calling threads last error message (Requires: #include <WinAPI.au3>)
_WinAPI_GetLayeredWindowAttributes ($hWnd, ByRef $i_transcolor, ByRef $Transparency [, $asColorRef = False]) Gets Layered Window Attributes (Requires: #include <WinAPI.au3>)
_WinAPI_GetModuleHandle ($sModuleName) Returns a module handle for the specified module (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePos ([$fToClient = False [, $hWnd = 0]]) Returns the current mouse position (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePosX ([$fToClient = False [, $hWnd = 0]]) Returns the current mouse X position (Requires: #include <WinAPI.au3>)
_WinAPI_GetMousePosY ([$fToClient = False [, $hWnd = 0]]) Returns the current mouse Y position (Requires: #include <WinAPI.au3>)
_WinAPI_GetObject ($hObject, $iSize, $pObject) Retrieves information for the specified graphics object (Requires: #include <WinAPI.au3>)
_WinAPI_GetOpenFileName ([$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hwndOwner = 0]]]]]]]]]) Creates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to open (Requires: #include <WinAPI.au3>)
_WinAPI_GetOverlappedResult ($hFile, $pOverlapped, ByRef $iBytes [, $fWait = False]) Retrieves the results of an overlapped operation (Requires: #include <WinAPI.au3>)
_WinAPI_GetParent ($hWnd) Retrieves the handle of the specified child window's parent window (Requires: #include <WinAPI.au3>)
_WinAPI_GetProcAddress ($hModule, $vName) Retrieves the address of an exported function or variable from the specified module (Requires: #include <WinAPI.au3>)
_WinAPI_GetProcessAffinityMask ($hProcess) Obtains the affinity masks for the process and the system (Requires: #include <WinAPI.au3>)
_WinAPI_GetSaveFileName( [$sTitle = "" [, $sFilter = "All files (*.*)" [, $sInitalDir = "." [, $sDefaultFile = "" [, $sDefaultExt = "" [, $iFilterIndex = 1 [, $iFlags = 0 [, $iFlagsEx = 0 [, $hwndOwner = 0]]]]]]]]]) 创建保存对话框,让用户保存文件到指定的驱动器,目录和文件名 (需要: #Include <WinAPI.au3>)
_WinAPI_GetStdHandle ($iStdHandle) Retrieves a handle for the standard input, standard output, or standard error device (Requires: #include <WinAPI.au3>)
_WinAPI_GetStockObject ($iObject) Retrieves a handle to one of the predefined stock pens, brushes, fonts, or palettes (Requires: #include <WinAPI.au3>)
_WinAPI_GetSysColor ($iIndex) Retrieves the current color of the specified display element (Requires: #include <WinAPI.au3>)
_WinAPI_GetSysColorBrush ($iIndex) retrieves a handle identifying a logical brush that corresponds to the specified color index (Requires: #include <WinAPI.au3>)
_WinAPI_GetSystemMetrics ($iIndex) Retrieves the specified system metric or system configuration setting (Requires: #include <WinAPI.au3>)
_WinAPI_GetTextExtentPoint32 ($hDC, $sText) Computes the width and height of the specified string of text (Requires: #include <WinAPI.au3>)
_WinAPI_GetTextMetrics ($hDC) Retrieves basic information for the currently selected font. (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindow ($hWnd, $iCmd) Retrieves the handle of a window that has a specified relationship to the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowDC ($hWnd) Retrieves the device context (DC) for the entire window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowHeight ($hWnd) Returns the height of the window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowLong ($hWnd, $iIndex) Retrieves information about the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowPlacement ($hWnd) Retrieves the placement of the window for Min, Max, and normal positions (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowRect ($hWnd) Retrieves the dimensions of the bounding rectangle of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowRgn ($hWnd, $hRgn) Obtains a copy of the window region of a window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowText ($hWnd) Retrieves the text of the specified window's title bar (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowThreadProcessId ($hWnd, ByRef $iPID) Retrieves the identifier of the thread that created the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_GetWindowWidth ($hWnd) Returns the width of the window (Requires: #include <WinAPI.au3>)
_WinAPI_GetXYFromPoint (ByRef $tPoint, ByRef $iX, ByRef $iY) Returns the X/Y values from a $tagPOINT structure (Requires: #include <WinAPI.au3>)
_WinAPI_GlobalMemoryStatus () Retrieves information about current available memory (Requires: #include <WinAPI.au3>)
_WinAPI_GUIDFromString ($sGUID) Converts a string GUID to binary form (Requires: #include <WinAPI.au3>)
_WinAPI_GUIDFromStringEx ($sGUID, $pGUID) Converts a string GUID to binary form (Requires: #include <WinAPI.au3>)
_WinAPI_HiWord ($iLong) Returns the high word of a longword value (Requires: #include <WinAPI.au3>)
_WinAPI_InProcess ($hWnd, ByRef $hLastWnd) Determines whether a window belongs to the current process (Requires: #include <WinAPI.au3>)
_WinAPI_IntToFloat ($iInt) Returns a 4 byte integer as a float value (Requires: #include <WinAPI.au3>)
_WinAPI_InvalidateRect ($hWnd [, $tRect = 0 [, $fErase = True]]) Adds a rectangle to the specified window's update region (Requires: #include <WinAPI.au3>)
_WinAPI_IsClassName ($hWnd, $sClassName) Wrapper to check ClassName of the control. (Requires: #include <WinAPI.au3>)
_WinAPI_IsWindow ($hWnd) Determines whether the specified window handle identifies an existing window (Requires: #include <WinAPI.au3>)
_WinAPI_IsWindowVisible ($hWnd) Retrieves the visibility state of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_LineTo ($hDC, $iX, $iY) Draws a line from the current position up to, but not including, the specified point. (Requires: #include <WinAPI.au3>)
_WinAPI_LoadBitmap ($hInstance, $sBitmap) Loads the specified bitmap resource from a module's executable file (Requires: #include <WinAPI.au3>)
_WinAPI_LoadImage ($hInstance, $sImage, $iType, $iXDesired, $iYDesired, $iLoad) Loads an icon, cursor, or bitmap (Requires: #include <WinAPI.au3>)
_WinAPI_LoadLibrary ($sFileName) Maps a specified executable module into the address space of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_LoadLibraryEx ($sFileName [, $iFlags = 0]) Maps a specified executable module into the address space of the calling process (Requires: #include <WinAPI.au3>)
_WinAPI_LoadShell32Icon ($iIconID) Extracts an icon from the Shell32.dll file (Requires: #include <WinAPI.au3>)
_WinAPI_LoadString ($hInstance, $iStringId) loads a string resource from the executable file associated with a specified module (Requires: #include <WinAPI.au3>)
_WinAPI_LocalFree ($hMem) Frees the specified local memory object and invalidates its handle (Requires: #include <WinAPI.au3>)
_WinAPI_LoWord ($iLong) Returns the low word of a longword (Requires: #include <WinAPI.au3>)
_WinAPI_MAKELANGID ($lgidPrimary, $lgidSub) Construct language id from a primary language id and a sublanguage id (Requires: #include <WinAPI.au3>)
_WinAPI_MAKELCID ($lgid, $srtid) Construct locale id from a language id and a sort id (Requires: #include <WinAPI.au3>)
_WinAPI_MakeLong ($iLo, $iHi) Returns a longint value from two int values (Requires: #include <WinAPI.au3>)
_WinAPI_MakeQWord ($LoDWORD, $HiDWORD) Returns a QWORD value from two int values (Requires: #include <WinAPI.au3>)
_WinAPI_MessageBeep ([$iType = 1]) Plays a waveform sound (Requires: #include <WinAPI.au3>)
_WinAPI_Mouse_Event ($iFlags [, $iX = 0 [, $iY = 0 [, $iData = 0 [, $iExtraInfo = 0]]]]) Synthesizes mouse motion and button clicks (Requires: #include <WinAPI.au3>)
_WinAPI_MoveTo ($hDC, $iX, $iY) Updates the current position to the specified point (Requires: #include <WinAPI.au3>)
_WinAPI_MoveWindow ($hWnd, $iX, $iY, $iWidth, $iHeight [, $fRepaint = True]) Changes the position and dimensions of the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_MsgBox ($iFlags, $sTitle, $sText) Displays a message box with wider margin than original (Requires: #include <WinAPI.au3>)
_WinAPI_MulDiv ($iNumber, $iNumerator, $iDenominator) Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value (Requires: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideChar ($sText [, $iCodePage = 0 [, $iFlags = 0 [, $bRetString = False]]]) Maps a character string to a wide-character (Unicode) string (Requires: #include <WinAPI.au3>)
_WinAPI_MultiByteToWideCharEx ($sText, $pText [, $iCodePage = 0 [, $iFlags = 0]]) Maps a character string to a wide-character (Unicode) string (Requires: #include <WinAPI.au3>)
_WinAPI_OpenProcess ($iAccess, $fInherit, $iProcessID [, $fDebugPriv = False]) Returns a handle of an existing process object (Requires: #include <WinAPI.au3>)
_WinAPI_PathFindOnPath ($szFile, $aExtraPaths="", $szPathDelimiter=@LF) Searchs for a file in the default system paths (Requires: #include <WinAPI.au3>)
_WinAPI_PointFromRect (ByRef $tRect [, $fCenter = True]) Returns the top/left coordinates of a $tagRECT as a $tagPOINT structure (Requires: #include <WinAPI.au3>)
_WinAPI_PostMessage ($hWnd, $iMsg, $iwParam, $ilParam) Places a message in the message queue and then returns (Requires: #include <WinAPI.au3>)
_WinAPI_PrimaryLangId ($lgid) Extract primary language id from a language id (Requires: #include <WinAPI.au3>)
_WinAPI_PtInRect (ByRef $tRect, ByRef $tPoint) Determines whether the specified point lies within the specified rectangle (Requires: #include <WinAPI.au3>)
_WinAPI_ReadFile ($hFile, $pBuffer, $iToRead, ByRef $iRead [, $pOverlapped = 0]) Reads data from a file (Requires: #include <WinAPI.au3>)
_WinAPI_ReadProcessMemory ($hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iRead) Reads memory in a specified process (Requires: #include <WinAPI.au3>)
_WinAPI_RectIsEmpty (ByRef $tRect) Determins whether a rectangle is empty (Requires: #include <WinAPI.au3>)
_WinAPI_RedrawWindow ($hWnd [, $tRect = 0 [, $hRegion = 0 [, $iFlags = 5]]]) Updates the specified rectangle or region in a window's client area (Requires: #include <WinAPI.au3>)
_WinAPI_RegisterWindowMessage ($sMessage) Defines a new window message that is guaranteed to be unique throughout the system (Requires: #include <WinAPI.au3>)
_WinAPI_ReleaseCapture () Releases the mouse capture from a window in the current thread and restores normal mouse input processing (Requires: #include <WinAPI.au3>)
_WinAPI_ReleaseDC ($hWnd, $hDC) Releases a device context (Requires: #include <WinAPI.au3>)
_WinAPI_ScreenToClient ($hWnd, ByRef $tPoint) Converts screen coordinates of a specified point on the screen to client coordinates (Requires: #include <WinAPI.au3>)
_WinAPI_SelectObject ($hDC, $hGDIObj) Selects an object into the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_SetBkColor ($hDC, $iColor) Sets the current background color to the specified color value (Requires: #include <WinAPI.au3>)
_WinAPI_SetBkMode ($hDC, $iBkMode) Sets the background mix mode of the specified device context (Requires: #include <WinAPI.au3>)
_WinAPI_SetCapture ($hWnd) Sets the mouse capture to the specified window belonging to the current thread (Requires: #include <WinAPI.au3>)
_WinAPI_SetCursor ($hCursor) Establishes the cursor shape (Requires: #include <WinAPI.au3>)
_WinAPI_SetDefaultPrinter ($sPrinter) Sets the default printer for the current user on the local computer (Requires: #include <WinAPI.au3>)
_WinAPI_SetDIBits ($hDC, $hBmp, $iStartScan, $iScanLines, $pBits, $pBMI [, $iColorUse = 0]) Sets the pixels in a compatible bitmap using the color data found in a DIB (Requires: #include <WinAPI.au3>)
_WinAPI_SetEndOfFile ($hFile) Sets the physical file size for the specified file to the current position of the file pointer. (Requires: #include <WinAPI.au3>)
_WinAPI_SetEvent ($hEvent) Sets the specified event object to the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_SetFilePointer ($hFile, $iPos [, $iMethod = 0]) Moves the file pointer of the specified file (Requires: #include <WinAPI.au3>)
_WinAPI_SetFocus ($hWnd) Sets the keyboard focus to the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_SetFont ($hWnd, $hFont [, $fRedraw = True]) Sets a window font (Requires: #include <WinAPI.au3>)
_WinAPI_SetHandleInformation ($hObject, $iMask, $iFlags) Sets certain properties of an object handle (Requires: #include <WinAPI.au3>)
_WinAPI_SetLastError ($iErrCode) Sets the last-error code for the calling thread (Requires: #include <WinAPI.au3>)
_WinAPI_SetLayeredWindowAttributes ($hWnd, $i_transcolor [, $Transparency = 255 [, $dwFlags = 0x03 [, $isColorRef = False]]]) Sets Layered Window Attributes (Requires: #include <WinAPI.au3>)
_WinAPI_SetParent ($hWndChild, $hWndParent) Changes the parent window of the specified child window (Requires: #include <WinAPI.au3>)
_WinAPI_SetProcessAffinityMask ($hProcess, $iMask) Sets a processor affinity mask for the threads of a specified process (Requires: #include <WinAPI.au3>)
_WinAPI_SetSysColors ($vElements, $vColors) Obtains information about the display devices in a system (Requires: #include <WinAPI.au3>)
_WinAPI_SetTextColor ($hDC, $iColor) Sets the current text color to the specified color value (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowLong ($hWnd, $iIndex, $iValue) Sets information about the specified window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowPlacement ($hWnd, $pWindowPlacement) Sets the placement of the window for Min, Max, and normal positions (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowPos ($hWnd, $hAfter, $iX, $iY, $iCX, $iCY, $iFlags) Changes the size, position, and Z order of a child, pop-up, or top-level window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowRgn ($hWnd, $hRgn [, $bRedraw]) Sets the window region of a window (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowsHookEx ($idHook, $lpfn, $hmod [, $dwThreadId = 0]) Installs an application-defined hook procedure into a hook chain (Requires: #include <WinAPI.au3>)
_WinAPI_SetWindowText ($hWnd, $sText) Changes the text of the specified window's title bar (Requires: #include <WinAPI.au3>)
_WinAPI_ShowCursor ($fShow) Displays or hides the cursor (Requires: #include <WinAPI.au3>)
_WinAPI_ShowError ($sText [, $fExit = True]) Displays an error message box with an optional exit (Requires: #include <WinAPI.au3>)
_WinAPI_ShowMsg ($sText) Displays an "Information" message box (Requires: #include <WinAPI.au3>)
_WinAPI_ShowWindow ($hWnd [, $iCmdShow = 5]) Sets the specified window's show state (Requires: #include <WinAPI.au3>)
_WinAPI_StringFromGUID ($pGUID) Converts a binary GUID to string form (Requires: #include <WinAPI.au3>)
_WinAPI_StringLenA ($vString) Calculates the size of ANSI string (Requires: #include <WinAPI.au3>)
_WinAPI_StringLenW ($vString) Calculates the size of wide string (Requires: #include <WinAPI.au3>)
_WinAPI_SubLangId ($lgid) Extract sublanguage id from a language id (Requires: #include <WinAPI.au3>)
_WinAPI_SystemParametersInfo ($iAction [, $iParam = 0 [, $vParam = 0 [, $iWinIni = 0]]]) Retrieves or sets the value of one of the system-wide parameters (Requires: #include <WinAPI.au3>)
_WinAPI_TwipsPerPixelX () Returns the width of a pixel, in twips. (Requires: #include <WinAPI.au3>)
_WinAPI_TwipsPerPixelY () Returns the height of a pixel, in twips. (Requires: #include <WinAPI.au3>)
_WinAPI_UnhookWindowsHookEx ($hhk) Removes a hook procedure installed in a hook chain by the _WinAPI_SetWindowsHookEx function (Requires: #include <WinAPI.au3>)
_WinAPI_UpdateLayeredWindow ($hWnd, $hDCDest, $pPTDest, $pSize, $hDCSrce, $pPTSrce, $iRGB, $pBlend, $iFlags) Updates the position, size, shape, content, and translucency of a layered window (Requires: #include <WinAPI.au3>)
_WinAPI_UpdateWindow ($hWnd) Updates the client area of a window by sending a WM_PAINT message to the window (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForInputIdle ($hProcess [, $iTimeout = -1]) Waits until a process is waiting for user input with no input pending, or a time out (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForMultipleObjects ($iCount, $pHandles [, $fWaitAll = False [, $iTimeout = -1]]) Waits until one or all of the specified objects are in the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_WaitForSingleObject ($hHandle [, $iTimeout = -1]) Waits until the specified object is in the signaled state (Requires: #include <WinAPI.au3>)
_WinAPI_WideCharToMultiByte($pUnicode [, $iCodePage = 0 [, $bRetString = True]]) 转换一个 Unicode 字符串到一个多字节字符串. (需要: #Include <WinAPI.au3>)
_WinAPI_WindowFromPoint (ByRef $tPoint) Retrieves the handle of the window that contains the specified point (Requires: #include <WinAPI.au3>)
_WinAPI_WriteConsole ($hConsole, $sText) Writes a character string to a console screen buffer (Requires: #include <WinAPI.au3>)
_WinAPI_WriteFile($hFile, $pBuffer, $iToWrite, ByRef $iWritten [, $pOverlapped = 0]) 写入数据到文件指定位置. (需要: #Include <WinAPI.au3>)
_WinAPI_WriteProcessMemory($hProcess, $pBaseAddress, $pBuffer, $iSize, ByRef $iWritten [, $sBuffer = "ptr"]) 写入数据到指定进程的内存 (需要: #Include <WinAPI.au3>)
_WinHttpAddRequestHeaders ($hRequest, $sHeaders [, $iModifiers = Default ]) 添加一个或者多个 HTTP 请求头到 HTTP 请求句柄. (需要: #Include <WinHttp.au3>)
_WinHttpBinaryConcat(ByRef $bBinary1, ByRef $bBinary2) 合并两个二进制模式下由 _WinHttpReadData() 函数返回的二进制数据. (需要: #Include <WinHttp.au3>)
_WinHttpCheckPlatform() 确定当前平台是否支持当前版本的Microsoft Windows HTTP Services (WinHTTP) (需要: #Include <WinHttp.au3>)
_WinHttpCloseHandle($hInternet) 关闭一个HTTP句柄. (需要: #Include <WinHttp.au3>)
_WinHttpConnect($hSession, $sServerName [, $iServerPort = Default ]) 指定一个HTTP请求的初始目标服务器并返回一个指向初始服务器的HTTP会话连接句柄. (需要: #Include <WinHttp.au3>)
_WinHttpCrackUrl($sURL [, $iFlag = Default ]) 将URL拆分为主机名和路径的部分 (需要: #Include <WinHttp.au3>)
_WinHttpCreateUrl($aURLArray) 从一个包含主机名和路径等的数组创建一个URL地址. (需要: #Include <WinHttp.au3>)
_WinHttpDetectAutoProxyConfigUrl($iAutoDetectFlags) 查找代理自动设置(PAC)文件的URL (需要: #Include <WinHttp.au3>)
_WinHttpGetDefaultProxyConfiguration() 获取默认WinHttp代理配置 (需要: #Include <WinHttp.au3>)
_WinHttpGetIEProxyConfigForCurrentUser() 获取当前用户的 Internet Explorer 代理配置 (需要: #Include <WinHttp.au3>)
_WinHttpOpen([$sUserAgent = Default [, $iAccessType = Default [, $sProxyName = Default [, $sProxyBypass = Default [, $iFlag = Default ]]]]]) 初始化 WinHttp 函数的使用并返回一个 WinHttp 会话句柄. (需要: #Include <WinHttp.au3>)
_WinHttpOpenRequest($hConnect [, $sVerb = Default [, $sObjectName = Default [, $sVersion = Default [, $sReferrer = Default [, $sAcceptTypes = Default [, $iFlags = Default ]]]]]]) 创建一个HTTP请求句柄 (需要: #Include <WinHttp.au3>)
_WinHttpQueryDataAvailable($hRequest) 返回是否可由_WinHttpReadData()读取数据. (需要: #Include <WinHttp.au3>)
_WinHttpQueryHeaders($hRequest [, $iInfoLevel = Default [, $sName = Default [, $iIndex = Default ]]]) 获取与HTTP请求相关的头部信息. (需要: #Include <WinHttp.au3>)
_WinHttpQueryOption($hInternet, $iOption) 查询指定句柄的互联网选项. (需要: #Include <WinHttp.au3>)
_WinHttpReadData($hRequest [, $iMode = Default [, $iNumberOfBytesToRead = Default ]]) 从 _WinHttpOpenRequest() 函数打开的句柄读取数据 (需要: #Include <WinHttp.au3>)
_WinHttpReceiveResponse($hRequest) 等待接收由 WinHttpSendRequest() 函数初始化的HTTP请求的响应. (需要: #Include <WinHttp.au3>)
_WinHttpSendRequest($hRequest [, $sHeaders = Default [, $sOptional = Default [, $iTotalLength = Default [, $iContext = Default ]]]]) 发送指定请求到HTTP服务器. (需要: #Include <WinHttp.au3>)
_WinHttpSetCredentials($hRequest, $iAuthTargets, $iAuthScheme, $sUserName, $sPassword) 传递需要的认证凭据给服务器. (需要: #Include <WinHttp.au3>)
_WinHttpSetDefaultProxyConfiguration($iAccessType [, $sProxy = "" [, $sProxyBypass = ""]) 设置默认 WinHttp 代理配置. (需要: #Include <WinHttp.au3>)
_WinHttpSetOption($hInternet, $iOption, $vSetting [, $iSize = Default ]) 设置互联网选项 (需要: #Include <WinHttp.au3>)
_WinHttpSetStatusCallback($hInternet, $hInternetCallback [, $iNotificationFlags = Default ]) 设置 WinHTTP 操作进度的回调函数. (需要: #Include <WinHttp.au3>)
_WinHttpSetTimeouts($hInternet [, $iResolveTimeout = Default [, $iConnectTimeout = Default [, $iSendTimeout = Default [, $iReceiveTimeout = Default ]]]]) 设置 HTTP 传输超时时间. (需要: #Include <WinHttp.au3>)
_WinHttpSimpleFormFill(ByRef $hInternet [, $sActionPage = Default [, $sFormId = Default [, $sFieldId1 = Default [, $sData1 = Default [, (...)]]]]]) 填写表单 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleReadData($hRequest [, $iMode = Default ]) 从一个请求中读取数据 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleReadDataAsync($hInternet, Byref $pBuffer [, $iNumberOfBytesToRead = Default ]) 从 asynchronous 模式下的一个请求读取数据 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleRequest($hConnect, $sType, $sPath [, $sReferrer = Default [, $sData = Default [, $sHeader = Default [, $fGetHeaders = Default [, $iMode = Default ]]]]]) 使用HTTP请求发送一个简单的表单 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleSendRequest($hConnect, $sType, $sPath [, $sReferrer = Default [, $sData = Default [, $sHeader = Default ]]]) 使用HTTP请求发送一个简单的表单,但不读取数据 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleSendSSLRequest($hConnect [, $sType [, $sPath [, $sReferrer = Default [, $sData = Default [, $sHeader = Default ]]]]]) 使用SSL请求发送一个简单的表单,但不读取数据 (需要: #Include <WinHttp.au3>)
_WinHttpSimpleSSLRequest($hConnect [, $sType [, $sPath [, $sReferrer = Default [, $sData = Default [, $sHeader = Default [, $fGetHeaders = Default [, $iMode = Default ]]]]]]]) 使用SSL请求发送一个简单的表单 (需要: #Include <WinHttp.au3>)
_WinHttpTimeFromSystemTime() 根据 HTTP 版本 1.0 的协议格式化一个系统日期和时间. (需要: #Include <WinHttp.au3>)
_WinHttpTimeToSystemTime($sHttpTime) 转换 HTTP 时间/日期字符串化为一个数组(SYSTEMTIME数据结构). (需要: #Include <WinHttp.au3>)
_WinHttpWriteData($hRequest, $vData [, $iMode = Default ]) 写入请求数据到一个HTTP服务器. (需要: #Include <WinHttp.au3>)
_WinNet_AddConnection($sLocalName, $sRemoteName [, $sPassword = 0]) 将本地设备连接到网络资源 (需要: #Include <WinNet.au3>)
_WinNet_AddConnection2($sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]]) 连接本地设备到网络资源 (需要: #Include <WinNet.au3>)
_WinNet_AddConnection3($hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]]) 连接本地设备到网络资源 (需要: #Include <WinNet.au3>)
_WinNet_CancelConnection($sName [, $fForce = True]) 取消一个存在的网络连接 (需要: #Include <WinNet.au3>)
_WinNet_CancelConnection2($sName [, $fUpdate = True [, $fForce = True]]) 取消一个存在的网络连接 (需要: #Include <WinNet.au3>)
_WinNet_CloseEnum($hEnum) 结束由调用WNetOpenEnum启动的网络资源枚举 (需要: #Include <WinNet.au3>)
_WinNet_ConnectionDialog($hWnd) 打开一个用以连接到网络资源的通用浏览对话框 (需要: #Include <WinNet.au3>)
_WinNet_ConnectionDialog1($hWnd [, $sRemoteName = "" [, $iFlags = 2]]) 启动普通浏览对话框,用于连接网络资源． (需要: #Include <WinNet.au3>)
_WinNet_DisconnectDialog($hWnd) 断开网络资源时启动通用浏览对话框 (需要: #Include <WinNet.au3>)
_WinNet_DisconnectDialog1($hWnd, $sLocalName [, $sRemoteName = "" [, $iFlags = 1]]) 断开网络资源时启动通用浏览对话框 (需要: #Include <WinNet.au3>)
_WinNet_EnumResource($hEnum, ByRef $iCount, $pBuffer, ByRef $iBufSize) 枚举网络资源 (需要: #Include <WinNet.au3>)
_WinNet_GetConnection($sLocalName) 获取与本地设备相关的网络资源名称 (需要: #Include <WinNet.au3>)
_WinNet_GetConnectionPerformance($sLocalName, $sRemoteName) 返回资源网络连接性能的信息 (需要: #Include <WinNet.au3>)
_WinNet_GetLastError(ByRef $iError, ByRef $sError, ByRef $sName) 返回最近返回的扩展错误 (需要: #Include <WinNet.au3>)
_WinNet_GetNetworkInformation($sName) 返回指定网络提供者的扩展信息 (需要: #Include <WinNet.au3>)
_WinNet_GetProviderName($iType) 获取指定类型网络的提供方名称 (需要: #Include <WinNet.au3>)
_WinNet_GetResourceInformation($sRemoteName [, $sProvider = "" [, $iType = 0]]) 标识拥有资源的网络提供方 (需要: #Include <WinNet.au3>)
_WinNet_GetResourceParent($sRemoteName, $sProvider [, $iType = 0]) 返回网络浏览资源的父层次 (需要: #Include <WinNet.au3>)
_WinNet_GetUniversalName($sLocalPath) 转换驱动路径到通用格式 (需要: #Include <WinNet.au3>)
_WinNet_GetUser($sName) 检索默认用户名或用户名，用于建立一个连接 (需要: #Include <WinNet.au3>)
_WinNet_OpenEnum($iScope, $iType, $iUsage, $pResource, ByRef $hEnum) 启动对网络资源或存在的连接进行枚举的过程 (需要: #Include <WinNet.au3>)
_WinNet_RestoreConnection([$sDevice = "" [, $hWnd = 0 [, $fUseUI = True]]]) 还原网络资源的连接 (需要: #Include <WinNet.au3>)
_WinNet_UseConnection($hWnd, $sLocalName, $sRemoteName [, $sUserName = 0 [, $sPassword = 0 [, $iType = 1 [, $iOptions = 1]]]]) 连接本地设备到网络资源 (需要: #Include <WinNet.au3>)
_WordAttach ( $s_string [, $s_mode = "FilePath"] ) 使用选择的模式并使用字符串匹配的方法尝试附加到第一个存在的Microsoft Word实例(instance) (需要: #include <Word.au3> )
_WordCreate ( [ $s_FilePath = "" [, $b_tryAttach = 0 [, $b_visible = 1 [, $b_takeFocus = 1]]]] ) 创建一个 Microsoft Office Word 对象 (需要: #include <Word.au3> )
_WordDocAdd ( ByRef $o_object [, $i_DocumentType = 0 [, $s_Template = "" [, $b_NewTemplate = 0]]] ) 返回代表一个空白的新文件的对象变量 (需要: #include <Word.au3> )
_WordDocAddLink ( ByRef $o_object [, $o_Anchor = "" [, $s_Address = "" [, $s_SubAddress = "" [, $s_ScreenTip = "" [, $s_TextToDisplay = "" [, $s_Target = ""]]]]]] ) 向文件添加超级链接 (需要: #include <Word.au3> )
_WordDocAddPicture ( ByRef $o_object, $s_FilePath [, $b_LinkToFile = 0 [, $b_SaveWithDocument = 0 [, $o_Range = ""]]] ) 向文件中添加一个图片 (需要: #include <Word.au3> )
_WordDocClose ( ByRef $o_object [, $i_SaveChanges = -2 [, $i_OriginalFormat = 2 [, $b_RouteDocument = 0]]] ) 关闭一个上次打开的 word 文档 (需要: #include <Word.au3> )
_WordDocFindReplace ( ByRef $o_object [, $s_FindText = "" [, $s_ReplaceWith = "" [, $i_Replace = 2 [, $v_SearchRange = 0 [, $b_MatchCase = 0 [, $b_MatchWholeWord = 0 [, $b_MatchWildcards = 0 [, $b_MatchSoundsLike = 0 [, $b_MatchAllWordForms = 0 [, $b_Forward = 1 [, $i_Wrap = 1 [, $b_Format = 0]]]]]]]]]]]] ) 运行指定的查找替换操作. (需要: #include <Word.au3> )
_WordDocGetCollection ( ByRef $o_object [, $v_index = -1] ) 返回包含所有文件的集合的对象 (需要: #include <Word.au3> )
_WordDocLinkGetCollection ( ByRef $o_object [, $i_index = -1] ) 返回文档中全部链接对象的集合 (需要: #include <Word.au3> )
_WordDocOpen ( ByRef $o_object , $s_FilePath [, $b_ConfirmConversions = 0 [, $i_Format = 0 [, $b_ReadOnly = 0 [, $b_Revert = 0 [, $b_AddToRecentFiles = 0 [, $s_PasswordDocument = "" [, $s_WritePasswordDocument = ""]]]]]]] ) 打开一个已存在的 Microsoft Word 文档文件 (需要: #include <Word.au3> )
_WordDocPrint ( ByRef $o_object [, $b_Background = 0 [, $i_Copies = 1 [, $i_Orientation = -1 [, $b_Collate = 1 [, $s_Printer = "" [, $i_Range = 0 [, $i_From = "" [, $i_To = "" [, $s_Pages = "" [, $i_PageType = 0 [, $i_Item = 0]]]]]]]]]]] ) 打印指定文档的全部或者一部分. (需要: #include <Word.au3> )
_WordDocPropertyGet ( ByRef $o_object, $v_property ) 返回Word文档的某个属性 (需要: #include <Word.au3>)
_WordDocPropertySet ( ByRef $o_object, $v_property, $v_newvalue ) 设置 Word 文档的属性 (需要: #include <Word.au3> )
_WordDocSave ( $o_object ) 保存一个已经打开的文档. (需要: #include <Word.au3> )
_WordDocSaveAs ( ByRef $o_object [, $s_FilePath = "" [, $i_Format = 0 [, $b_ReadOnlyRecommended = 0 [, $b_AddToRecentFiles = 0 [, $b_LockComments = 0 [, $s_Password = "" [, $s_WritePassword = ""]]]]]]] ) 保存指定的文档为一个新名称或者其它格式. (需要: #include <Word.au3> )
_WordErrorHandlerDeRegister ( ) 禁用注册的用户 COM 错误处理程序 (需要: #include <Word.au3> )
_WordErrorHandlerRegister ( [$s_functionName = "__WordInternalErrorHandler"] ) 注册并启用用户 COM 错误处理程序 (需要: #include <Word.au3> )
_WordErrorNotify ( [$f_notify = -1] ) 指定是否 Word.au3 自动通知警告和错误 (在控制台) (需要: #include <Word.au3> )
_WordMacroRun ( $o_object, $s_MacroName [, $v_Arg1 [, $v_Arg<i>n</i> [, $v_Arg30]]] ) 运行 Visual Basic 宏 (需要: #include <Word.au3>)
_WordPropertyGet ( ByRef $o_object, $s_property ) 返回 Word 应用程序选定的属性. (需要: #include <Word.au3> )
_WordPropertySet ( ByRef $o_object, $s_property, $v_newvalue ) 设置 Word 应用程序的一个选择属性. (需要: #include <Word.au3> )
_WordQuit( ByRef $o_object [, $i_SaveChanges = -2 [, $i_OriginalFormat = 1 [, $b_RouteDocument = 0]]] ) 关闭窗体并移除其涉及的Word对象 (需要: #Include <Word.au3> )
_Word_VersionInfo ( ) 返回一个关于 Word.au3 版本相关信息的数组 (需要: #include <Word.au3> )
